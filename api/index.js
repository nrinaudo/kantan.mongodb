Index.PACKAGES = {"kantan.mongodb.query" : [{"name" : "kantan.mongodb.query.BitOp", "shortDescription" : "", "object" : "kantan\/mongodb\/query\/BitOp$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/BitOp.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/BitOp.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/BitOp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/BitOp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/BitOp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/BitOp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/BitOp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/BitOp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/BitOp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/BitOp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/BitOp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/BitOp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/BitOp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/BitOp.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/BitOp.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/BitOp.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/BitOp.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/BitOp.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/BitOp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/BitOp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/BitOp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/BitOp.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/BitOp.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/BitOp.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "bitEncoder", "tail" : ": BsonDocumentEncoder[BitOp]", "member" : "kantan.mongodb.query.BitOp.bitEncoder", "link" : "kantan\/mongodb\/query\/BitOp$.html#bitEncoder:kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.BitOp]", "kind" : "implicit val"}, {"label" : "Xor", "tail" : "", "member" : "kantan.mongodb.query.BitOp.Xor", "link" : "kantan\/mongodb\/query\/BitOp$.html#XorextendsBitOpwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Or", "tail" : "", "member" : "kantan.mongodb.query.BitOp.Or", "link" : "kantan\/mongodb\/query\/BitOp$.html#OrextendsBitOpwithProductwithSerializable", "kind" : "final case class"}, {"label" : "And", "tail" : "", "member" : "kantan.mongodb.query.BitOp.And", "link" : "kantan\/mongodb\/query\/BitOp$.html#AndextendsBitOpwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/BitOp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/BitOp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/BitOp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/BitOp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/BitOp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/BitOp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/BitOp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/BitOp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/BitOp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/BitOp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/BitOp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/BitOp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/BitOp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/BitOp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/BitOp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/BitOp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/BitOp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/BitOp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/BitOp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/query\/BitOp.html", "kind" : "class"}, {"name" : "kantan.mongodb.query.Query", "members_trait" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/Query.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/Query.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Query.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Query.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Query.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Query.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Query.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Query.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Query.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Query.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Query.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Query.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Query.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Query.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Query.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Query.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Query.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Query.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Query.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Query.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Query.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/Query.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/Query.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/Query.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "object" : "kantan\/mongodb\/query\/Query$.html", "members_object" : [{"label" : "Field", "tail" : "", "member" : "kantan.mongodb.query.Query.Field", "link" : "kantan\/mongodb\/query\/Query$.html#Field", "kind" : "object"}, {"label" : "Field", "tail" : "", "member" : "kantan.mongodb.query.Query.Field", "link" : "kantan\/mongodb\/query\/Query$.html#Field[A]extendsQuerywithProductwithSerializable", "kind" : "final case class"}, {"label" : "Compound", "tail" : "", "member" : "kantan.mongodb.query.Query.Compound", "link" : "kantan\/mongodb\/query\/Query$.html#Compound", "kind" : "object"}, {"label" : "Compound", "tail" : "", "member" : "kantan.mongodb.query.Query.Compound", "link" : "kantan\/mongodb\/query\/Query$.html#Compound[L,R]extendsQuery", "kind" : "sealed abstract class"}, {"label" : "notEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[Not[A]]", "member" : "kantan.mongodb.query.Query.notEncoder", "link" : "kantan\/mongodb\/query\/Query$.html#notEncoder[A](implicitevidence$5:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Query.Not[A]]", "kind" : "implicit def"}, {"label" : "norEncoder", "tail" : "(f: Flattener[Or[L, R]]): BsonDocumentEncoder[Not[Or[L, R]]]", "member" : "kantan.mongodb.query.Query.norEncoder", "link" : "kantan\/mongodb\/query\/Query$.html#norEncoder[L,R](implicitf:kantan.mongodb.query.Query.Compound.Flattener[kantan.mongodb.query.Query.Compound.Or[L,R]]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Query.Not[kantan.mongodb.query.Query.Compound.Or[L,R]]]", "kind" : "implicit def"}, {"label" : "notInEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[Not[Field[In[A]]]]", "member" : "kantan.mongodb.query.Query.notInEncoder", "link" : "kantan\/mongodb\/query\/Query$.html#notInEncoder[A](implicitevidence$4:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Query.Not[kantan.mongodb.query.Query.Field[kantan.mongodb.query.QueryOperator.In[A]]]]", "kind" : "implicit def"}, {"label" : "notEqEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[Not[Field[Eq[A]]]]", "member" : "kantan.mongodb.query.Query.notEqEncoder", "link" : "kantan\/mongodb\/query\/Query$.html#notEqEncoder[A](implicitevidence$3:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Query.Not[kantan.mongodb.query.Query.Field[kantan.mongodb.query.QueryOperator.Eq[A]]]]", "kind" : "implicit def"}, {"label" : "notFieldEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[Not[Field[A]]]", "member" : "kantan.mongodb.query.Query.notFieldEncoder", "link" : "kantan\/mongodb\/query\/Query$.html#notFieldEncoder[A](implicitevidence$2:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Query.Not[kantan.mongodb.query.Query.Field[A]]]", "kind" : "implicit def"}, {"label" : "notNotEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[Not[Not[A]]]", "member" : "kantan.mongodb.query.Query.notNotEncoder", "link" : "kantan\/mongodb\/query\/Query$.html#notNotEncoder[A](implicitevidence$1:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.Query.Not[kantan.mongodb.query.Query.Not[A]]]", "kind" : "implicit def"}, {"label" : "Not", "tail" : "", "member" : "kantan.mongodb.query.Query.Not", "link" : "kantan\/mongodb\/query\/Query$.html#Not[A]extendsQuerywithProductwithSerializable", "kind" : "final case class"}, {"label" : "emptyDocumentEncoder", "tail" : ": BsonDocumentEncoder[Empty]", "member" : "kantan.mongodb.query.Query.emptyDocumentEncoder", "link" : "kantan\/mongodb\/query\/Query$.html#emptyDocumentEncoder:kantan.mongodb.BsonDocumentEncoder[sun.invoke.empty.Empty]", "kind" : "implicit val"}, {"label" : "Empty", "tail" : "", "member" : "kantan.mongodb.query.Query.Empty", "link" : "kantan\/mongodb\/query\/Query$.html#Empty", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Query$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Query$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Query$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Query$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Query$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Query$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Query$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Query$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Query$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Query$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Query$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Query$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Query$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Query$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Query$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Query$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Query$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Query$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Query$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/mongodb\/query\/Query.html", "kind" : "trait"}, {"name" : "kantan.mongodb.query.QueryOperator", "shortDescription" : "", "object" : "kantan\/mongodb\/query\/QueryOperator$.html", "members_class" : [{"label" : "operand", "tail" : ": A", "member" : "kantan.mongodb.query.QueryOperator.operand", "link" : "kantan\/mongodb\/query\/QueryOperator.html#operand:A", "kind" : "val"}, {"label" : "operator", "tail" : ": String", "member" : "kantan.mongodb.query.QueryOperator.operator", "link" : "kantan\/mongodb\/query\/QueryOperator.html#operator:String", "kind" : "val"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/QueryOperator.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/QueryOperator.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/QueryOperator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/QueryOperator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/QueryOperator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/QueryOperator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/QueryOperator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/QueryOperator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/QueryOperator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/QueryOperator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/QueryOperator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/QueryOperator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/QueryOperator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/QueryOperator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/QueryOperator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/QueryOperator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/QueryOperator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/QueryOperator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/QueryOperator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/QueryOperator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/QueryOperator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/QueryOperator.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/QueryOperator.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/QueryOperator.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "eqValueEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[Eq[A]]", "member" : "kantan.mongodb.query.QueryOperator.eqValueEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#eqValueEncoder[A](implicitevidence$4:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.QueryOperator.Eq[A]]", "kind" : "implicit def"}, {"label" : "simpleOperatorEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[Q[A]]", "member" : "kantan.mongodb.query.QueryOperator.simpleOperatorEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#simpleOperatorEncoder[Q[X]<:kantan.mongodb.query.QueryOperator[X],A](implicitevidence$3:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[Q[A]]", "kind" : "implicit def"}, {"label" : "bitsOperatorEncoder", "tail" : "(): BsonValueEncoder[Q]", "member" : "kantan.mongodb.query.QueryOperator.bitsOperatorEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#bitsOperatorEncoder[Q<:kantan.mongodb.query.QueryOperator.Bits]:kantan.mongodb.BsonValueEncoder[Q]", "kind" : "implicit def"}, {"label" : "seqOperatorEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[Q[A]]", "member" : "kantan.mongodb.query.QueryOperator.seqOperatorEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#seqOperatorEncoder[Q[X]<:kantan.mongodb.query.QueryOperator[Seq[X]],A](implicitevidence$2:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[Q[A]]", "kind" : "implicit def"}, {"label" : "modEncoder", "tail" : ": BsonValueEncoder[Mod]", "member" : "kantan.mongodb.query.QueryOperator.modEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#modEncoder:kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.QueryOperator.Mod]", "kind" : "implicit val"}, {"label" : "whereEncoder", "tail" : ": BsonValueEncoder[Where]", "member" : "kantan.mongodb.query.QueryOperator.whereEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#whereEncoder:kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.QueryOperator.Where]", "kind" : "implicit val"}, {"label" : "sizeEncoder", "tail" : ": BsonValueEncoder[Size]", "member" : "kantan.mongodb.query.QueryOperator.sizeEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#sizeEncoder:kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.QueryOperator.Size]", "kind" : "implicit val"}, {"label" : "regexEncoder", "tail" : ": BsonValueEncoder[Regex]", "member" : "kantan.mongodb.query.QueryOperator.regexEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#regexEncoder:kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.QueryOperator.Regex]", "kind" : "implicit val"}, {"label" : "existsValueEncoder", "tail" : ": BsonValueEncoder[Exists]", "member" : "kantan.mongodb.query.QueryOperator.existsValueEncoder", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#existsValueEncoder:kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.QueryOperator.Exists]", "kind" : "implicit val"}, {"label" : "Geo", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Geo", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Geo", "kind" : "object"}, {"label" : "Geo", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Geo", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#GeoextendsAnyRef", "kind" : "sealed trait"}, {"label" : "Bits", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Bits", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Bits", "kind" : "object"}, {"label" : "Bits", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Bits", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#BitsextendsQueryOperator[Long]", "kind" : "sealed abstract class"}, {"label" : "Mod", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Mod", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Mod", "kind" : "object"}, {"label" : "Mod", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Mod", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#ModextendsQueryOperator[kantan.mongodb.query.QueryOperator.Mod.Value]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Where", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Where", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#WhereextendsQueryOperator[String]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Size", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Size", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#SizeextendsQueryOperator[Int]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Regex", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Regex", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#RegexextendsQueryOperator[java.util.regex.Pattern]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Exists", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Exists", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#ExistsextendsQueryOperator[Boolean]withProductwithSerializable", "kind" : "final case class"}, {"label" : "ElemMatch", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.ElemMatch", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#ElemMatch[A]extendsQueryOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "All", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.All", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#All[A]extendsQueryOperator[Seq[A]]withProductwithSerializable", "kind" : "final case class"}, {"label" : "In", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.In", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#In[A]extendsQueryOperator[Seq[A]]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Lte", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Lte", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Lte[A]extendsQueryOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Lt", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Lt", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Lt[A]extendsQueryOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Gte", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Gte", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Gte[A]extendsQueryOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Gt", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Gt", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Gt[A]extendsQueryOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Eq", "tail" : "", "member" : "kantan.mongodb.query.QueryOperator.Eq", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#Eq[A]extendsQueryOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "unapply", "tail" : "(op: QueryOperator[A]): Option[(String, A)]", "member" : "kantan.mongodb.query.QueryOperator.unapply", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#unapply[A](op:kantan.mongodb.query.QueryOperator[A]):Option[(String,A)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/QueryOperator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/QueryOperator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/query\/QueryOperator.html", "kind" : "class"}, {"name" : "kantan.mongodb.query.Shape", "shortDescription" : "", "object" : "kantan\/mongodb\/query\/Shape$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/Shape.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/Shape.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Shape.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Shape.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Shape.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Shape.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Shape.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Shape.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Shape.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Shape.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Shape.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Shape.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Shape.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Shape.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Shape.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Shape.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Shape.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Shape.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Shape.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Shape.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Shape.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/Shape.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/Shape.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/Shape.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "shapeValueEncoder", "tail" : ": BsonValueEncoder[Shape]", "member" : "kantan.mongodb.query.Shape.shapeValueEncoder", "link" : "kantan\/mongodb\/query\/Shape$.html#shapeValueEncoder:kantan.mongodb.BsonValueEncoder[kantan.mongodb.query.Shape]", "kind" : "implicit val"}, {"label" : "Polygon", "tail" : "", "member" : "kantan.mongodb.query.Shape.Polygon", "link" : "kantan\/mongodb\/query\/Shape$.html#PolygonextendsShapewithProductwithSerializable", "kind" : "final case class"}, {"label" : "CenterSphere", "tail" : "", "member" : "kantan.mongodb.query.Shape.CenterSphere", "link" : "kantan\/mongodb\/query\/Shape$.html#CenterSphereextendsShapewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Center", "tail" : "", "member" : "kantan.mongodb.query.Shape.Center", "link" : "kantan\/mongodb\/query\/Shape$.html#CenterextendsShapewithProductwithSerializable", "kind" : "final case class"}, {"label" : "Box", "tail" : "", "member" : "kantan.mongodb.query.Shape.Box", "link" : "kantan\/mongodb\/query\/Shape$.html#BoxextendsShapewithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Shape$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Shape$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Shape$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Shape$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Shape$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Shape$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Shape$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Shape$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Shape$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Shape$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Shape$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Shape$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Shape$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Shape$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Shape$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Shape$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Shape$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Shape$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Shape$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/query\/Shape.html", "kind" : "class"}, {"name" : "kantan.mongodb.query.Sort", "shortDescription" : "", "object" : "kantan\/mongodb\/query\/Sort$.html", "members_class" : [{"label" : "metaTextScore", "tail" : "(field: String): Sort", "member" : "kantan.mongodb.query.Sort.metaTextScore", "link" : "kantan\/mongodb\/query\/Sort.html#metaTextScore(field:String):kantan.mongodb.query.Sort", "kind" : "def"}, {"label" : "desc", "tail" : "(field: String): Sort", "member" : "kantan.mongodb.query.Sort.desc", "link" : "kantan\/mongodb\/query\/Sort.html#desc(field:String):kantan.mongodb.query.Sort", "kind" : "def"}, {"label" : "asc", "tail" : "(field: String): Sort", "member" : "kantan.mongodb.query.Sort.asc", "link" : "kantan\/mongodb\/query\/Sort.html#asc(field:String):kantan.mongodb.query.Sort", "kind" : "def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/Sort.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/Sort.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Sort.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Sort.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Sort.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Sort.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Sort.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Sort.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Sort.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Sort.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Sort.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Sort.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Sort.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Sort.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Sort.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Sort.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Sort.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Sort.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Sort.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Sort.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Sort.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/Sort.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/Sort.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/Sort.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "sortDocumentEncoder", "tail" : ": BsonDocumentEncoder[Sort]", "member" : "kantan.mongodb.query.Sort.sortDocumentEncoder", "link" : "kantan\/mongodb\/query\/Sort$.html#sortDocumentEncoder:kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Sort]", "kind" : "implicit val"}, {"label" : "Compound", "tail" : "", "member" : "kantan.mongodb.query.Sort.Compound", "link" : "kantan\/mongodb\/query\/Sort$.html#CompoundextendsSortwithProductwithSerializable", "kind" : "final case class"}, {"label" : "MetaTextScore", "tail" : "", "member" : "kantan.mongodb.query.Sort.MetaTextScore", "link" : "kantan\/mongodb\/query\/Sort$.html#MetaTextScoreextendsSortwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Descending", "tail" : "", "member" : "kantan.mongodb.query.Sort.Descending", "link" : "kantan\/mongodb\/query\/Sort$.html#DescendingextendsSortwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Ascending", "tail" : "", "member" : "kantan.mongodb.query.Sort.Ascending", "link" : "kantan\/mongodb\/query\/Sort$.html#AscendingextendsSortwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Sort$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Sort$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Sort$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Sort$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Sort$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Sort$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Sort$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Sort$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Sort$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Sort$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Sort$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Sort$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Sort$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Sort$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Sort$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Sort$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Sort$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Sort$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Sort$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/query\/Sort.html", "kind" : "class"}, {"name" : "kantan.mongodb.query.Time", "shortDescription" : "", "object" : "kantan\/mongodb\/query\/Time$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/Time.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/Time.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Time.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Time.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Time.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Time.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Time.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Time.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Time.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Time.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Time.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Time.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Time.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Time.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Time.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Time.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Time.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Time.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Time.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Time.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Time.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/Time.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/Time.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/Time.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "timeTypeEncoder", "tail" : ": BsonDocumentEncoder[Time]", "member" : "kantan.mongodb.query.Time.timeTypeEncoder", "link" : "kantan\/mongodb\/query\/Time$.html#timeTypeEncoder:kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Time]", "kind" : "implicit val"}, {"label" : "Date", "tail" : "", "member" : "kantan.mongodb.query.Time.Date", "link" : "kantan\/mongodb\/query\/Time$.html#Date", "kind" : "object"}, {"label" : "Timestamp", "tail" : "", "member" : "kantan.mongodb.query.Time.Timestamp", "link" : "kantan\/mongodb\/query\/Time$.html#Timestamp", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Time$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Time$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Time$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Time$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Time$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Time$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Time$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Time$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Time$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Time$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Time$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Time$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Time$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Time$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Time$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Time$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Time$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Time$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Time$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/query\/Time.html", "kind" : "class"}, {"name" : "kantan.mongodb.query.Update", "members_trait" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/Update.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/Update.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Update.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Update.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Update.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Update.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Update.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Update.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Update.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Update.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Update.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Update.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Update.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Update.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Update.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Update.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Update.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Update.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Update.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Update.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Update.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/Update.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/Update.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/Update.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "shortDescription" : "", "object" : "kantan\/mongodb\/query\/Update$.html", "members_object" : [{"label" : "fieldEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[Field[A]]", "member" : "kantan.mongodb.query.Update.fieldEncoder", "link" : "kantan\/mongodb\/query\/Update$.html#fieldEncoder[A](implicitevidence$3:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Update.Field[A]]", "kind" : "implicit def"}, {"label" : "Field", "tail" : "", "member" : "kantan.mongodb.query.Update.Field", "link" : "kantan\/mongodb\/query\/Update$.html#Field[A]extendsUpdatewithProductwithSerializable", "kind" : "final case class"}, {"label" : "combinedEncoder", "tail" : "(arg0: BsonDocumentEncoder[L], arg1: BsonDocumentEncoder[R]): BsonDocumentEncoder[Combined[L, R]]", "member" : "kantan.mongodb.query.Update.combinedEncoder", "link" : "kantan\/mongodb\/query\/Update$.html#combinedEncoder[L,R](implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[L],implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[R]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.Update.Combined[L,R]]", "kind" : "implicit def"}, {"label" : "Combined", "tail" : "", "member" : "kantan.mongodb.query.Update.Combined", "link" : "kantan\/mongodb\/query\/Update$.html#Combined[L,R]extendsUpdatewithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/Update$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/Update$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/Update$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/Update$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/Update$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/Update$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/Update$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Update$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Update$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/Update$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/Update$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/Update$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/Update$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/Update$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/Update$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/Update$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/Update$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/Update$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/Update$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "trait" : "kantan\/mongodb\/query\/Update.html", "kind" : "trait"}, {"name" : "kantan.mongodb.query.UpdateOperator", "shortDescription" : "", "object" : "kantan\/mongodb\/query\/UpdateOperator$.html", "members_class" : [{"label" : "operand", "tail" : ": A", "member" : "kantan.mongodb.query.UpdateOperator.operand", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#operand:A", "kind" : "val"}, {"label" : "operator", "tail" : ": String", "member" : "kantan.mongodb.query.UpdateOperator.operator", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#operator:String", "kind" : "val"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/UpdateOperator.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/query\/UpdateOperator.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Bitwise", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Bitwise", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#BitwiseextendsUpdateOperator[kantan.mongodb.query.BitOp]withProductwithSerializable", "kind" : "final case class"}, {"label" : "CurrentDate", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.CurrentDate", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#CurrentDateextendsUpdateOperator[kantan.mongodb.query.Time]withProductwithSerializable", "kind" : "final case class"}, {"label" : "SetOnInsert", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.SetOnInsert", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#SetOnInsert[A]extendsUpdateOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Max", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Max", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#Max[A]extendsUpdateOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Min", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Min", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#Min[A]extendsUpdateOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Unset", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Unset", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#Unset", "kind" : "object"}, {"label" : "Rename", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Rename", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#RenameextendsUpdateOperator[String]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Set", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Set", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#Set[A]extendsUpdateOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Mul", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Mul", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#MulextendsUpdateOperator[Int]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Inc", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Inc", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#IncextendsUpdateOperator[Int]withProductwithSerializable", "kind" : "final case class"}, {"label" : "modifiersEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[Modifiers[A]]", "member" : "kantan.mongodb.query.UpdateOperator.modifiersEncoder", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#modifiersEncoder[A](implicitevidence$1:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.query.UpdateOperator.Modifiers[A]]", "kind" : "implicit def"}, {"label" : "Modifiers", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Modifiers", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#Modifiers[A]extendsProductwithSerializable", "kind" : "final case class"}, {"label" : "Push", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Push", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#Push[A]extendsUpdateOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "PushAll", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.PushAll", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#PushAll[A]extendsUpdateOperator[Seq[A]]withProductwithSerializable", "kind" : "final case class"}, {"label" : "PullAll", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.PullAll", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#PullAll[A]extendsUpdateOperator[Seq[A]]withProductwithSerializable", "kind" : "final case class"}, {"label" : "Pull", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.Pull", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#Pull[A]extendsUpdateOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "PopLast", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.PopLast", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#PopLast", "kind" : "object"}, {"label" : "PopFirst", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.PopFirst", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#PopFirst", "kind" : "object"}, {"label" : "AddToSet", "tail" : "", "member" : "kantan.mongodb.query.UpdateOperator.AddToSet", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#AddToSet[A]extendsUpdateOperator[A]withProductwithSerializable", "kind" : "final case class"}, {"label" : "unapply", "tail" : "(u: UpdateOperator[A]): Option[(String, A)]", "member" : "kantan.mongodb.query.UpdateOperator.unapply", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#unapply[A](u:kantan.mongodb.query.UpdateOperator[A]):Option[(String,A)]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/query\/UpdateOperator$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/query\/UpdateOperator.html", "kind" : "class"}], "kantan.mongodb.io" : [{"name" : "kantan.mongodb.io.ArrayCodec", "shortDescription" : "", "members_class" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonArray]", "member" : "kantan.mongodb.io.ArrayCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#getEncoderClass():Class[kantan.mongodb.BsonArray]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonArray, context: EncoderContext): Unit", "member" : "kantan.mongodb.io.ArrayCodec.encode", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonArray,context:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, context: DecoderContext): BsonArray", "member" : "kantan.mongodb.io.ArrayCodec.decode", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#decode(reader:org.bson.BsonReader,context:org.bson.codecs.DecoderContext):kantan.mongodb.BsonArray", "kind" : "def"}, {"member" : "kantan.mongodb.io.ArrayCodec#<init>", "error" : "unsupported entity"}, {"label" : "registry", "tail" : ": CodecRegistry", "member" : "kantan.mongodb.io.ArrayCodec.registry", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#registry:org.bson.codecs.configuration.CodecRegistry", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/ArrayCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/ArrayCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/io\/ArrayCodec.html", "kind" : "class"}, {"name" : "kantan.mongodb.io.BinaryCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/BinaryCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonBinary]", "member" : "kantan.mongodb.io.BinaryCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonBinary]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(t: BsonBinary): Array[Byte]", "member" : "kantan.mongodb.io.BinaryCodec.unwrap", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#unwrap(t:kantan.mongodb.BsonBinary):Array[Byte]", "kind" : "def"}, {"label" : "wrap", "tail" : "(data: IndexedSeq[Byte]): BsonBinary", "member" : "kantan.mongodb.io.BinaryCodec.wrap", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#wrap(data:IndexedSeq[Byte]):kantan.mongodb.BsonBinary", "kind" : "def"}, {"label" : "subtype", "tail" : ": BsonBinarySubType", "member" : "kantan.mongodb.io.BinaryCodec.subtype", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#subtype:org.bson.BsonBinarySubType", "kind" : "val"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonBinary, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.RawBinaryCodec.encode", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#encode(writer:org.bson.BsonWriter,value:T,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, decoderContext: DecoderContext): BsonBinary", "member" : "kantan.mongodb.io.RawBinaryCodec.decode", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#decode(reader:org.bson.BsonReader,decoderContext:org.bson.codecs.DecoderContext):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/BinaryCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.BinaryDataCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/BinaryDataCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonBinaryData]", "member" : "kantan.mongodb.io.BinaryDataCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonBinaryData]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonBinaryData, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.BinaryDataCodec.encode", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonBinaryData,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, decoderContext: DecoderContext): BsonBinaryData", "member" : "kantan.mongodb.io.BinaryDataCodec.decode", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#decode(reader:org.bson.BsonReader,decoderContext:org.bson.codecs.DecoderContext):kantan.mongodb.BsonBinaryData", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/BinaryDataCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.BooleanCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/BooleanCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonBoolean]", "member" : "kantan.mongodb.io.BooleanCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonBoolean]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonBoolean, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.BooleanCodec.encode", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonBoolean,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonBoolean", "member" : "kantan.mongodb.io.BooleanCodec.decode", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonBoolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/BooleanCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.BsonValueCodecProvider", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html", "members_object" : [{"label" : "get", "tail" : "(c: Class[T], registry: CodecRegistry): Codec[T]", "member" : "kantan.mongodb.io.BsonValueCodecProvider.get", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#get[T](c:Class[T],registry:org.bson.codecs.configuration.CodecRegistry):org.bson.codecs.Codec[T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/BsonValueCodecProvider$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.DateTimeCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/DateTimeCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonDateTime]", "member" : "kantan.mongodb.io.DateTimeCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonDateTime]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonDateTime, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.DateTimeCodec.encode", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonDateTime,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonDateTime", "member" : "kantan.mongodb.io.DateTimeCodec.decode", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonDateTime", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/DateTimeCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.DbPointerCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/DbPointerCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonDbPointer]", "member" : "kantan.mongodb.io.DbPointerCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonDbPointer]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonDbPointer, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.DbPointerCodec.encode", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonDbPointer,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonDbPointer", "member" : "kantan.mongodb.io.DbPointerCodec.decode", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonDbPointer", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/DbPointerCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.Decimal128Codec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/Decimal128Codec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonDecimal128]", "member" : "kantan.mongodb.io.Decimal128Codec.getEncoderClass", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#getEncoderClass():Class[kantan.mongodb.BsonDecimal128]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonDecimal128, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.Decimal128Codec.encode", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonDecimal128,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonDecimal128", "member" : "kantan.mongodb.io.Decimal128Codec.decode", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonDecimal128", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/Decimal128Codec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.DocumentCodec", "shortDescription" : "", "members_class" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonDocument]", "member" : "kantan.mongodb.io.DocumentCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#getEncoderClass():Class[kantan.mongodb.BsonDocument]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonDocument, context: EncoderContext): Unit", "member" : "kantan.mongodb.io.DocumentCodec.encode", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonDocument,context:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, context: DecoderContext): BsonDocument", "member" : "kantan.mongodb.io.DocumentCodec.decode", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#decode(reader:org.bson.BsonReader,context:org.bson.codecs.DecoderContext):kantan.mongodb.BsonDocument", "kind" : "def"}, {"member" : "kantan.mongodb.io.DocumentCodec#<init>", "error" : "unsupported entity"}, {"label" : "registry", "tail" : ": CodecRegistry", "member" : "kantan.mongodb.io.DocumentCodec.registry", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#registry:org.bson.codecs.configuration.CodecRegistry", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/DocumentCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/DocumentCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/io\/DocumentCodec.html", "kind" : "class"}, {"name" : "kantan.mongodb.io.DoubleCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/DoubleCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonDouble]", "member" : "kantan.mongodb.io.DoubleCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonDouble]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonDouble, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.DoubleCodec.encode", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonDouble,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonDouble", "member" : "kantan.mongodb.io.DoubleCodec.decode", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonDouble", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/DoubleCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.FunctionCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/FunctionCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonFunction]", "member" : "kantan.mongodb.io.FunctionCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonFunction]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(t: BsonFunction): Array[Byte]", "member" : "kantan.mongodb.io.FunctionCodec.unwrap", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#unwrap(t:kantan.mongodb.BsonFunction):Array[Byte]", "kind" : "def"}, {"label" : "wrap", "tail" : "(data: IndexedSeq[Byte]): BsonFunction", "member" : "kantan.mongodb.io.FunctionCodec.wrap", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#wrap(data:IndexedSeq[Byte]):kantan.mongodb.BsonFunction", "kind" : "def"}, {"label" : "subtype", "tail" : ": BsonBinarySubType", "member" : "kantan.mongodb.io.FunctionCodec.subtype", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#subtype:org.bson.BsonBinarySubType", "kind" : "val"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonFunction, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.RawBinaryCodec.encode", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#encode(writer:org.bson.BsonWriter,value:T,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, decoderContext: DecoderContext): BsonFunction", "member" : "kantan.mongodb.io.RawBinaryCodec.decode", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#decode(reader:org.bson.BsonReader,decoderContext:org.bson.codecs.DecoderContext):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/FunctionCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.IntCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/IntCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonInt]", "member" : "kantan.mongodb.io.IntCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/IntCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonInt]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonInt, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.IntCodec.encode", "link" : "kantan\/mongodb\/io\/IntCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonInt,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonInt", "member" : "kantan.mongodb.io.IntCodec.decode", "link" : "kantan\/mongodb\/io\/IntCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonInt", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/IntCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/IntCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/IntCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/IntCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/IntCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/IntCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/IntCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/IntCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/IntCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/IntCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/IntCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/IntCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/IntCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/IntCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/IntCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/IntCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/IntCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/IntCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/IntCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.JavaScriptCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/JavaScriptCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonJavaScript]", "member" : "kantan.mongodb.io.JavaScriptCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonJavaScript]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonJavaScript, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.JavaScriptCodec.encode", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonJavaScript,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonJavaScript", "member" : "kantan.mongodb.io.JavaScriptCodec.decode", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonJavaScript", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/JavaScriptCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.JavaScriptWithScopeCodec", "shortDescription" : "", "members_class" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonJavaScriptWithScope]", "member" : "kantan.mongodb.io.JavaScriptWithScopeCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#getEncoderClass():Class[kantan.mongodb.BsonJavaScriptWithScope]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonJavaScriptWithScope, context: EncoderContext): Unit", "member" : "kantan.mongodb.io.JavaScriptWithScopeCodec.encode", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonJavaScriptWithScope,context:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, context: DecoderContext): BsonJavaScriptWithScope", "member" : "kantan.mongodb.io.JavaScriptWithScopeCodec.decode", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#decode(reader:org.bson.BsonReader,context:org.bson.codecs.DecoderContext):kantan.mongodb.BsonJavaScriptWithScope", "kind" : "def"}, {"member" : "kantan.mongodb.io.JavaScriptWithScopeCodec#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/io\/JavaScriptWithScopeCodec.html", "kind" : "class"}, {"name" : "kantan.mongodb.io.LongCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/LongCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonLong]", "member" : "kantan.mongodb.io.LongCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/LongCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonLong]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonLong, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.LongCodec.encode", "link" : "kantan\/mongodb\/io\/LongCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonLong,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonLong", "member" : "kantan.mongodb.io.LongCodec.decode", "link" : "kantan\/mongodb\/io\/LongCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonLong", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/LongCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/LongCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/LongCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/LongCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/LongCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/LongCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/LongCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/LongCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/LongCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/LongCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/LongCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/LongCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/LongCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/LongCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/LongCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/LongCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/LongCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/LongCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/LongCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.MaxKeyCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/MaxKeyCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonMaxKey.type]", "member" : "kantan.mongodb.io.MaxKeyCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonMaxKey.type]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonMaxKey.type, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.MaxKeyCodec.encode", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonMaxKey.type,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonMaxKey.type", "member" : "kantan.mongodb.io.MaxKeyCodec.decode", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonMaxKey.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/MaxKeyCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.Md5Codec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/Md5Codec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonMd5]", "member" : "kantan.mongodb.io.Md5Codec.getEncoderClass", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#getEncoderClass():Class[kantan.mongodb.BsonMd5]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonMd5, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.Md5Codec.encode", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonMd5,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonMd5", "member" : "kantan.mongodb.io.Md5Codec.decode", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonMd5", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/Md5Codec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/Md5Codec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.MinKeyCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/MinKeyCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonMinKey.type]", "member" : "kantan.mongodb.io.MinKeyCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonMinKey.type]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonMinKey.type, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.MinKeyCodec.encode", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonMinKey.type,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonMinKey.type", "member" : "kantan.mongodb.io.MinKeyCodec.decode", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonMinKey.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/MinKeyCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.NullCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/NullCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonNull.type]", "member" : "kantan.mongodb.io.NullCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/NullCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonNull.type]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonNull.type, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.NullCodec.encode", "link" : "kantan\/mongodb\/io\/NullCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonNull.type,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonNull.type", "member" : "kantan.mongodb.io.NullCodec.decode", "link" : "kantan\/mongodb\/io\/NullCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonNull.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/NullCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/NullCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/NullCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/NullCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/NullCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/NullCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/NullCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/NullCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/NullCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/NullCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/NullCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/NullCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/NullCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/NullCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/NullCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/NullCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/NullCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/NullCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/NullCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.ObjectIdCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/ObjectIdCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonObjectId]", "member" : "kantan.mongodb.io.ObjectIdCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonObjectId]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonObjectId, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.ObjectIdCodec.encode", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonObjectId,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonObjectId", "member" : "kantan.mongodb.io.ObjectIdCodec.decode", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonObjectId", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/ObjectIdCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.RawBinaryCodec", "members_trait" : [{"label" : "encode", "tail" : "(writer: BsonWriter, value: T, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.RawBinaryCodec.encode", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#encode(writer:org.bson.BsonWriter,value:T,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, decoderContext: DecoderContext): T", "member" : "kantan.mongodb.io.RawBinaryCodec.decode", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#decode(reader:org.bson.BsonReader,decoderContext:org.bson.codecs.DecoderContext):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "subtype", "tail" : "(): BsonBinarySubType", "member" : "kantan.mongodb.io.RawBinaryCodec.subtype", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#subtype:org.bson.BsonBinarySubType", "kind" : "abstract def"}, {"label" : "unwrap", "tail" : "(t: T): Array[Byte]", "member" : "kantan.mongodb.io.RawBinaryCodec.unwrap", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#unwrap(t:T):Array[Byte]", "kind" : "abstract def"}, {"label" : "wrap", "tail" : "(data: IndexedSeq[Byte]): T", "member" : "kantan.mongodb.io.RawBinaryCodec.wrap", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#wrap(data:IndexedSeq[Byte]):T", "kind" : "abstract def"}, {"label" : "getEncoderClass", "tail" : "(): Class[T]", "member" : "org.bson.codecs.Encoder.getEncoderClass", "link" : "kantan\/mongodb\/io\/RawBinaryCodec.html#getEncoderClass():Class[T]", "kind" : "abstract def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/io\/RawBinaryCodec.html", "kind" : "trait"}, {"name" : "kantan.mongodb.io.RegularExpressionCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonRegularExpression]", "member" : "kantan.mongodb.io.RegularExpressionCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonRegularExpression]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonRegularExpression, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.RegularExpressionCodec.encode", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonRegularExpression,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonRegularExpression", "member" : "kantan.mongodb.io.RegularExpressionCodec.decode", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonRegularExpression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/RegularExpressionCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.StringCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/StringCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonString]", "member" : "kantan.mongodb.io.StringCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/StringCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonString]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonString, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.StringCodec.encode", "link" : "kantan\/mongodb\/io\/StringCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonString,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonString", "member" : "kantan.mongodb.io.StringCodec.decode", "link" : "kantan\/mongodb\/io\/StringCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonString", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/StringCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/StringCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/StringCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/StringCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/StringCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/StringCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/StringCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/StringCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/StringCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/StringCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/StringCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/StringCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/StringCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/StringCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/StringCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/StringCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/StringCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/StringCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/StringCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.SymbolCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/SymbolCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonSymbol]", "member" : "kantan.mongodb.io.SymbolCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonSymbol]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonSymbol, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.SymbolCodec.encode", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonSymbol,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonSymbol", "member" : "kantan.mongodb.io.SymbolCodec.decode", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonSymbol", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/SymbolCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.TimestampCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/TimestampCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonTimestamp]", "member" : "kantan.mongodb.io.TimestampCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonTimestamp]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonTimestamp, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.TimestampCodec.encode", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonTimestamp,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonTimestamp", "member" : "kantan.mongodb.io.TimestampCodec.decode", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonTimestamp", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/TimestampCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.UndefinedCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/UndefinedCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonUndefined.type]", "member" : "kantan.mongodb.io.UndefinedCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonUndefined.type]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonUndefined.type, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.UndefinedCodec.encode", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonUndefined.type,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonUndefined.type", "member" : "kantan.mongodb.io.UndefinedCodec.decode", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonUndefined.type", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/UndefinedCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.UserDefinedBinaryCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonUserDefinedBinary]", "member" : "kantan.mongodb.io.UserDefinedBinaryCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonUserDefinedBinary]", "kind" : "def"}, {"label" : "unwrap", "tail" : "(t: BsonUserDefinedBinary): Array[Byte]", "member" : "kantan.mongodb.io.UserDefinedBinaryCodec.unwrap", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#unwrap(t:kantan.mongodb.BsonUserDefinedBinary):Array[Byte]", "kind" : "def"}, {"label" : "wrap", "tail" : "(data: IndexedSeq[Byte]): BsonUserDefinedBinary", "member" : "kantan.mongodb.io.UserDefinedBinaryCodec.wrap", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#wrap(data:IndexedSeq[Byte]):kantan.mongodb.BsonUserDefinedBinary", "kind" : "def"}, {"label" : "subtype", "tail" : ": BsonBinarySubType", "member" : "kantan.mongodb.io.UserDefinedBinaryCodec.subtype", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#subtype:org.bson.BsonBinarySubType", "kind" : "val"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonUserDefinedBinary, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.RawBinaryCodec.encode", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#encode(writer:org.bson.BsonWriter,value:T,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, decoderContext: DecoderContext): BsonUserDefinedBinary", "member" : "kantan.mongodb.io.RawBinaryCodec.decode", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#decode(reader:org.bson.BsonReader,decoderContext:org.bson.codecs.DecoderContext):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/UserDefinedBinaryCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.UuidCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/io\/UuidCodec$.html", "members_object" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonUuid]", "member" : "kantan.mongodb.io.UuidCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#getEncoderClass():Class[kantan.mongodb.BsonUuid]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonUuid, e: EncoderContext): Unit", "member" : "kantan.mongodb.io.UuidCodec.encode", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonUuid,e:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, d: DecoderContext): BsonUuid", "member" : "kantan.mongodb.io.UuidCodec.decode", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#decode(reader:org.bson.BsonReader,d:org.bson.codecs.DecoderContext):kantan.mongodb.BsonUuid", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/UuidCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/UuidCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.io.UuidHelper", "shortDescription" : "", "members_class" : [{"member" : "kantan.mongodb.io.UuidHelper#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/UuidHelper.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/UuidHelper.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/UuidHelper.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/UuidHelper.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/UuidHelper.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/UuidHelper.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/UuidHelper.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UuidHelper.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UuidHelper.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/UuidHelper.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/UuidHelper.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/UuidHelper.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/UuidHelper.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/UuidHelper.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/UuidHelper.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/UuidHelper.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/UuidHelper.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/UuidHelper.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/UuidHelper.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/io\/UuidHelper.html", "kind" : "class"}, {"name" : "kantan.mongodb.io.ValueCodec", "shortDescription" : "", "members_class" : [{"label" : "getEncoderClass", "tail" : "(): Class[BsonValue]", "member" : "kantan.mongodb.io.ValueCodec.getEncoderClass", "link" : "kantan\/mongodb\/io\/ValueCodec.html#getEncoderClass():Class[kantan.mongodb.BsonValue]", "kind" : "def"}, {"label" : "encode", "tail" : "(writer: BsonWriter, value: BsonValue, context: EncoderContext): Unit", "member" : "kantan.mongodb.io.ValueCodec.encode", "link" : "kantan\/mongodb\/io\/ValueCodec.html#encode(writer:org.bson.BsonWriter,value:kantan.mongodb.BsonValue,context:org.bson.codecs.EncoderContext):Unit", "kind" : "def"}, {"label" : "decode", "tail" : "(reader: BsonReader, context: DecoderContext): BsonValue", "member" : "kantan.mongodb.io.ValueCodec.decode", "link" : "kantan\/mongodb\/io\/ValueCodec.html#decode(reader:org.bson.BsonReader,context:org.bson.codecs.DecoderContext):kantan.mongodb.BsonValue", "kind" : "def"}, {"member" : "kantan.mongodb.io.ValueCodec#<init>", "error" : "unsupported entity"}, {"label" : "registry", "tail" : ": CodecRegistry", "member" : "kantan.mongodb.io.ValueCodec.registry", "link" : "kantan\/mongodb\/io\/ValueCodec.html#registry:org.bson.codecs.configuration.CodecRegistry", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/io\/ValueCodec.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/io\/ValueCodec.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/io\/ValueCodec.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/io\/ValueCodec.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/io\/ValueCodec.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/io\/ValueCodec.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/io\/ValueCodec.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ValueCodec.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ValueCodec.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/io\/ValueCodec.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/io\/ValueCodec.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/io\/ValueCodec.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/io\/ValueCodec.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/io\/ValueCodec.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/io\/ValueCodec.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/io\/ValueCodec.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/io\/ValueCodec.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/io\/ValueCodec.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/io\/ValueCodec.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/io\/ValueCodec.html", "kind" : "class"}], "kantan.mongodb" : [{"name" : "kantan.mongodb.AggregateQuery", "shortDescription" : "", "object" : "kantan\/mongodb\/AggregateQuery$.html", "members_class" : [{"label" : "onIterator", "tail" : "(f: (ResourceIterator[A]) ⇒ ResourceIterator[B]): AggregateQuery[B]", "member" : "kantan.mongodb.AggregateQuery.onIterator", "link" : "kantan\/mongodb\/AggregateQuery.html#onIterator[B](f:kantan.codecs.resource.ResourceIterator[A]=>kantan.codecs.resource.ResourceIterator[B]):kantan.mongodb.AggregateQuery[B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): ResourceIterator[A]", "member" : "kantan.mongodb.AggregateQuery.iterator", "link" : "kantan\/mongodb\/AggregateQuery.html#iterator:kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): AggregateQuery[A]", "member" : "kantan.mongodb.AggregateQuery.maxTime", "link" : "kantan\/mongodb\/AggregateQuery.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.AggregateQuery[A]", "kind" : "def"}, {"label" : "useCursor", "tail" : "(b: Boolean): AggregateQuery[A]", "member" : "kantan.mongodb.AggregateQuery.useCursor", "link" : "kantan\/mongodb\/AggregateQuery.html#useCursor(b:Boolean):kantan.mongodb.AggregateQuery[A]", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): AggregateQuery[A]", "member" : "kantan.mongodb.AggregateQuery.collation", "link" : "kantan\/mongodb\/AggregateQuery.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.AggregateQuery[A]", "kind" : "def"}, {"label" : "batchSize", "tail" : "(i: Int): AggregateQuery[A]", "member" : "kantan.mongodb.AggregateQuery.batchSize", "link" : "kantan\/mongodb\/AggregateQuery.html#batchSize(i:Int):kantan.mongodb.AggregateQuery[A]", "kind" : "def"}, {"label" : "allowDiskUse", "tail" : "(b: Boolean): AggregateQuery[A]", "member" : "kantan.mongodb.AggregateQuery.allowDiskUse", "link" : "kantan\/mongodb\/AggregateQuery.html#allowDiskUse(b:Boolean):kantan.mongodb.AggregateQuery[A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(conf: Config): AggregateQuery[A]", "member" : "kantan.mongodb.AggregateQuery.withConfig", "link" : "kantan\/mongodb\/AggregateQuery.html#withConfig(conf:kantan.mongodb.AggregateQuery.Config):kantan.mongodb.AggregateQuery[A]", "kind" : "def"}, {"label" : "Repr", "tail" : "", "member" : "kantan.mongodb.AggregateQuery.Repr", "link" : "kantan\/mongodb\/AggregateQuery.html#Repr[X]=kantan.mongodb.AggregateQuery[X]", "kind" : "type"}, {"label" : "config", "tail" : ": Config", "member" : "kantan.mongodb.AggregateQuery.config", "link" : "kantan\/mongodb\/AggregateQuery.html#config:kantan.mongodb.AggregateQuery.Config", "kind" : "val"}, {"label" : "reduceRight", "tail" : "(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceRight", "link" : "kantan\/mongodb\/AggregateQuery.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldRight", "link" : "kantan\/mongodb\/AggregateQuery.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceLeft", "link" : "kantan\/mongodb\/AggregateQuery.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(b: B)(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldLeft", "link" : "kantan\/mongodb\/AggregateQuery.html#foldLeft[B](b:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.nonEmpty", "link" : "kantan\/mongodb\/AggregateQuery.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.isEmpty", "link" : "kantan\/mongodb\/AggregateQuery.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) ⇒ Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterable.find", "link" : "kantan\/mongodb\/AggregateQuery.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.exists", "link" : "kantan\/mongodb\/AggregateQuery.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.forall", "link" : "kantan\/mongodb\/AggregateQuery.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U): Unit", "member" : "kantan.codecs.resource.ResourceIterable.foreach", "link" : "kantan\/mongodb\/AggregateQuery.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.withFilter", "link" : "kantan\/mongodb\/AggregateQuery.html#withFilter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.filter", "link" : "kantan\/mongodb\/AggregateQuery.html#filter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.takeWhile", "link" : "kantan\/mongodb\/AggregateQuery.html#takeWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.take", "link" : "kantan\/mongodb\/AggregateQuery.html#take(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.dropWhile", "link" : "kantan\/mongodb\/AggregateQuery.html#dropWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.drop", "link" : "kantan\/mongodb\/AggregateQuery.html#drop(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.collect", "link" : "kantan\/mongodb\/AggregateQuery.html#collect[B](f:PartialFunction[A,B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Repr[B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.flatMap", "link" : "kantan\/mongodb\/AggregateQuery.html#flatMap[B](f:A=>ResourceIterable.this.Repr[B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.map", "link" : "kantan\/mongodb\/AggregateQuery.html#map[B](f:A=>B):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/AggregateQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/AggregateQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/AggregateQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/AggregateQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/AggregateQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/AggregateQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/AggregateQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/AggregateQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/AggregateQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/AggregateQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/AggregateQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/AggregateQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/AggregateQuery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/AggregateQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/AggregateQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/AggregateQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/AggregateQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/AggregateQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/AggregateQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Config", "tail" : "", "member" : "kantan.mongodb.AggregateQuery.Config", "link" : "kantan\/mongodb\/AggregateQuery$.html#Config", "kind" : "object"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.AggregateQuery.Config", "link" : "kantan\/mongodb\/AggregateQuery$.html#ConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/AggregateQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/AggregateQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/AggregateQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/AggregateQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/AggregateQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/AggregateQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/AggregateQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/AggregateQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/AggregateQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/AggregateQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/AggregateQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/AggregateQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/AggregateQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/AggregateQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/AggregateQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/AggregateQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/AggregateQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/AggregateQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/AggregateQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/AggregateQuery.html", "kind" : "class"}, {"name" : "kantan.mongodb.BsonArray", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonArray#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Seq[BsonValue]", "member" : "kantan.mongodb.BsonArray.value", "link" : "kantan\/mongodb\/BsonArray.html#value:Seq[kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonArray.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonArray.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonArray.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonArray.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonArray.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonArray.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonArray.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonArray.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonArray.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonArray.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonArray.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonArray.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonArray.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonArray.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonArray.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonArray.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonArray.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonBinary", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonBinary#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": IndexedSeq[Byte]", "member" : "kantan.mongodb.BsonBinary.value", "link" : "kantan\/mongodb\/BsonBinary.html#value:IndexedSeq[Byte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonBinary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonBinary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonBinary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonBinary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonBinary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonBinary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonBinary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonBinary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonBinary.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonBinary.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonBinary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonBinary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonBinary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonBinary.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonBinaryData", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonBinaryData$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/BsonBinaryData.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/BsonBinaryData.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonBinaryData.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonBinaryData.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonBinaryData.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonBinaryData.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonBinaryData.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonBinaryData.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonBinaryData.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinaryData.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinaryData.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinaryData.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonBinaryData.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonBinaryData.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonBinaryData.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonBinaryData.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonBinaryData.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonBinaryData.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonBinaryData.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonBinaryData.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonBinaryData.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/BsonBinaryData.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/BsonBinaryData.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/BsonBinaryData.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "fromLegacy", "tail" : "(b: org.bson.BsonBinary): BsonBinaryData", "member" : "kantan.mongodb.BsonBinaryData.fromLegacy", "link" : "kantan\/mongodb\/BsonBinaryData$.html#fromLegacy(b:org.bson.BsonBinary):kantan.mongodb.BsonBinaryData", "kind" : "def"}, {"label" : "isBinary", "tail" : "(subtype: Byte): Boolean", "member" : "kantan.mongodb.BsonBinaryData.isBinary", "link" : "kantan\/mongodb\/BsonBinaryData$.html#isBinary(subtype:Byte):Boolean", "kind" : "def"}, {"label" : "isUuid", "tail" : "(subtype: Byte): Boolean", "member" : "kantan.mongodb.BsonBinaryData.isUuid", "link" : "kantan\/mongodb\/BsonBinaryData$.html#isUuid(subtype:Byte):Boolean", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonBinaryData$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonBinaryData$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonBinaryData$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonBinaryData$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonBinaryData$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonBinaryData$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonBinaryData$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinaryData$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinaryData$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBinaryData$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonBinaryData$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonBinaryData$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonBinaryData$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonBinaryData$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonBinaryData$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonBinaryData$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonBinaryData$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonBinaryData$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonBinaryData$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/BsonBinaryData.html", "kind" : "class"}, {"name" : "kantan.mongodb.BsonBoolean", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonBoolean#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Boolean", "member" : "kantan.mongodb.BsonBoolean.value", "link" : "kantan\/mongodb\/BsonBoolean.html#value:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonBoolean.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonBoolean.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonBoolean.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonBoolean.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonBoolean.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonBoolean.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonBoolean.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBoolean.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBoolean.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonBoolean.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonBoolean.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonBoolean.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonBoolean.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonBoolean.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonBoolean.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonBoolean.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonBoolean.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonDateTime", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonDateTime#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Long", "member" : "kantan.mongodb.BsonDateTime.value", "link" : "kantan\/mongodb\/BsonDateTime.html#value:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDateTime.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDateTime.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDateTime.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDateTime.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDateTime.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDateTime.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDateTime.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDateTime.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDateTime.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDateTime.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDateTime.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDateTime.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDateTime.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDateTime.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDateTime.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDateTime.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonDateTime.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonDbPointer", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonDbPointer$.html", "members_object" : [{"label" : "toLegacy", "tail" : "(p: BsonDbPointer): org.bson.BsonDbPointer", "member" : "kantan.mongodb.BsonDbPointer.toLegacy", "link" : "kantan\/mongodb\/BsonDbPointer$.html#toLegacy(p:kantan.mongodb.BsonDbPointer):org.bson.BsonDbPointer", "kind" : "def"}, {"label" : "fromLegacy", "tail" : "(p: org.bson.BsonDbPointer): BsonDbPointer", "member" : "kantan.mongodb.BsonDbPointer.fromLegacy", "link" : "kantan\/mongodb\/BsonDbPointer$.html#fromLegacy(p:org.bson.BsonDbPointer):kantan.mongodb.BsonDbPointer", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDbPointer$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDbPointer$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDbPointer$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDbPointer$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDbPointer$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDbPointer$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDbPointer$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDbPointer$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDbPointer$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDbPointer$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDbPointer$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDbPointer$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDbPointer$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDbPointer$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDbPointer$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDbPointer$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDbPointer$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDbPointer$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDbPointer$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.mongodb.BsonDbPointer#<init>", "error" : "unsupported entity"}, {"label" : "id", "tail" : ": ObjectId", "member" : "kantan.mongodb.BsonDbPointer.id", "link" : "kantan\/mongodb\/BsonDbPointer.html#id:org.bson.types.ObjectId", "kind" : "val"}, {"label" : "namespace", "tail" : ": String", "member" : "kantan.mongodb.BsonDbPointer.namespace", "link" : "kantan\/mongodb\/BsonDbPointer.html#namespace:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDbPointer.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDbPointer.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDbPointer.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDbPointer.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDbPointer.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDbPointer.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDbPointer.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDbPointer.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDbPointer.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDbPointer.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDbPointer.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDbPointer.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDbPointer.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDbPointer.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDbPointer.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDbPointer.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonDbPointer.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonDecimal128", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonDecimal128#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Decimal128", "member" : "kantan.mongodb.BsonDecimal128.value", "link" : "kantan\/mongodb\/BsonDecimal128.html#value:org.bson.types.Decimal128", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDecimal128.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDecimal128.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDecimal128.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDecimal128.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDecimal128.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDecimal128.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDecimal128.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDecimal128.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDecimal128.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDecimal128.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDecimal128.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDecimal128.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDecimal128.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDecimal128.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDecimal128.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDecimal128.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonDecimal128.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonDocument", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonDocument$.html", "members_object" : [{"label" : "fromLegacy", "tail" : "(d: org.bson.BsonDocument): BsonDocument", "member" : "kantan.mongodb.BsonDocument.fromLegacy", "link" : "kantan\/mongodb\/BsonDocument$.html#fromLegacy(d:org.bson.BsonDocument):kantan.mongodb.BsonDocument", "kind" : "def"}, {"label" : "empty", "tail" : ": BsonDocument", "member" : "kantan.mongodb.BsonDocument.empty", "link" : "kantan\/mongodb\/BsonDocument$.html#empty:kantan.mongodb.BsonDocument", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocument$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocument$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocument$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocument$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocument$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocument$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocument$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocument$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocument$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocument$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocument$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocument$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDocument$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocument$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDocument$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDocument$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocument$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocument$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocument$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "toBsonDocument", "tail" : "(documentClass: Class[A], codecRegistry: CodecRegistry): RawBsonDocument", "member" : "kantan.mongodb.BsonDocument.toBsonDocument", "link" : "kantan\/mongodb\/BsonDocument.html#toBsonDocument[A](documentClass:Class[A],codecRegistry:org.bson.codecs.configuration.CodecRegistry):org.bson.RawBsonDocument", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.mongodb.BsonDocument.toString", "link" : "kantan\/mongodb\/BsonDocument.html#toString():String", "kind" : "def"}, {"member" : "kantan.mongodb.BsonDocument#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Map[String, BsonValue]", "member" : "kantan.mongodb.BsonDocument.value", "link" : "kantan\/mongodb\/BsonDocument.html#value:Map[String,kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocument.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocument.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocument.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocument.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocument.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocument.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocument.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocument.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocument.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocument.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocument.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocument.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocument.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocument.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocument.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocument.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonDocument.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonDocumentCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonDocumentCodec$.html", "members_object" : [{"label" : "from", "tail" : "(d: Decoder[BsonDocument, D, Decode, codecs.type], e: Encoder[BsonDocument, D, codecs.type]): Codec[BsonDocument, D, Decode, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#from[D](d:kantan.codecs.Decoder[E,D,F,T],e:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (BsonDocument) ⇒ Result[Decode, D])(g: (D) ⇒ BsonDocument): Codec[BsonDocument, D, Decode, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#from[D](f:E=>kantan.codecs.Result[F,D])(g:D=>E):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21], arg42: BsonValueEncoder[A22], arg43: BsonValueDecoder[A22]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$969:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$970:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$971:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$972:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$973:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$974:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$975:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$976:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$977:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$978:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$979:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$980:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$981:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$982:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$983:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$984:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$985:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$986:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$987:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$988:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$989:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$990:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$991:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$992:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$993:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$994:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$995:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$996:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$997:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$998:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$999:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$1000:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$1001:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$1002:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$1003:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$1004:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$1005:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$1006:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$1007:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$1008:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$1009:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$1010:kantan.mongodb.BsonValueDecoder[A21],implicitevidence$1011:kantan.mongodb.BsonValueEncoder[A22],implicitevidence$1012:kantan.mongodb.BsonValueDecoder[A22]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$927:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$928:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$929:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$930:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$931:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$932:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$933:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$934:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$935:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$936:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$937:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$938:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$939:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$940:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$941:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$942:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$943:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$944:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$945:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$946:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$947:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$948:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$949:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$950:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$951:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$952:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$953:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$954:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$955:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$956:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$957:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$958:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$959:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$960:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$961:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$962:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$963:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$964:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$965:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$966:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$967:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$968:kantan.mongodb.BsonValueDecoder[A21]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$887:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$888:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$889:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$890:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$891:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$892:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$893:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$894:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$895:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$896:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$897:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$898:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$899:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$900:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$901:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$902:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$903:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$904:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$905:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$906:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$907:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$908:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$909:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$910:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$911:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$912:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$913:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$914:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$915:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$916:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$917:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$918:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$919:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$920:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$921:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$922:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$923:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$924:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$925:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$926:kantan.mongodb.BsonValueDecoder[A20]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$849:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$850:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$851:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$852:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$853:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$854:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$855:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$856:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$857:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$858:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$859:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$860:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$861:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$862:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$863:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$864:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$865:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$866:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$867:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$868:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$869:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$870:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$871:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$872:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$873:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$874:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$875:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$876:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$877:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$878:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$879:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$880:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$881:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$882:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$883:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$884:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$885:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$886:kantan.mongodb.BsonValueDecoder[A19]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$813:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$814:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$815:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$816:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$817:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$818:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$819:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$820:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$821:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$822:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$823:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$824:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$825:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$826:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$827:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$828:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$829:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$830:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$831:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$832:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$833:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$834:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$835:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$836:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$837:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$838:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$839:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$840:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$841:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$842:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$843:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$844:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$845:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$846:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$847:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$848:kantan.mongodb.BsonValueDecoder[A18]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$779:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$780:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$781:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$782:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$783:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$784:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$785:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$786:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$787:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$788:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$789:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$790:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$791:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$792:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$793:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$794:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$795:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$796:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$797:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$798:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$799:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$800:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$801:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$802:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$803:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$804:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$805:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$806:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$807:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$808:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$809:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$810:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$811:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$812:kantan.mongodb.BsonValueDecoder[A17]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$747:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$748:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$749:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$750:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$751:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$752:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$753:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$754:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$755:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$756:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$757:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$758:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$759:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$760:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$761:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$762:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$763:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$764:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$765:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$766:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$767:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$768:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$769:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$770:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$771:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$772:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$773:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$774:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$775:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$776:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$777:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$778:kantan.mongodb.BsonValueDecoder[A16]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$717:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$718:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$719:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$720:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$721:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$722:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$723:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$724:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$725:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$726:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$727:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$728:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$729:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$730:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$731:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$732:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$733:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$734:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$735:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$736:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$737:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$738:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$739:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$740:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$741:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$742:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$743:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$744:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$745:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$746:kantan.mongodb.BsonValueDecoder[A15]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$689:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$690:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$691:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$692:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$693:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$694:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$695:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$696:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$697:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$698:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$699:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$700:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$701:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$702:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$703:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$704:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$705:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$706:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$707:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$708:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$709:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$710:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$711:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$712:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$713:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$714:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$715:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$716:kantan.mongodb.BsonValueDecoder[A14]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$663:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$664:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$665:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$666:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$667:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$668:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$669:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$670:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$671:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$672:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$673:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$674:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$675:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$676:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$677:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$678:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$679:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$680:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$681:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$682:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$683:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$684:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$685:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$686:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$687:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$688:kantan.mongodb.BsonValueDecoder[A13]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$639:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$640:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$641:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$642:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$643:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$644:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$645:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$646:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$647:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$648:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$649:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$650:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$651:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$652:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$653:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$654:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$655:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$656:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$657:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$658:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$659:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$660:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$661:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$662:kantan.mongodb.BsonValueDecoder[A12]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$617:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$618:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$619:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$620:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$621:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$622:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$623:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$624:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$625:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$626:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$627:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$628:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$629:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$630:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$631:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$632:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$633:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$634:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$635:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$636:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$637:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$638:kantan.mongodb.BsonValueDecoder[A11]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$597:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$598:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$599:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$600:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$601:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$602:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$603:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$604:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$605:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$606:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$607:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$608:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$609:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$610:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$611:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$612:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$613:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$614:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$615:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$616:kantan.mongodb.BsonValueDecoder[A10]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$579:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$580:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$581:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$582:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$583:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$584:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$585:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$586:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$587:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$588:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$589:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$590:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$591:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$592:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$593:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$594:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$595:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$596:kantan.mongodb.BsonValueDecoder[A9]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$563:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$564:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$565:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$566:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$567:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$568:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$569:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$570:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$571:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$572:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$573:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$574:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$575:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$576:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$577:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$578:kantan.mongodb.BsonValueDecoder[A8]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (A1, A2, A3, A4, A5, A6, A7) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$549:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$550:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$551:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$552:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$553:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$554:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$555:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$556:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$557:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$558:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$559:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$560:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$561:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$562:kantan.mongodb.BsonValueDecoder[A7]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (A1, A2, A3, A4, A5, A6) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:(A1,A2,A3,A4,A5,A6)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$537:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$538:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$539:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$540:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$541:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$542:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$543:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$544:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$545:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$546:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$547:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$548:kantan.mongodb.BsonValueDecoder[A6]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (A1, A2, A3, A4, A5) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:(A1,A2,A3,A4,A5)=>B)(g:B=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$527:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$528:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$529:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$530:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$531:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$532:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$533:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$534:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$535:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$536:kantan.mongodb.BsonValueDecoder[A5]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (A1, A2, A3, A4) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:(A1,A2,A3,A4)=>B)(g:B=>Option[(A1,A2,A3,A4)])(implicitevidence$519:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$520:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$521:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$522:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$523:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$524:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$525:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$526:kantan.mongodb.BsonValueDecoder[A4]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String)(f: (A1, A2, A3) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:(A1,A2,A3)=>B)(g:B=>Option[(A1,A2,A3)])(implicitevidence$513:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$514:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$515:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$516:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$517:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$518:kantan.mongodb.BsonValueDecoder[A3]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String)(f: (A1, A2) ⇒ B)(g: (B) ⇒ Option[(A1, A2)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A1,A2,B](n1:String,n2:String)(f:(A1,A2)=>B)(g:B=>Option[(A1,A2)])(implicitevidence$509:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$510:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$511:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$512:kantan.mongodb.BsonValueDecoder[A2]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(name: String)(f: (A) ⇒ B)(g: (B) ⇒ Option[A])(arg0: BsonValueEncoder[A], arg1: BsonValueDecoder[A]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#caseCodec[A,B](name:String)(f:A=>B)(g:B=>Option[A])(implicitevidence$507:kantan.mongodb.BsonValueEncoder[A],implicitevidence$508:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21], arg42: BsonValueEncoder[A22], arg43: BsonValueDecoder[A22]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$463:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$464:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$465:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$466:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$467:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$468:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$469:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$470:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$471:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$472:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$473:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$474:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$475:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$476:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$477:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$478:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$479:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$480:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$481:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$482:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$483:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$484:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$485:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$486:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$487:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$488:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$489:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$490:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$491:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$492:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$493:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$494:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$495:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$496:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$497:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$498:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$499:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$500:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$501:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$502:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$503:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$504:kantan.mongodb.BsonValueDecoder[A21],implicitevidence$505:kantan.mongodb.BsonValueEncoder[A22],implicitevidence$506:kantan.mongodb.BsonValueDecoder[A22]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$421:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$422:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$423:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$424:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$425:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$426:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$427:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$428:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$429:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$430:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$431:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$432:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$433:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$434:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$435:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$436:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$437:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$438:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$439:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$440:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$441:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$442:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$443:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$444:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$445:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$446:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$447:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$448:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$449:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$450:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$451:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$452:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$453:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$454:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$455:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$456:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$457:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$458:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$459:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$460:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$461:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$462:kantan.mongodb.BsonValueDecoder[A21]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$381:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$382:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$383:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$384:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$385:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$386:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$387:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$388:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$389:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$390:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$391:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$392:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$393:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$394:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$395:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$396:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$397:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$398:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$399:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$400:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$401:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$402:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$403:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$404:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$405:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$406:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$407:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$408:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$409:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$410:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$411:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$412:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$413:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$414:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$415:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$416:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$417:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$418:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$419:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$420:kantan.mongodb.BsonValueDecoder[A20]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$343:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$344:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$345:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$346:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$347:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$348:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$349:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$350:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$351:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$352:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$353:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$354:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$355:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$356:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$357:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$358:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$359:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$360:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$361:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$362:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$363:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$364:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$365:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$366:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$367:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$368:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$369:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$370:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$371:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$372:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$373:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$374:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$375:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$376:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$377:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$378:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$379:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$380:kantan.mongodb.BsonValueDecoder[A19]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$307:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$308:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$309:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$310:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$311:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$312:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$313:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$314:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$315:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$316:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$317:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$318:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$319:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$320:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$321:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$322:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$323:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$324:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$325:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$326:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$327:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$328:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$329:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$330:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$331:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$332:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$333:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$334:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$335:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$336:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$337:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$338:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$339:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$340:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$341:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$342:kantan.mongodb.BsonValueDecoder[A18]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$273:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$274:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$275:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$276:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$277:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$278:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$279:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$280:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$281:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$282:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$283:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$284:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$285:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$286:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$287:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$288:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$289:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$290:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$291:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$292:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$293:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$294:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$295:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$296:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$297:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$298:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$299:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$300:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$301:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$302:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$303:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$304:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$305:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$306:kantan.mongodb.BsonValueDecoder[A17]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$241:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$242:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$243:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$244:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$245:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$246:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$247:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$248:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$249:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$250:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$251:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$252:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$253:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$254:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$255:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$256:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$257:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$258:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$259:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$260:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$261:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$262:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$263:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$264:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$265:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$266:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$267:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$268:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$269:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$270:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$271:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$272:kantan.mongodb.BsonValueDecoder[A16]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$211:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$212:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$213:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$214:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$215:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$216:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$217:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$218:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$219:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$220:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$221:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$222:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$223:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$224:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$225:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$226:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$227:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$228:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$229:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$230:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$231:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$232:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$233:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$234:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$235:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$236:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$237:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$238:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$239:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$240:kantan.mongodb.BsonValueDecoder[A15]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$183:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$184:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$185:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$186:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$187:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$188:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$189:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$190:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$191:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$192:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$193:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$194:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$195:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$196:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$197:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$198:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$199:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$200:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$201:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$202:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$203:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$204:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$205:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$206:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$207:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$208:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$209:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$210:kantan.mongodb.BsonValueDecoder[A14]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$157:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$158:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$159:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$160:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$161:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$162:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$163:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$164:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$165:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$166:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$167:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$168:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$169:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$170:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$171:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$172:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$173:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$174:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$175:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$176:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$177:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$178:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$179:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$180:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$181:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$182:kantan.mongodb.BsonValueDecoder[A13]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$133:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$134:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$135:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$136:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$137:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$138:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$139:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$140:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$141:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$142:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$143:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$144:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$145:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$146:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$147:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$148:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$149:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$150:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$151:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$152:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$153:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$154:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$155:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$156:kantan.mongodb.BsonValueDecoder[A12]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$111:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$112:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$113:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$114:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$115:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$116:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$117:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$118:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$119:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$120:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$121:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$122:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$123:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$124:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$125:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$126:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$127:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$128:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$129:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$130:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$131:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$132:kantan.mongodb.BsonValueDecoder[A11]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$91:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$92:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$93:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$94:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$95:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$96:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$97:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$98:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$99:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$100:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$101:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$102:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$103:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$104:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$105:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$106:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$107:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$108:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$109:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$110:kantan.mongodb.BsonValueDecoder[A10]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$73:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$74:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$75:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$76:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$77:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$78:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$79:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$80:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$81:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$82:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$83:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$84:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$85:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$86:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$87:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$88:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$89:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$90:kantan.mongodb.BsonValueDecoder[A9]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$57:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$58:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$59:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$60:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$61:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$62:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$63:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$64:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$65:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$66:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$67:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$68:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$69:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$70:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$71:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$72:kantan.mongodb.BsonValueDecoder[A8]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (A1, A2, A3, A4, A5, A6, A7) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$43:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$44:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$45:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$46:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$47:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$48:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$49:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$50:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$51:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$52:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$53:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$54:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$55:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$56:kantan.mongodb.BsonValueDecoder[A7]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (A1, A2, A3, A4, A5, A6) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:(A1,A2,A3,A4,A5,A6)=>B)(g:B=>(A1,A2,A3,A4,A5,A6))(implicitevidence$31:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$32:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$33:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$34:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$35:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$36:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$37:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$38:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$39:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$40:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$41:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$42:kantan.mongodb.BsonValueDecoder[A6]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (A1, A2, A3, A4, A5) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:(A1,A2,A3,A4,A5)=>B)(g:B=>(A1,A2,A3,A4,A5))(implicitevidence$21:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$22:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$23:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$24:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$25:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$26:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$27:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$28:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$29:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$30:kantan.mongodb.BsonValueDecoder[A5]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (A1, A2, A3, A4) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:(A1,A2,A3,A4)=>B)(g:B=>(A1,A2,A3,A4))(implicitevidence$13:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$14:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$15:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$16:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$17:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$18:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$19:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$20:kantan.mongodb.BsonValueDecoder[A4]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String)(f: (A1, A2, A3) ⇒ B)(g: (B) ⇒ (A1, A2, A3))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:(A1,A2,A3)=>B)(g:B=>(A1,A2,A3))(implicitevidence$7:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$8:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$9:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$10:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$11:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$12:kantan.mongodb.BsonValueDecoder[A3]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String)(f: (A1, A2) ⇒ B)(g: (B) ⇒ (A1, A2))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A1,A2,B](n1:String,n2:String)(f:(A1,A2)=>B)(g:B=>(A1,A2))(implicitevidence$3:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$4:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$5:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$6:kantan.mongodb.BsonValueDecoder[A2]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(name: String)(f: (A) ⇒ B)(g: (B) ⇒ A)(arg0: BsonValueEncoder[A], arg1: BsonValueDecoder[A]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#codec[A,B](name:String)(f:A=>B)(g:B=>A)(implicitevidence$1:kantan.mongodb.BsonValueEncoder[A],implicitevidence$2:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonDocumentCodecInstances", "members_trait" : [{"label" : "bsonDocumentDocumentEncoder", "tail" : ": BsonDocumentEncoder[BsonDocument]", "member" : "kantan.mongodb.BsonDocumentEncoderInstances.bsonDocumentDocumentEncoder", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#bsonDocumentDocumentEncoder:kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "bsonDocumentDocumentDecoder", "tail" : ": BsonDocumentDecoder[BsonDocument]", "member" : "kantan.mongodb.BsonDocumentDecoderInstances.bsonDocumentDocumentDecoder", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#bsonDocumentDocumentDecoder:kantan.mongodb.BsonDocumentDecoder[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentCodecInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/BsonDocumentCodecInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.BsonDocumentDecoder", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonDocumentDecoder$.html", "members_object" : [{"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19], arg19: BsonValueDecoder[A20], arg20: BsonValueDecoder[A21], arg21: BsonValueDecoder[A22]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>B)(implicitevidence$232:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$233:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$234:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$235:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$236:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$237:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$238:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$239:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$240:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$241:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$242:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$243:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$244:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$245:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$246:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$247:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$248:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$249:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$250:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$251:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$252:kantan.mongodb.BsonValueDecoder[A21],implicitevidence$253:kantan.mongodb.BsonValueDecoder[A22]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19], arg19: BsonValueDecoder[A20], arg20: BsonValueDecoder[A21]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(implicitevidence$211:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$212:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$213:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$214:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$215:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$216:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$217:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$218:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$219:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$220:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$221:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$222:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$223:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$224:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$225:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$226:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$227:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$228:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$229:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$230:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$231:kantan.mongodb.BsonValueDecoder[A21]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19], arg19: BsonValueDecoder[A20]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(implicitevidence$191:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$192:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$193:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$194:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$195:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$196:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$197:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$198:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$199:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$200:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$201:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$202:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$203:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$204:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$205:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$206:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$207:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$208:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$209:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$210:kantan.mongodb.BsonValueDecoder[A20]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(implicitevidence$172:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$173:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$174:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$175:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$176:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$177:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$178:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$179:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$180:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$181:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$182:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$183:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$184:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$185:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$186:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$187:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$188:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$189:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$190:kantan.mongodb.BsonValueDecoder[A19]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(implicitevidence$154:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$155:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$156:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$157:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$158:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$159:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$160:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$161:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$162:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$163:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$164:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$165:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$166:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$167:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$168:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$169:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$170:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$171:kantan.mongodb.BsonValueDecoder[A18]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(implicitevidence$137:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$138:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$139:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$140:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$141:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$142:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$143:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$144:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$145:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$146:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$147:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$148:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$149:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$150:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$151:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$152:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$153:kantan.mongodb.BsonValueDecoder[A17]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(implicitevidence$121:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$122:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$123:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$124:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$125:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$126:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$127:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$128:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$129:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$130:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$131:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$132:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$133:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$134:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$135:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$136:kantan.mongodb.BsonValueDecoder[A16]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(implicitevidence$106:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$107:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$108:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$109:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$110:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$111:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$112:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$113:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$114:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$115:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$116:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$117:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$118:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$119:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$120:kantan.mongodb.BsonValueDecoder[A15]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(implicitevidence$92:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$93:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$94:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$95:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$96:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$97:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$98:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$99:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$100:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$101:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$102:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$103:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$104:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$105:kantan.mongodb.BsonValueDecoder[A14]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(implicitevidence$79:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$80:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$81:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$82:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$83:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$84:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$85:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$86:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$87:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$88:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$89:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$90:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$91:kantan.mongodb.BsonValueDecoder[A13]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(implicitevidence$67:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$68:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$69:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$70:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$71:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$72:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$73:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$74:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$75:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$76:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$77:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$78:kantan.mongodb.BsonValueDecoder[A12]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$56:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$57:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$58:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$59:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$60:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$61:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$62:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$63:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$64:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$65:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$66:kantan.mongodb.BsonValueDecoder[A11]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$46:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$47:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$48:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$49:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$50:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$51:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$52:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$53:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$54:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$55:kantan.mongodb.BsonValueDecoder[A10]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$37:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$38:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$39:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$40:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$41:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$42:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$43:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$44:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$45:kantan.mongodb.BsonValueDecoder[A9]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$29:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$30:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$31:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$32:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$33:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$34:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$35:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$36:kantan.mongodb.BsonValueDecoder[A8]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$22:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$23:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$24:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$25:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$26:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$27:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$28:kantan.mongodb.BsonValueDecoder[A7]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:(A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$16:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$17:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$18:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$19:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$20:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$21:kantan.mongodb.BsonValueDecoder[A6]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (A1, A2, A3, A4, A5) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:(A1,A2,A3,A4,A5)=>B)(implicitevidence$11:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$12:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$13:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$14:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$15:kantan.mongodb.BsonValueDecoder[A5]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (A1, A2, A3, A4) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:(A1,A2,A3,A4)=>B)(implicitevidence$7:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$8:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$9:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$10:kantan.mongodb.BsonValueDecoder[A4]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String)(f: (A1, A2, A3) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:(A1,A2,A3)=>B)(implicitevidence$4:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$5:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$6:kantan.mongodb.BsonValueDecoder[A3]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String)(f: (A1, A2) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,A2,B](n1:String,n2:String)(f:(A1,A2)=>B)(implicitevidence$2:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$3:kantan.mongodb.BsonValueDecoder[A2]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String)(f: (A1) ⇒ B)(arg0: BsonValueDecoder[A1]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#decoder[A1,B](n1:String)(f:A1=>B)(implicitevidence$1:kantan.mongodb.BsonValueDecoder[A1]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "oneOf", "tail" : "(ds: Decoder[BsonDocument, D, Decode, codecs.type]*)(i: IsError[Decode]): Decoder[BsonDocument, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[BsonDocument, Result[Decode, D]])(t: IsError[Decode]): Decoder[BsonDocument, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#fromPartial[D](f:PartialFunction[E,kantan.codecs.Result[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (BsonDocument) ⇒ D)(t: IsError[Decode]): Decoder[BsonDocument, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (BsonDocument) ⇒ Result[Decode, D]): Decoder[BsonDocument, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#from[D](f:E=>kantan.codecs.Result[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[BsonDocument, D, Decode, codecs.type]): Decoder[BsonDocument, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonDocumentDecoderInstances", "members_trait" : [{"label" : "bsonDocumentDocumentDecoder", "tail" : ": BsonDocumentDecoder[BsonDocument]", "member" : "kantan.mongodb.BsonDocumentDecoderInstances.bsonDocumentDocumentDecoder", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#bsonDocumentDocumentDecoder:kantan.mongodb.BsonDocumentDecoder[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/BsonDocumentDecoderInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.BsonDocumentEncoder", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonDocumentEncoder$.html", "members_object" : [{"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21], arg21: BsonValueEncoder[A22]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$485:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$486:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$487:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$488:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$489:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$490:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$491:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$492:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$493:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$494:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$495:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$496:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$497:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$498:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$499:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$500:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$501:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$502:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$503:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$504:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$505:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$506:kantan.mongodb.BsonValueEncoder[A22]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$464:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$465:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$466:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$467:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$468:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$469:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$470:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$471:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$472:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$473:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$474:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$475:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$476:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$477:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$478:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$479:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$480:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$481:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$482:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$483:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$484:kantan.mongodb.BsonValueEncoder[A21]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$444:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$445:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$446:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$447:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$448:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$449:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$450:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$451:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$452:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$453:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$454:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$455:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$456:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$457:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$458:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$459:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$460:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$461:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$462:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$463:kantan.mongodb.BsonValueEncoder[A20]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$425:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$426:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$427:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$428:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$429:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$430:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$431:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$432:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$433:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$434:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$435:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$436:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$437:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$438:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$439:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$440:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$441:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$442:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$443:kantan.mongodb.BsonValueEncoder[A19]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$407:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$408:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$409:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$410:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$411:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$412:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$413:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$414:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$415:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$416:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$417:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$418:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$419:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$420:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$421:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$422:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$423:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$424:kantan.mongodb.BsonValueEncoder[A18]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$390:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$391:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$392:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$393:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$394:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$395:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$396:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$397:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$398:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$399:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$400:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$401:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$402:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$403:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$404:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$405:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$406:kantan.mongodb.BsonValueEncoder[A17]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$374:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$375:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$376:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$377:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$378:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$379:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$380:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$381:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$382:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$383:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$384:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$385:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$386:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$387:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$388:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$389:kantan.mongodb.BsonValueEncoder[A16]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$359:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$360:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$361:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$362:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$363:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$364:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$365:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$366:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$367:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$368:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$369:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$370:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$371:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$372:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$373:kantan.mongodb.BsonValueEncoder[A15]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$345:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$346:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$347:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$348:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$349:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$350:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$351:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$352:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$353:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$354:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$355:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$356:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$357:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$358:kantan.mongodb.BsonValueEncoder[A14]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$332:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$333:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$334:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$335:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$336:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$337:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$338:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$339:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$340:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$341:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$342:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$343:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$344:kantan.mongodb.BsonValueEncoder[A13]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$320:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$321:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$322:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$323:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$324:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$325:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$326:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$327:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$328:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$329:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$330:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$331:kantan.mongodb.BsonValueEncoder[A12]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$309:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$310:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$311:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$312:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$313:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$314:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$315:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$316:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$317:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$318:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$319:kantan.mongodb.BsonValueEncoder[A11]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$299:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$300:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$301:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$302:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$303:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$304:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$305:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$306:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$307:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$308:kantan.mongodb.BsonValueEncoder[A10]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$290:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$291:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$292:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$293:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$294:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$295:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$296:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$297:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$298:kantan.mongodb.BsonValueEncoder[A9]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$282:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$283:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$284:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$285:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$286:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$287:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$288:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$289:kantan.mongodb.BsonValueEncoder[A8]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$275:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$276:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$277:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$278:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$279:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$280:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$281:kantan.mongodb.BsonValueEncoder[A7]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$269:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$270:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$271:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$272:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$273:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$274:kantan.mongodb.BsonValueEncoder[A6]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:B=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$264:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$265:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$266:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$267:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$268:kantan.mongodb.BsonValueEncoder[A5]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (B) ⇒ Option[(A1, A2, A3, A4)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:B=>Option[(A1,A2,A3,A4)])(implicitevidence$260:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$261:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$262:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$263:kantan.mongodb.BsonValueEncoder[A4]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String)(f: (B) ⇒ Option[(A1, A2, A3)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:B=>Option[(A1,A2,A3)])(implicitevidence$257:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$258:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$259:kantan.mongodb.BsonValueEncoder[A3]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String)(f: (B) ⇒ Option[(A1, A2)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,A2,B](n1:String,n2:String)(f:B=>Option[(A1,A2)])(implicitevidence$255:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$256:kantan.mongodb.BsonValueEncoder[A2]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String)(f: (B) ⇒ Option[A1])(arg0: BsonValueEncoder[A1]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#caseEncoder[A1,B](n1:String)(f:B=>Option[A1])(implicitevidence$254:kantan.mongodb.BsonValueEncoder[A1]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21], arg21: BsonValueEncoder[A22]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$232:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$233:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$234:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$235:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$236:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$237:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$238:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$239:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$240:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$241:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$242:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$243:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$244:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$245:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$246:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$247:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$248:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$249:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$250:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$251:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$252:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$253:kantan.mongodb.BsonValueEncoder[A22]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$211:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$212:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$213:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$214:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$215:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$216:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$217:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$218:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$219:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$220:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$221:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$222:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$223:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$224:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$225:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$226:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$227:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$228:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$229:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$230:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$231:kantan.mongodb.BsonValueEncoder[A21]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$191:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$192:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$193:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$194:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$195:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$196:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$197:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$198:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$199:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$200:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$201:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$202:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$203:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$204:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$205:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$206:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$207:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$208:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$209:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$210:kantan.mongodb.BsonValueEncoder[A20]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$172:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$173:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$174:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$175:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$176:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$177:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$178:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$179:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$180:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$181:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$182:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$183:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$184:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$185:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$186:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$187:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$188:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$189:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$190:kantan.mongodb.BsonValueEncoder[A19]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$154:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$155:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$156:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$157:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$158:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$159:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$160:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$161:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$162:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$163:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$164:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$165:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$166:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$167:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$168:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$169:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$170:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$171:kantan.mongodb.BsonValueEncoder[A18]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$137:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$138:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$139:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$140:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$141:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$142:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$143:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$144:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$145:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$146:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$147:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$148:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$149:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$150:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$151:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$152:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$153:kantan.mongodb.BsonValueEncoder[A17]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$121:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$122:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$123:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$124:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$125:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$126:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$127:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$128:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$129:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$130:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$131:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$132:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$133:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$134:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$135:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$136:kantan.mongodb.BsonValueEncoder[A16]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$106:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$107:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$108:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$109:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$110:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$111:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$112:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$113:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$114:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$115:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$116:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$117:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$118:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$119:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$120:kantan.mongodb.BsonValueEncoder[A15]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$92:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$93:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$94:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$95:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$96:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$97:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$98:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$99:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$100:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$101:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$102:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$103:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$104:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$105:kantan.mongodb.BsonValueEncoder[A14]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$79:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$80:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$81:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$82:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$83:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$84:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$85:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$86:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$87:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$88:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$89:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$90:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$91:kantan.mongodb.BsonValueEncoder[A13]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$67:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$68:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$69:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$70:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$71:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$72:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$73:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$74:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$75:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$76:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$77:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$78:kantan.mongodb.BsonValueEncoder[A12]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$56:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$57:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$58:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$59:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$60:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$61:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$62:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$63:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$64:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$65:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$66:kantan.mongodb.BsonValueEncoder[A11]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$46:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$47:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$48:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$49:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$50:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$51:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$52:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$53:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$54:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$55:kantan.mongodb.BsonValueEncoder[A10]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$37:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$38:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$39:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$40:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$41:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$42:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$43:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$44:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$45:kantan.mongodb.BsonValueEncoder[A9]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$29:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$30:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$31:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$32:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$33:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$34:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$35:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$36:kantan.mongodb.BsonValueEncoder[A8]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$22:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$23:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$24:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$25:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$26:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$27:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$28:kantan.mongodb.BsonValueEncoder[A7]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:B=>(A1,A2,A3,A4,A5,A6))(implicitevidence$16:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$17:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$18:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$19:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$20:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$21:kantan.mongodb.BsonValueEncoder[A6]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (B) ⇒ (A1, A2, A3, A4, A5))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:B=>(A1,A2,A3,A4,A5))(implicitevidence$11:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$12:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$13:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$14:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$15:kantan.mongodb.BsonValueEncoder[A5]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (B) ⇒ (A1, A2, A3, A4))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:B=>(A1,A2,A3,A4))(implicitevidence$7:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$8:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$9:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$10:kantan.mongodb.BsonValueEncoder[A4]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String)(f: (B) ⇒ (A1, A2, A3))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:B=>(A1,A2,A3))(implicitevidence$4:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$5:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$6:kantan.mongodb.BsonValueEncoder[A3]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String)(f: (B) ⇒ (A1, A2))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A1,A2,B](n1:String,n2:String)(f:B=>(A1,A2))(implicitevidence$2:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$3:kantan.mongodb.BsonValueEncoder[A2]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(name: String)(f: (B) ⇒ A)(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#encoder[A,B](name:String)(f:B=>A)(implicitevidence$1:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (D) ⇒ BsonDocument): Encoder[BsonDocument, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.from", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#from[D](f:D=>E):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Encoder[BsonDocument, D, codecs.type]): Encoder[BsonDocument, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.apply", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#apply[D](implicitev:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonDocumentEncoderInstances", "members_trait" : [{"label" : "bsonDocumentDocumentEncoder", "tail" : ": BsonDocumentEncoder[BsonDocument]", "member" : "kantan.mongodb.BsonDocumentEncoderInstances.bsonDocumentDocumentEncoder", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#bsonDocumentDocumentEncoder:kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/BsonDocumentEncoderInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.BsonDouble", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonDouble#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Double", "member" : "kantan.mongodb.BsonDouble.value", "link" : "kantan\/mongodb\/BsonDouble.html#value:Double", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonDouble.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonDouble.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonDouble.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonDouble.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonDouble.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonDouble.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonDouble.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDouble.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDouble.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonDouble.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonDouble.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonDouble.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonDouble.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonDouble.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonDouble.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonDouble.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonDouble.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonFunction", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonFunction#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": IndexedSeq[Byte]", "member" : "kantan.mongodb.BsonFunction.value", "link" : "kantan\/mongodb\/BsonFunction.html#value:IndexedSeq[Byte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonFunction.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonFunction.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonFunction.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonFunction.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonFunction.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonFunction.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonFunction.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonFunction.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonFunction.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonFunction.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonFunction.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonFunction.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonFunction.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonFunction.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonFunction.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonFunction.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonFunction.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonInt", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonInt#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Int", "member" : "kantan.mongodb.BsonInt.value", "link" : "kantan\/mongodb\/BsonInt.html#value:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonInt.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonInt.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonInt.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonInt.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonInt.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonInt.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonInt.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonInt.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonInt.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonInt.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonInt.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonInt.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonInt.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonInt.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonInt.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonInt.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonInt.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonJavaScript", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonJavaScript#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": String", "member" : "kantan.mongodb.BsonJavaScript.value", "link" : "kantan\/mongodb\/BsonJavaScript.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonJavaScript.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonJavaScript.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonJavaScript.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonJavaScript.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonJavaScript.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonJavaScript.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonJavaScript.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScript.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScript.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScript.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonJavaScript.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonJavaScript.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonJavaScript.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonJavaScript.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonJavaScript.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonJavaScript.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonJavaScript.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonJavaScriptWithScope", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html", "members_object" : [{"label" : "fromLegacy", "tail" : "(j: org.bson.BsonJavaScriptWithScope): BsonJavaScriptWithScope", "member" : "kantan.mongodb.BsonJavaScriptWithScope.fromLegacy", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#fromLegacy(j:org.bson.BsonJavaScriptWithScope):kantan.mongodb.BsonJavaScriptWithScope", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.mongodb.BsonJavaScriptWithScope#<init>", "error" : "unsupported entity"}, {"label" : "scope", "tail" : ": Map[String, BsonValue]", "member" : "kantan.mongodb.BsonJavaScriptWithScope.scope", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#scope:Map[String,kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "value", "tail" : ": String", "member" : "kantan.mongodb.BsonJavaScriptWithScope.value", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonJavaScriptWithScope.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonJavaScriptWithScope.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonLong", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonLong#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Long", "member" : "kantan.mongodb.BsonLong.value", "link" : "kantan\/mongodb\/BsonLong.html#value:Long", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonLong.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonLong.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonLong.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonLong.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonLong.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonLong.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonLong.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonLong.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonLong.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonLong.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonLong.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonLong.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonLong.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonLong.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonLong.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonLong.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonLong.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonMaxKey", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonMaxKey$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonMaxKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonMaxKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonMaxKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonMaxKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonMaxKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonMaxKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonMaxKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMaxKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMaxKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMaxKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonMaxKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonMaxKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonMaxKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonMaxKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonMaxKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonMaxKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonMaxKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonMd5", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonMd5$.html", "members_object" : [{"label" : "hex", "tail" : "(data: Array[Byte]): BsonMd5", "member" : "kantan.mongodb.BsonMd5.hex", "link" : "kantan\/mongodb\/BsonMd5$.html#hex(data:Array[Byte]):kantan.mongodb.BsonMd5", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonMd5$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonMd5$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonMd5$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonMd5$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonMd5$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonMd5$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonMd5$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMd5$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMd5$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMd5$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonMd5$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonMd5$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonMd5$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonMd5$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonMd5$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonMd5$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonMd5$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonMd5$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonMd5$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.mongodb.BsonMd5#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": String", "member" : "kantan.mongodb.BsonMd5.value", "link" : "kantan\/mongodb\/BsonMd5.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonMd5.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonMd5.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonMd5.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonMd5.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonMd5.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonMd5.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonMd5.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMd5.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMd5.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMd5.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonMd5.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonMd5.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonMd5.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonMd5.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonMd5.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonMd5.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonMd5.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonMinKey", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonMinKey$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonMinKey$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonMinKey$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonMinKey$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonMinKey$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonMinKey$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonMinKey$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonMinKey$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMinKey$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMinKey$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonMinKey$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonMinKey$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonMinKey$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonMinKey$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonMinKey$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonMinKey$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonMinKey$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonMinKey$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonNull", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonNull$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonNull$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonNull$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonNull$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonNull$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonNull$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonNull$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonNull$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonNull$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonNull$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonNull$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonNull$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonNull$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonNull$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonNull$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonNull$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonNull$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonNull$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonObjectId", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonObjectId#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": ObjectId", "member" : "kantan.mongodb.BsonObjectId.value", "link" : "kantan\/mongodb\/BsonObjectId.html#value:org.bson.types.ObjectId", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonObjectId.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonObjectId.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonObjectId.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonObjectId.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonObjectId.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonObjectId.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonObjectId.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonObjectId.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonObjectId.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonObjectId.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonObjectId.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonObjectId.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonObjectId.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonObjectId.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonObjectId.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonObjectId.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonObjectId.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonRegularExpression", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonRegularExpression$.html", "members_object" : [{"label" : "toLegacy", "tail" : "(r: BsonRegularExpression): org.bson.BsonRegularExpression", "member" : "kantan.mongodb.BsonRegularExpression.toLegacy", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#toLegacy(r:kantan.mongodb.BsonRegularExpression):org.bson.BsonRegularExpression", "kind" : "def"}, {"label" : "fromLegacy", "tail" : "(r: org.bson.BsonRegularExpression): BsonRegularExpression", "member" : "kantan.mongodb.BsonRegularExpression.fromLegacy", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#fromLegacy(r:org.bson.BsonRegularExpression):kantan.mongodb.BsonRegularExpression", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonRegularExpression$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonRegularExpression$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "hashCode", "tail" : "(): Int", "member" : "kantan.mongodb.BsonRegularExpression.hashCode", "link" : "kantan\/mongodb\/BsonRegularExpression.html#hashCode():Int", "kind" : "def"}, {"label" : "equals", "tail" : "(obj: Any): Boolean", "member" : "kantan.mongodb.BsonRegularExpression.equals", "link" : "kantan\/mongodb\/BsonRegularExpression.html#equals(obj:Any):Boolean", "kind" : "def"}, {"member" : "kantan.mongodb.BsonRegularExpression#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": Pattern", "member" : "kantan.mongodb.BsonRegularExpression.value", "link" : "kantan\/mongodb\/BsonRegularExpression.html#value:java.util.regex.Pattern", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonRegularExpression.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonRegularExpression.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonRegularExpression.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonRegularExpression.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonRegularExpression.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonRegularExpression.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonRegularExpression.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonRegularExpression.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonRegularExpression.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonRegularExpression.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonRegularExpression.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonRegularExpression.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonRegularExpression.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonRegularExpression.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonRegularExpression.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonRegularExpression.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonRegularExpression.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonString", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonString#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": String", "member" : "kantan.mongodb.BsonString.value", "link" : "kantan\/mongodb\/BsonString.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonString.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonString.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonString.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonString.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonString.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonString.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonString.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonString.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonString.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonString.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonString.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonString.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonString.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonString.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonString.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonString.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonString.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonSymbol", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonSymbol#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": String", "member" : "kantan.mongodb.BsonSymbol.value", "link" : "kantan\/mongodb\/BsonSymbol.html#value:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonSymbol.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonSymbol.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonSymbol.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonSymbol.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonSymbol.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonSymbol.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonSymbol.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonSymbol.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonSymbol.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonSymbol.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonSymbol.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonSymbol.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonSymbol.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonSymbol.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonSymbol.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonSymbol.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonSymbol.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonTimestamp", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonTimestamp$.html", "members_object" : [{"label" : "toLegacy", "tail" : "(t: BsonTimestamp): org.bson.BsonTimestamp", "member" : "kantan.mongodb.BsonTimestamp.toLegacy", "link" : "kantan\/mongodb\/BsonTimestamp$.html#toLegacy(t:kantan.mongodb.BsonTimestamp):org.bson.BsonTimestamp", "kind" : "def"}, {"label" : "fromLegacy", "tail" : "(t: org.bson.BsonTimestamp): BsonTimestamp", "member" : "kantan.mongodb.BsonTimestamp.fromLegacy", "link" : "kantan\/mongodb\/BsonTimestamp$.html#fromLegacy(t:org.bson.BsonTimestamp):kantan.mongodb.BsonTimestamp", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonTimestamp$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonTimestamp$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonTimestamp$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonTimestamp$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonTimestamp$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonTimestamp$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonTimestamp$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonTimestamp$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonTimestamp$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonTimestamp$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonTimestamp$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonTimestamp$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonTimestamp$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonTimestamp$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonTimestamp$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonTimestamp$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonTimestamp$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonTimestamp$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonTimestamp$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.mongodb.BsonTimestamp#<init>", "error" : "unsupported entity"}, {"label" : "inc", "tail" : ": Int", "member" : "kantan.mongodb.BsonTimestamp.inc", "link" : "kantan\/mongodb\/BsonTimestamp.html#inc:Int", "kind" : "val"}, {"label" : "seconds", "tail" : ": Int", "member" : "kantan.mongodb.BsonTimestamp.seconds", "link" : "kantan\/mongodb\/BsonTimestamp.html#seconds:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonTimestamp.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonTimestamp.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonTimestamp.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonTimestamp.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonTimestamp.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonTimestamp.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonTimestamp.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonTimestamp.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonTimestamp.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonTimestamp.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonTimestamp.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonTimestamp.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonTimestamp.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonTimestamp.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonTimestamp.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonTimestamp.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonTimestamp.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonUndefined", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonUndefined$.html", "members_object" : [{"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonUndefined$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonUndefined$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonUndefined$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonUndefined$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonUndefined$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonUndefined$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonUndefined$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUndefined$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUndefined$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUndefined$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonUndefined$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonUndefined$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonUndefined$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonUndefined$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonUndefined$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonUndefined$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonUndefined$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonUserDefinedBinary", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonUserDefinedBinary#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": IndexedSeq[Byte]", "member" : "kantan.mongodb.BsonUserDefinedBinary.value", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#value:IndexedSeq[Byte]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonUserDefinedBinary.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonUserDefinedBinary.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonUuid", "shortDescription" : "", "members_case class" : [{"member" : "kantan.mongodb.BsonUuid#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": UUID", "member" : "kantan.mongodb.BsonUuid.value", "link" : "kantan\/mongodb\/BsonUuid.html#value:java.util.UUID", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonUuid.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonUuid.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonUuid.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonUuid.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonUuid.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonUuid.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonUuid.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUuid.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUuid.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonUuid.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonUuid.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonUuid.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonUuid.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonUuid.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonUuid.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonUuid.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BsonUuid.html", "kind" : "case class"}, {"name" : "kantan.mongodb.BsonValue", "shortDescription" : "Represents all possible values that can be found in a BSON document.", "object" : "kantan\/mongodb\/BsonValue$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/BsonValue.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/BsonValue.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValue.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValue.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValue.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValue.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValue.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValue.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValue.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValue.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValue.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValue.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValue.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValue.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValue.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValue.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValue.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValue.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValue.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValue.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValue.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/BsonValue.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/BsonValue.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/BsonValue.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "fromLegacy", "tail" : "(value: org.bson.BsonValue): BsonValue", "member" : "kantan.mongodb.BsonValue.fromLegacy", "link" : "kantan\/mongodb\/BsonValue$.html#fromLegacy(value:org.bson.BsonValue):kantan.mongodb.BsonValue", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValue$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValue$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValue$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValue$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValue$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValue$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValue$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValue$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValue$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValue$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValue$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValue$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValue$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValue$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValue$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValue$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValue$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValue$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValue$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/BsonValue.html", "kind" : "class"}, {"name" : "kantan.mongodb.BsonValueCodec", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonValueCodec$.html", "members_object" : [{"label" : "from", "tail" : "(d: Decoder[BsonValue, D, Decode, codecs.type], e: Encoder[BsonValue, D, codecs.type]): Codec[BsonValue, D, Decode, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/mongodb\/BsonValueCodec$.html#from[D](d:kantan.codecs.Decoder[E,D,F,T],e:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (BsonValue) ⇒ Result[Decode, D])(g: (D) ⇒ BsonValue): Codec[BsonValue, D, Decode, codecs.type]", "member" : "kantan.codecs.CodecCompanion.from", "link" : "kantan\/mongodb\/BsonValueCodec$.html#from[D](f:E=>kantan.codecs.Result[F,D])(g:D=>E):kantan.codecs.Codec[E,D,F,T]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValueCodec$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValueCodec$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValueCodec$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValueCodec$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValueCodec$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValueCodec$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValueCodec$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueCodec$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueCodec$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueCodec$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValueCodec$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValueCodec$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValueCodec$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValueCodec$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValueCodec$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValueCodec$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValueCodec$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValueCodec$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValueCodec$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonValueCodecInstances", "members_trait" : [{"label" : "bsonPathDecoder", "tail" : ": BsonValueDecoder[Path]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonPathDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonPathDecoder:kantan.mongodb.BsonValueDecoder[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "bsonFileDecoder", "tail" : ": BsonValueDecoder[File]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonFileDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonFileDecoder:kantan.mongodb.BsonValueDecoder[java.io.File]", "kind" : "implicit val"}, {"label" : "bsonUrlDecoder", "tail" : ": BsonValueDecoder[URL]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUrlDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonUrlDecoder:kantan.mongodb.BsonValueDecoder[java.net.URL]", "kind" : "implicit val"}, {"label" : "bsonUriDecoder", "tail" : ": BsonValueDecoder[URI]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUriDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonUriDecoder:kantan.mongodb.BsonValueDecoder[java.net.URI]", "kind" : "implicit val"}, {"label" : "fromStringDecoder", "tail" : "(arg0: StringDecoder[A]): BsonValueDecoder[A]", "member" : "kantan.mongodb.BsonValueDecoderInstances.fromStringDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#fromStringDecoder[A](implicitevidence$4:kantan.codecs.strings.StringDecoder[A]):kantan.mongodb.BsonValueDecoder[A]", "kind" : "def"}, {"label" : "bsonStringDecoder", "tail" : ": BsonValueDecoder[String]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonStringDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonStringDecoder:kantan.mongodb.BsonValueDecoder[String]", "kind" : "implicit val"}, {"label" : "javaUtilDateDecoder", "tail" : ": BsonValueDecoder[Date]", "member" : "kantan.mongodb.BsonValueDecoderInstances.javaUtilDateDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#javaUtilDateDecoder:kantan.mongodb.BsonValueDecoder[java.util.Date]", "kind" : "implicit val"}, {"label" : "bsonOptionDecoder", "tail" : "(arg0: BsonValueDecoder[A]): BsonValueDecoder[Option[A]]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonOptionDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonOptionDecoder[A](implicitevidence$3:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.BsonValueDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "bsonArrayDecoder", "tail" : "(arg0: BsonValueDecoder[A], cbf: CanBuildFrom[Nothing, A, C[A]]): BsonValueDecoder[C[A]]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonArrayDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonArrayDecoder[C[_],A](implicitevidence$2:kantan.mongodb.BsonValueDecoder[A],implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,C[A]]):kantan.mongodb.BsonValueDecoder[C[A]]", "kind" : "implicit def"}, {"label" : "bsonUuidDecoder", "tail" : ": BsonValueDecoder[UUID]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUuidDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonUuidDecoder:kantan.mongodb.BsonValueDecoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "bsonRegularExpressionDecoder", "tail" : ": BsonValueDecoder[Pattern]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonRegularExpressionDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonRegularExpressionDecoder:kantan.mongodb.BsonValueDecoder[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "bsonBooleanDecoder", "tail" : ": BsonValueDecoder[Boolean]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonBooleanDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonBooleanDecoder:kantan.mongodb.BsonValueDecoder[Boolean]", "kind" : "implicit val"}, {"label" : "bsonObjectIdDecoder", "tail" : ": BsonValueDecoder[ObjectId]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonObjectIdDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonObjectIdDecoder:kantan.mongodb.BsonValueDecoder[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "bsonDoubleDecoder", "tail" : ": BsonValueDecoder[Double]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonDoubleDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonDoubleDecoder:kantan.mongodb.BsonValueDecoder[Double]", "kind" : "implicit val"}, {"label" : "bsonLongDecoder", "tail" : ": BsonValueDecoder[Long]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonLongDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonLongDecoder:kantan.mongodb.BsonValueDecoder[Long]", "kind" : "implicit val"}, {"label" : "bsonIntDecoder", "tail" : ": BsonValueDecoder[Int]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonIntDecoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonIntDecoder:kantan.mongodb.BsonValueDecoder[Int]", "kind" : "implicit val"}, {"label" : "decoderFromDocument", "tail" : "(arg0: BsonDocumentDecoder[A]): BsonValueDecoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueDecoderInstances.decoderFromDocument", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#decoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.BsonValueDecoder[A]", "kind" : "implicit def"}, {"label" : "bsonPathEncoder", "tail" : ": BsonValueEncoder[Path]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonPathEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonPathEncoder:kantan.mongodb.BsonValueEncoder[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "bsonFileEncoder", "tail" : ": BsonValueEncoder[File]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonFileEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonFileEncoder:kantan.mongodb.BsonValueEncoder[java.io.File]", "kind" : "implicit val"}, {"label" : "bsonUrlEncoder", "tail" : ": BsonValueEncoder[URL]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUrlEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonUrlEncoder:kantan.mongodb.BsonValueEncoder[java.net.URL]", "kind" : "implicit val"}, {"label" : "bsonUriEncoder", "tail" : ": BsonValueEncoder[URI]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUriEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonUriEncoder:kantan.mongodb.BsonValueEncoder[java.net.URI]", "kind" : "implicit val"}, {"label" : "fromStringEncoder", "tail" : "(arg0: StringEncoder[A]): BsonValueEncoder[A]", "member" : "kantan.mongodb.BsonValueEncoderInstances.fromStringEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#fromStringEncoder[A](implicitevidence$4:kantan.codecs.strings.StringEncoder[A]):kantan.mongodb.BsonValueEncoder[A]", "kind" : "def"}, {"label" : "bsonStringEncoder", "tail" : ": BsonValueEncoder[String]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonStringEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonStringEncoder:kantan.mongodb.BsonValueEncoder[String]", "kind" : "implicit val"}, {"label" : "javaUtilDateEncoder", "tail" : ": BsonValueEncoder[Date]", "member" : "kantan.mongodb.BsonValueEncoderInstances.javaUtilDateEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#javaUtilDateEncoder:kantan.mongodb.BsonValueEncoder[java.util.Date]", "kind" : "implicit val"}, {"label" : "bsonOptionEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[Option[A]]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonOptionEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonOptionEncoder[A](implicitevidence$3:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[Option[A]]", "kind" : "implicit def"}, {"label" : "bsonArrayEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[C[A]]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonArrayEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonArrayEncoder[C[X]<:Traversable[X],A](implicitevidence$2:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[C[A]]", "kind" : "implicit def"}, {"label" : "bsonUuidEncoder", "tail" : ": BsonValueEncoder[UUID]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUuidEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonUuidEncoder:kantan.mongodb.BsonValueEncoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "bsonPatternEncoder", "tail" : ": BsonValueEncoder[Pattern]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonPatternEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonPatternEncoder:kantan.mongodb.BsonValueEncoder[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "bsonObjectIdEncoder", "tail" : ": BsonValueEncoder[ObjectId]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonObjectIdEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonObjectIdEncoder:kantan.mongodb.BsonValueEncoder[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "bsonBooleanEncoder", "tail" : ": BsonValueEncoder[Boolean]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonBooleanEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonBooleanEncoder:kantan.mongodb.BsonValueEncoder[Boolean]", "kind" : "implicit val"}, {"label" : "bsonDoubleEncoder", "tail" : ": BsonValueEncoder[Double]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonDoubleEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonDoubleEncoder:kantan.mongodb.BsonValueEncoder[Double]", "kind" : "implicit val"}, {"label" : "bsonLongEncoder", "tail" : ": BsonValueEncoder[Long]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonLongEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonLongEncoder:kantan.mongodb.BsonValueEncoder[Long]", "kind" : "implicit val"}, {"label" : "bsonIntEncoder", "tail" : ": BsonValueEncoder[Int]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonIntEncoder", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#bsonIntEncoder:kantan.mongodb.BsonValueEncoder[Int]", "kind" : "implicit val"}, {"label" : "encoderFromDocument", "tail" : "(arg0: BsonDocumentEncoder[A]): BsonValueEncoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueEncoderInstances.encoderFromDocument", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#encoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.BsonValueEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValueCodecInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/BsonValueCodecInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.BsonValueDecoder", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonValueDecoder$.html", "members_object" : [{"label" : "oneOf", "tail" : "(ds: Decoder[BsonValue, D, Decode, codecs.type]*)(i: IsError[Decode]): Decoder[BsonValue, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.oneOf", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#oneOf[D](ds:kantan.codecs.Decoder[E,D,F,T]*)(impliciti:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromPartial", "tail" : "(f: PartialFunction[BsonValue, Result[Decode, D]])(t: IsError[Decode]): Decoder[BsonValue, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromPartial", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#fromPartial[D](f:PartialFunction[E,kantan.codecs.Result[F,D]])(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "fromUnsafe", "tail" : "(f: (BsonValue) ⇒ D)(t: IsError[Decode]): Decoder[BsonValue, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.fromUnsafe", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#fromUnsafe[D](f:E=>D)(implicitt:kantan.codecs.error.IsError[F]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "from", "tail" : "(f: (BsonValue) ⇒ Result[Decode, D]): Decoder[BsonValue, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.from", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#from[D](f:E=>kantan.codecs.Result[F,D]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Decoder[BsonValue, D, Decode, codecs.type]): Decoder[BsonValue, D, Decode, codecs.type]", "member" : "kantan.codecs.DecoderCompanion.apply", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#apply[D](implicitev:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,D,F,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValueDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValueDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonValueDecoderInstances", "members_trait" : [{"label" : "bsonPathDecoder", "tail" : ": BsonValueDecoder[Path]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonPathDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonPathDecoder:kantan.mongodb.BsonValueDecoder[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "bsonFileDecoder", "tail" : ": BsonValueDecoder[File]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonFileDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonFileDecoder:kantan.mongodb.BsonValueDecoder[java.io.File]", "kind" : "implicit val"}, {"label" : "bsonUrlDecoder", "tail" : ": BsonValueDecoder[URL]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUrlDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonUrlDecoder:kantan.mongodb.BsonValueDecoder[java.net.URL]", "kind" : "implicit val"}, {"label" : "bsonUriDecoder", "tail" : ": BsonValueDecoder[URI]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUriDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonUriDecoder:kantan.mongodb.BsonValueDecoder[java.net.URI]", "kind" : "implicit val"}, {"label" : "fromStringDecoder", "tail" : "(arg0: StringDecoder[A]): BsonValueDecoder[A]", "member" : "kantan.mongodb.BsonValueDecoderInstances.fromStringDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#fromStringDecoder[A](implicitevidence$4:kantan.codecs.strings.StringDecoder[A]):kantan.mongodb.BsonValueDecoder[A]", "kind" : "def"}, {"label" : "bsonStringDecoder", "tail" : ": BsonValueDecoder[String]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonStringDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonStringDecoder:kantan.mongodb.BsonValueDecoder[String]", "kind" : "implicit val"}, {"label" : "javaUtilDateDecoder", "tail" : ": BsonValueDecoder[Date]", "member" : "kantan.mongodb.BsonValueDecoderInstances.javaUtilDateDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#javaUtilDateDecoder:kantan.mongodb.BsonValueDecoder[java.util.Date]", "kind" : "implicit val"}, {"label" : "bsonOptionDecoder", "tail" : "(arg0: BsonValueDecoder[A]): BsonValueDecoder[Option[A]]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonOptionDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonOptionDecoder[A](implicitevidence$3:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.BsonValueDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "bsonArrayDecoder", "tail" : "(arg0: BsonValueDecoder[A], cbf: CanBuildFrom[Nothing, A, C[A]]): BsonValueDecoder[C[A]]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonArrayDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonArrayDecoder[C[_],A](implicitevidence$2:kantan.mongodb.BsonValueDecoder[A],implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,C[A]]):kantan.mongodb.BsonValueDecoder[C[A]]", "kind" : "implicit def"}, {"label" : "bsonUuidDecoder", "tail" : ": BsonValueDecoder[UUID]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUuidDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonUuidDecoder:kantan.mongodb.BsonValueDecoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "bsonRegularExpressionDecoder", "tail" : ": BsonValueDecoder[Pattern]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonRegularExpressionDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonRegularExpressionDecoder:kantan.mongodb.BsonValueDecoder[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "bsonBooleanDecoder", "tail" : ": BsonValueDecoder[Boolean]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonBooleanDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonBooleanDecoder:kantan.mongodb.BsonValueDecoder[Boolean]", "kind" : "implicit val"}, {"label" : "bsonObjectIdDecoder", "tail" : ": BsonValueDecoder[ObjectId]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonObjectIdDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonObjectIdDecoder:kantan.mongodb.BsonValueDecoder[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "bsonDoubleDecoder", "tail" : ": BsonValueDecoder[Double]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonDoubleDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonDoubleDecoder:kantan.mongodb.BsonValueDecoder[Double]", "kind" : "implicit val"}, {"label" : "bsonLongDecoder", "tail" : ": BsonValueDecoder[Long]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonLongDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonLongDecoder:kantan.mongodb.BsonValueDecoder[Long]", "kind" : "implicit val"}, {"label" : "bsonIntDecoder", "tail" : ": BsonValueDecoder[Int]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonIntDecoder", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#bsonIntDecoder:kantan.mongodb.BsonValueDecoder[Int]", "kind" : "implicit val"}, {"label" : "decoderFromDocument", "tail" : "(arg0: BsonDocumentDecoder[A]): BsonValueDecoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueDecoderInstances.decoderFromDocument", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#decoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.BsonValueDecoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValueDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/BsonValueDecoderInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.BsonValueEncoder", "shortDescription" : "", "object" : "kantan\/mongodb\/BsonValueEncoder$.html", "members_object" : [{"label" : "from", "tail" : "(f: (D) ⇒ BsonValue): Encoder[BsonValue, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.from", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#from[D](f:D=>E):kantan.codecs.Encoder[E,D,T]", "kind" : "def"}, {"label" : "apply", "tail" : "(ev: Encoder[BsonValue, D, codecs.type]): Encoder[BsonValue, D, codecs.type]", "member" : "kantan.codecs.EncoderCompanion.apply", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#apply[D](implicitev:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,D,T]", "kind" : "macro def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValueEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValueEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BsonValueEncoderInstances", "members_trait" : [{"label" : "bsonPathEncoder", "tail" : ": BsonValueEncoder[Path]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonPathEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonPathEncoder:kantan.mongodb.BsonValueEncoder[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "bsonFileEncoder", "tail" : ": BsonValueEncoder[File]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonFileEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonFileEncoder:kantan.mongodb.BsonValueEncoder[java.io.File]", "kind" : "implicit val"}, {"label" : "bsonUrlEncoder", "tail" : ": BsonValueEncoder[URL]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUrlEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonUrlEncoder:kantan.mongodb.BsonValueEncoder[java.net.URL]", "kind" : "implicit val"}, {"label" : "bsonUriEncoder", "tail" : ": BsonValueEncoder[URI]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUriEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonUriEncoder:kantan.mongodb.BsonValueEncoder[java.net.URI]", "kind" : "implicit val"}, {"label" : "fromStringEncoder", "tail" : "(arg0: StringEncoder[A]): BsonValueEncoder[A]", "member" : "kantan.mongodb.BsonValueEncoderInstances.fromStringEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#fromStringEncoder[A](implicitevidence$4:kantan.codecs.strings.StringEncoder[A]):kantan.mongodb.BsonValueEncoder[A]", "kind" : "def"}, {"label" : "bsonStringEncoder", "tail" : ": BsonValueEncoder[String]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonStringEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonStringEncoder:kantan.mongodb.BsonValueEncoder[String]", "kind" : "implicit val"}, {"label" : "javaUtilDateEncoder", "tail" : ": BsonValueEncoder[Date]", "member" : "kantan.mongodb.BsonValueEncoderInstances.javaUtilDateEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#javaUtilDateEncoder:kantan.mongodb.BsonValueEncoder[java.util.Date]", "kind" : "implicit val"}, {"label" : "bsonOptionEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[Option[A]]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonOptionEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonOptionEncoder[A](implicitevidence$3:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[Option[A]]", "kind" : "implicit def"}, {"label" : "bsonArrayEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[C[A]]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonArrayEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonArrayEncoder[C[X]<:Traversable[X],A](implicitevidence$2:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[C[A]]", "kind" : "implicit def"}, {"label" : "bsonUuidEncoder", "tail" : ": BsonValueEncoder[UUID]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUuidEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonUuidEncoder:kantan.mongodb.BsonValueEncoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "bsonPatternEncoder", "tail" : ": BsonValueEncoder[Pattern]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonPatternEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonPatternEncoder:kantan.mongodb.BsonValueEncoder[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "bsonObjectIdEncoder", "tail" : ": BsonValueEncoder[ObjectId]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonObjectIdEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonObjectIdEncoder:kantan.mongodb.BsonValueEncoder[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "bsonBooleanEncoder", "tail" : ": BsonValueEncoder[Boolean]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonBooleanEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonBooleanEncoder:kantan.mongodb.BsonValueEncoder[Boolean]", "kind" : "implicit val"}, {"label" : "bsonDoubleEncoder", "tail" : ": BsonValueEncoder[Double]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonDoubleEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonDoubleEncoder:kantan.mongodb.BsonValueEncoder[Double]", "kind" : "implicit val"}, {"label" : "bsonLongEncoder", "tail" : ": BsonValueEncoder[Long]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonLongEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonLongEncoder:kantan.mongodb.BsonValueEncoder[Long]", "kind" : "implicit val"}, {"label" : "bsonIntEncoder", "tail" : ": BsonValueEncoder[Int]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonIntEncoder", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#bsonIntEncoder:kantan.mongodb.BsonValueEncoder[Int]", "kind" : "implicit val"}, {"label" : "encoderFromDocument", "tail" : "(arg0: BsonDocumentEncoder[A]): BsonValueEncoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueEncoderInstances.encoderFromDocument", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#encoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.BsonValueEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BsonValueEncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/BsonValueEncoderInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.BuildInfo", "shortDescription" : "This object was generated by sbt-buildinfo.", "object" : "kantan\/mongodb\/BuildInfo$.html", "members_object" : [{"label" : "toString", "tail" : ": String", "member" : "kantan.mongodb.BuildInfo.toString", "link" : "kantan\/mongodb\/BuildInfo$.html#toString:String", "kind" : "val"}, {"label" : "commit", "tail" : ": Option[String]", "member" : "kantan.mongodb.BuildInfo.commit", "link" : "kantan\/mongodb\/BuildInfo$.html#commit:Option[String]", "kind" : "val"}, {"label" : "version", "tail" : ": String", "member" : "kantan.mongodb.BuildInfo.version", "link" : "kantan\/mongodb\/BuildInfo$.html#version:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BuildInfo$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BuildInfo$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BuildInfo$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BuildInfo$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BuildInfo$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BuildInfo$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BuildInfo$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BuildInfo$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BuildInfo$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BuildInfo$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BuildInfo$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BuildInfo$.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BuildInfo$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BuildInfo$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BuildInfo$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BuildInfo$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BuildInfo$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.BulkOperation", "shortDescription" : "", "object" : "kantan\/mongodb\/BulkOperation$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/BulkOperation.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/BulkOperation.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BulkOperation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BulkOperation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BulkOperation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BulkOperation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BulkOperation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BulkOperation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BulkOperation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkOperation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkOperation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkOperation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BulkOperation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BulkOperation.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BulkOperation.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BulkOperation.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BulkOperation.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BulkOperation.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BulkOperation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BulkOperation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BulkOperation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/BulkOperation.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/BulkOperation.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/BulkOperation.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "UpdateOne", "tail" : "", "member" : "kantan.mongodb.BulkOperation.UpdateOne", "link" : "kantan\/mongodb\/BulkOperation$.html#UpdateOne[F,U]extendsBulkOperationwithProductwithSerializable", "kind" : "final case class"}, {"label" : "UpdateMany", "tail" : "", "member" : "kantan.mongodb.BulkOperation.UpdateMany", "link" : "kantan\/mongodb\/BulkOperation$.html#UpdateMany[F,U]extendsBulkOperationwithProductwithSerializable", "kind" : "final case class"}, {"label" : "ReplaceOne", "tail" : "", "member" : "kantan.mongodb.BulkOperation.ReplaceOne", "link" : "kantan\/mongodb\/BulkOperation$.html#ReplaceOne[F,D]extendsBulkOperationwithProductwithSerializable", "kind" : "final case class"}, {"label" : "InsertOne", "tail" : "", "member" : "kantan.mongodb.BulkOperation.InsertOne", "link" : "kantan\/mongodb\/BulkOperation$.html#InsertOne[D]extendsBulkOperationwithProductwithSerializable", "kind" : "final case class"}, {"label" : "DeleteOne", "tail" : "", "member" : "kantan.mongodb.BulkOperation.DeleteOne", "link" : "kantan\/mongodb\/BulkOperation$.html#DeleteOne[F]extendsBulkOperationwithProductwithSerializable", "kind" : "final case class"}, {"label" : "DeleteMany", "tail" : "", "member" : "kantan.mongodb.BulkOperation.DeleteMany", "link" : "kantan\/mongodb\/BulkOperation$.html#DeleteMany[F]extendsBulkOperationwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BulkOperation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BulkOperation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BulkOperation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BulkOperation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BulkOperation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BulkOperation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BulkOperation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkOperation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkOperation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkOperation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BulkOperation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BulkOperation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BulkOperation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BulkOperation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BulkOperation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BulkOperation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BulkOperation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BulkOperation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BulkOperation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/BulkOperation.html", "kind" : "class"}, {"name" : "kantan.mongodb.BulkResult", "shortDescription" : "", "object" : "kantan\/mongodb\/BulkResult$.html", "members_object" : [{"label" : "Upsert", "tail" : "", "member" : "kantan.mongodb.BulkResult.Upsert", "link" : "kantan\/mongodb\/BulkResult$.html#UpsertextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BulkResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BulkResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BulkResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BulkResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BulkResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BulkResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BulkResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BulkResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BulkResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/BulkResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BulkResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/BulkResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/BulkResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BulkResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BulkResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BulkResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.mongodb.BulkResult#<init>", "error" : "unsupported entity"}, {"label" : "upserts", "tail" : ": Seq[Upsert]", "member" : "kantan.mongodb.BulkResult.upserts", "link" : "kantan\/mongodb\/BulkResult.html#upserts:Seq[kantan.mongodb.BulkResult.Upsert]", "kind" : "val"}, {"label" : "acknowledged", "tail" : ": Boolean", "member" : "kantan.mongodb.BulkResult.acknowledged", "link" : "kantan\/mongodb\/BulkResult.html#acknowledged:Boolean", "kind" : "val"}, {"label" : "modified", "tail" : ": Option[Int]", "member" : "kantan.mongodb.BulkResult.modified", "link" : "kantan\/mongodb\/BulkResult.html#modified:Option[Int]", "kind" : "val"}, {"label" : "deleted", "tail" : ": Int", "member" : "kantan.mongodb.BulkResult.deleted", "link" : "kantan\/mongodb\/BulkResult.html#deleted:Int", "kind" : "val"}, {"label" : "matched", "tail" : ": Int", "member" : "kantan.mongodb.BulkResult.matched", "link" : "kantan\/mongodb\/BulkResult.html#matched:Int", "kind" : "val"}, {"label" : "inserted", "tail" : ": Int", "member" : "kantan.mongodb.BulkResult.inserted", "link" : "kantan\/mongodb\/BulkResult.html#inserted:Int", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/BulkResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/BulkResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/BulkResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/BulkResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/BulkResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/BulkResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/BulkResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/BulkResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/BulkResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/BulkResult.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/BulkResult.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/BulkResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/BulkResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/BulkResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/BulkResult.html", "kind" : "case class"}, {"name" : "kantan.mongodb.codecs", "shortDescription" : "", "object" : "kantan\/mongodb\/codecs$.html", "members_object" : [{"label" : "bsonDocumentDocumentEncoder", "tail" : ": BsonDocumentEncoder[BsonDocument]", "member" : "kantan.mongodb.BsonDocumentEncoderInstances.bsonDocumentDocumentEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonDocumentDocumentEncoder:kantan.mongodb.BsonDocumentEncoder[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "bsonDocumentDocumentDecoder", "tail" : ": BsonDocumentDecoder[BsonDocument]", "member" : "kantan.mongodb.BsonDocumentDecoderInstances.bsonDocumentDocumentDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonDocumentDocumentDecoder:kantan.mongodb.BsonDocumentDecoder[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "bsonPathDecoder", "tail" : ": BsonValueDecoder[Path]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonPathDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonPathDecoder:kantan.mongodb.BsonValueDecoder[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "bsonFileDecoder", "tail" : ": BsonValueDecoder[File]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonFileDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonFileDecoder:kantan.mongodb.BsonValueDecoder[java.io.File]", "kind" : "implicit val"}, {"label" : "bsonUrlDecoder", "tail" : ": BsonValueDecoder[URL]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUrlDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonUrlDecoder:kantan.mongodb.BsonValueDecoder[java.net.URL]", "kind" : "implicit val"}, {"label" : "bsonUriDecoder", "tail" : ": BsonValueDecoder[URI]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUriDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonUriDecoder:kantan.mongodb.BsonValueDecoder[java.net.URI]", "kind" : "implicit val"}, {"label" : "fromStringDecoder", "tail" : "(arg0: StringDecoder[A]): BsonValueDecoder[A]", "member" : "kantan.mongodb.BsonValueDecoderInstances.fromStringDecoder", "link" : "kantan\/mongodb\/codecs$.html#fromStringDecoder[A](implicitevidence$4:kantan.codecs.strings.StringDecoder[A]):kantan.mongodb.BsonValueDecoder[A]", "kind" : "def"}, {"label" : "bsonStringDecoder", "tail" : ": BsonValueDecoder[String]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonStringDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonStringDecoder:kantan.mongodb.BsonValueDecoder[String]", "kind" : "implicit val"}, {"label" : "javaUtilDateDecoder", "tail" : ": BsonValueDecoder[Date]", "member" : "kantan.mongodb.BsonValueDecoderInstances.javaUtilDateDecoder", "link" : "kantan\/mongodb\/codecs$.html#javaUtilDateDecoder:kantan.mongodb.BsonValueDecoder[java.util.Date]", "kind" : "implicit val"}, {"label" : "bsonOptionDecoder", "tail" : "(arg0: BsonValueDecoder[A]): BsonValueDecoder[Option[A]]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonOptionDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonOptionDecoder[A](implicitevidence$3:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.BsonValueDecoder[Option[A]]", "kind" : "implicit def"}, {"label" : "bsonArrayDecoder", "tail" : "(arg0: BsonValueDecoder[A], cbf: CanBuildFrom[Nothing, A, C[A]]): BsonValueDecoder[C[A]]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonArrayDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonArrayDecoder[C[_],A](implicitevidence$2:kantan.mongodb.BsonValueDecoder[A],implicitcbf:scala.collection.generic.CanBuildFrom[Nothing,A,C[A]]):kantan.mongodb.BsonValueDecoder[C[A]]", "kind" : "implicit def"}, {"label" : "bsonUuidDecoder", "tail" : ": BsonValueDecoder[UUID]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonUuidDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonUuidDecoder:kantan.mongodb.BsonValueDecoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "bsonRegularExpressionDecoder", "tail" : ": BsonValueDecoder[Pattern]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonRegularExpressionDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonRegularExpressionDecoder:kantan.mongodb.BsonValueDecoder[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "bsonBooleanDecoder", "tail" : ": BsonValueDecoder[Boolean]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonBooleanDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonBooleanDecoder:kantan.mongodb.BsonValueDecoder[Boolean]", "kind" : "implicit val"}, {"label" : "bsonObjectIdDecoder", "tail" : ": BsonValueDecoder[ObjectId]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonObjectIdDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonObjectIdDecoder:kantan.mongodb.BsonValueDecoder[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "bsonDoubleDecoder", "tail" : ": BsonValueDecoder[Double]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonDoubleDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonDoubleDecoder:kantan.mongodb.BsonValueDecoder[Double]", "kind" : "implicit val"}, {"label" : "bsonLongDecoder", "tail" : ": BsonValueDecoder[Long]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonLongDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonLongDecoder:kantan.mongodb.BsonValueDecoder[Long]", "kind" : "implicit val"}, {"label" : "bsonIntDecoder", "tail" : ": BsonValueDecoder[Int]", "member" : "kantan.mongodb.BsonValueDecoderInstances.bsonIntDecoder", "link" : "kantan\/mongodb\/codecs$.html#bsonIntDecoder:kantan.mongodb.BsonValueDecoder[Int]", "kind" : "implicit val"}, {"label" : "decoderFromDocument", "tail" : "(arg0: BsonDocumentDecoder[A]): BsonValueDecoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueDecoderInstances.decoderFromDocument", "link" : "kantan\/mongodb\/codecs$.html#decoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.BsonValueDecoder[A]", "kind" : "implicit def"}, {"label" : "bsonPathEncoder", "tail" : ": BsonValueEncoder[Path]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonPathEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonPathEncoder:kantan.mongodb.BsonValueEncoder[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "bsonFileEncoder", "tail" : ": BsonValueEncoder[File]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonFileEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonFileEncoder:kantan.mongodb.BsonValueEncoder[java.io.File]", "kind" : "implicit val"}, {"label" : "bsonUrlEncoder", "tail" : ": BsonValueEncoder[URL]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUrlEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonUrlEncoder:kantan.mongodb.BsonValueEncoder[java.net.URL]", "kind" : "implicit val"}, {"label" : "bsonUriEncoder", "tail" : ": BsonValueEncoder[URI]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUriEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonUriEncoder:kantan.mongodb.BsonValueEncoder[java.net.URI]", "kind" : "implicit val"}, {"label" : "fromStringEncoder", "tail" : "(arg0: StringEncoder[A]): BsonValueEncoder[A]", "member" : "kantan.mongodb.BsonValueEncoderInstances.fromStringEncoder", "link" : "kantan\/mongodb\/codecs$.html#fromStringEncoder[A](implicitevidence$4:kantan.codecs.strings.StringEncoder[A]):kantan.mongodb.BsonValueEncoder[A]", "kind" : "def"}, {"label" : "bsonStringEncoder", "tail" : ": BsonValueEncoder[String]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonStringEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonStringEncoder:kantan.mongodb.BsonValueEncoder[String]", "kind" : "implicit val"}, {"label" : "javaUtilDateEncoder", "tail" : ": BsonValueEncoder[Date]", "member" : "kantan.mongodb.BsonValueEncoderInstances.javaUtilDateEncoder", "link" : "kantan\/mongodb\/codecs$.html#javaUtilDateEncoder:kantan.mongodb.BsonValueEncoder[java.util.Date]", "kind" : "implicit val"}, {"label" : "bsonOptionEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[Option[A]]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonOptionEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonOptionEncoder[A](implicitevidence$3:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[Option[A]]", "kind" : "implicit def"}, {"label" : "bsonArrayEncoder", "tail" : "(arg0: BsonValueEncoder[A]): BsonValueEncoder[C[A]]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonArrayEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonArrayEncoder[C[X]<:Traversable[X],A](implicitevidence$2:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonValueEncoder[C[A]]", "kind" : "implicit def"}, {"label" : "bsonUuidEncoder", "tail" : ": BsonValueEncoder[UUID]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonUuidEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonUuidEncoder:kantan.mongodb.BsonValueEncoder[java.util.UUID]", "kind" : "implicit val"}, {"label" : "bsonPatternEncoder", "tail" : ": BsonValueEncoder[Pattern]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonPatternEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonPatternEncoder:kantan.mongodb.BsonValueEncoder[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "bsonObjectIdEncoder", "tail" : ": BsonValueEncoder[ObjectId]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonObjectIdEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonObjectIdEncoder:kantan.mongodb.BsonValueEncoder[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "bsonBooleanEncoder", "tail" : ": BsonValueEncoder[Boolean]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonBooleanEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonBooleanEncoder:kantan.mongodb.BsonValueEncoder[Boolean]", "kind" : "implicit val"}, {"label" : "bsonDoubleEncoder", "tail" : ": BsonValueEncoder[Double]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonDoubleEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonDoubleEncoder:kantan.mongodb.BsonValueEncoder[Double]", "kind" : "implicit val"}, {"label" : "bsonLongEncoder", "tail" : ": BsonValueEncoder[Long]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonLongEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonLongEncoder:kantan.mongodb.BsonValueEncoder[Long]", "kind" : "implicit val"}, {"label" : "bsonIntEncoder", "tail" : ": BsonValueEncoder[Int]", "member" : "kantan.mongodb.BsonValueEncoderInstances.bsonIntEncoder", "link" : "kantan\/mongodb\/codecs$.html#bsonIntEncoder:kantan.mongodb.BsonValueEncoder[Int]", "kind" : "implicit val"}, {"label" : "encoderFromDocument", "tail" : "(arg0: BsonDocumentEncoder[A]): BsonValueEncoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueEncoderInstances.encoderFromDocument", "link" : "kantan\/mongodb\/codecs$.html#encoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.BsonValueEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/codecs$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/codecs$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/codecs$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/codecs$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/codecs$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/codecs$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/codecs$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/codecs$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/codecs$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/codecs$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/codecs$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/codecs$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/codecs$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/codecs$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/codecs$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/codecs$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/codecs$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/codecs$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/codecs$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.DatabaseQuery", "shortDescription" : "", "object" : "kantan\/mongodb\/DatabaseQuery$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.mongodb.DatabaseQuery.toString", "link" : "kantan\/mongodb\/DatabaseQuery.html#toString():String", "kind" : "def"}, {"label" : "onIterator", "tail" : "(f: (ResourceIterator[A]) ⇒ ResourceIterator[B]): DatabaseQuery[B]", "member" : "kantan.mongodb.DatabaseQuery.onIterator", "link" : "kantan\/mongodb\/DatabaseQuery.html#onIterator[B](f:kantan.codecs.resource.ResourceIterator[A]=>kantan.codecs.resource.ResourceIterator[B]):kantan.mongodb.DatabaseQuery[B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): ResourceIterator[A]", "member" : "kantan.mongodb.DatabaseQuery.iterator", "link" : "kantan\/mongodb\/DatabaseQuery.html#iterator:kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): DatabaseQuery[A]", "member" : "kantan.mongodb.DatabaseQuery.maxTime", "link" : "kantan\/mongodb\/DatabaseQuery.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.DatabaseQuery[A]", "kind" : "def"}, {"label" : "batchSize", "tail" : "(i: Int): DatabaseQuery[A]", "member" : "kantan.mongodb.DatabaseQuery.batchSize", "link" : "kantan\/mongodb\/DatabaseQuery.html#batchSize(i:Int):kantan.mongodb.DatabaseQuery[A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(conf: Config): DatabaseQuery[A]", "member" : "kantan.mongodb.DatabaseQuery.withConfig", "link" : "kantan\/mongodb\/DatabaseQuery.html#withConfig(conf:kantan.mongodb.DatabaseQuery.Config):kantan.mongodb.DatabaseQuery[A]", "kind" : "def"}, {"label" : "Repr", "tail" : "", "member" : "kantan.mongodb.DatabaseQuery.Repr", "link" : "kantan\/mongodb\/DatabaseQuery.html#Repr[X]=kantan.mongodb.DatabaseQuery[X]", "kind" : "type"}, {"member" : "kantan.mongodb.DatabaseQuery#<init>", "error" : "unsupported entity"}, {"label" : "reduceRight", "tail" : "(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceRight", "link" : "kantan\/mongodb\/DatabaseQuery.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldRight", "link" : "kantan\/mongodb\/DatabaseQuery.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceLeft", "link" : "kantan\/mongodb\/DatabaseQuery.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(b: B)(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldLeft", "link" : "kantan\/mongodb\/DatabaseQuery.html#foldLeft[B](b:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.nonEmpty", "link" : "kantan\/mongodb\/DatabaseQuery.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.isEmpty", "link" : "kantan\/mongodb\/DatabaseQuery.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) ⇒ Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterable.find", "link" : "kantan\/mongodb\/DatabaseQuery.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.exists", "link" : "kantan\/mongodb\/DatabaseQuery.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.forall", "link" : "kantan\/mongodb\/DatabaseQuery.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U): Unit", "member" : "kantan.codecs.resource.ResourceIterable.foreach", "link" : "kantan\/mongodb\/DatabaseQuery.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.withFilter", "link" : "kantan\/mongodb\/DatabaseQuery.html#withFilter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.filter", "link" : "kantan\/mongodb\/DatabaseQuery.html#filter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.takeWhile", "link" : "kantan\/mongodb\/DatabaseQuery.html#takeWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.take", "link" : "kantan\/mongodb\/DatabaseQuery.html#take(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.dropWhile", "link" : "kantan\/mongodb\/DatabaseQuery.html#dropWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.drop", "link" : "kantan\/mongodb\/DatabaseQuery.html#drop(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.collect", "link" : "kantan\/mongodb\/DatabaseQuery.html#collect[B](f:PartialFunction[A,B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Repr[B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.flatMap", "link" : "kantan\/mongodb\/DatabaseQuery.html#flatMap[B](f:A=>ResourceIterable.this.Repr[B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.map", "link" : "kantan\/mongodb\/DatabaseQuery.html#map[B](f:A=>B):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/DatabaseQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/DatabaseQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/DatabaseQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/DatabaseQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/DatabaseQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/DatabaseQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/DatabaseQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DatabaseQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DatabaseQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DatabaseQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/DatabaseQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/DatabaseQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/DatabaseQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/DatabaseQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/DatabaseQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/DatabaseQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/DatabaseQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/DatabaseQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Config", "tail" : "", "member" : "kantan.mongodb.DatabaseQuery.Config", "link" : "kantan\/mongodb\/DatabaseQuery$.html#Config", "kind" : "object"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.DatabaseQuery.Config", "link" : "kantan\/mongodb\/DatabaseQuery$.html#ConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/DatabaseQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/DatabaseQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/DatabaseQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/DatabaseQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/DatabaseQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/DatabaseQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/DatabaseQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DatabaseQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DatabaseQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DatabaseQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/DatabaseQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/DatabaseQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/DatabaseQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/DatabaseQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/DatabaseQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/DatabaseQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/DatabaseQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/DatabaseQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/DatabaseQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/DatabaseQuery.html", "kind" : "class"}, {"name" : "kantan.mongodb.DecodeResult", "shortDescription" : "", "object" : "kantan\/mongodb\/DecodeResult$.html", "members_object" : [{"label" : "fromThrowable", "tail" : "(t: Throwable): Decode", "member" : "kantan.mongodb.DecodeResult.fromThrowable", "link" : "kantan\/mongodb\/DecodeResult$.html#fromThrowable(t:Throwable):kantan.mongodb.MongoError.Decode", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Result[Decode, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/mongodb\/DecodeResult$.html#fromTry[S](t:scala.util.Try[S]):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: ⇒ S): Result[Decode, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/mongodb\/DecodeResult$.html#apply[S](s:=>S):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(o: Option[S], f: ⇒ Decode): Result[Decode, S]", "member" : "kantan.codecs.ResultCompanion.Simple.fromOption", "link" : "kantan\/mongodb\/DecodeResult$.html#fromOption[S](o:Option[S],f:=>F):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: Either[Decode, S]): Result[Decode, S]", "member" : "kantan.codecs.ResultCompanion.Simple.fromEither", "link" : "kantan\/mongodb\/DecodeResult$.html#fromEither[S](e:Either[F,S]):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: Decode): Result[Decode, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/mongodb\/DecodeResult$.html#failure(f:F):kantan.codecs.Result[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Result[Decode, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/mongodb\/DecodeResult$.html#success[S](s:S):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Result[Decode, S]])(cbf: CanBuildFrom[M[Result[Decode, S]], S, M[S]]): Result[Decode, M[S]]", "member" : "kantan.codecs.ResultCompanion.Simple.sequence", "link" : "kantan\/mongodb\/DecodeResult$.html#sequence[S,M<:<?>](rs:M[kantan.codecs.Result[F,S]])(implicitcbf:scala.collection.generic.CanBuildFrom[M[kantan.codecs.Result[F,S]],S,M[S]]):kantan.codecs.Result[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/DecodeResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/DecodeResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/DecodeResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/DecodeResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/DecodeResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/DecodeResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/DecodeResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DecodeResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DecodeResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DecodeResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/DecodeResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/DecodeResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/DecodeResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/DecodeResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/DecodeResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/DecodeResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/DecodeResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/DecodeResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/DecodeResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.DeleteResult", "shortDescription" : "", "object" : "kantan\/mongodb\/DeleteResult$.html", "members_class" : [{"label" : "acknowledged", "tail" : ": Boolean", "member" : "kantan.mongodb.DeleteResult.acknowledged", "link" : "kantan\/mongodb\/DeleteResult.html#acknowledged:Boolean", "kind" : "val"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/DeleteResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/DeleteResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/DeleteResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/DeleteResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/DeleteResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/DeleteResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/DeleteResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/DeleteResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/DeleteResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DeleteResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DeleteResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DeleteResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/DeleteResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/DeleteResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/DeleteResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/DeleteResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/DeleteResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/DeleteResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/DeleteResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/DeleteResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/DeleteResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/DeleteResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/DeleteResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/DeleteResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Unacknowledged", "tail" : "", "member" : "kantan.mongodb.DeleteResult.Unacknowledged", "link" : "kantan\/mongodb\/DeleteResult$.html#Unacknowledged", "kind" : "object"}, {"label" : "Acknowledged", "tail" : "", "member" : "kantan.mongodb.DeleteResult.Acknowledged", "link" : "kantan\/mongodb\/DeleteResult$.html#AcknowledgedextendsDeleteResultwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/DeleteResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/DeleteResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/DeleteResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/DeleteResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/DeleteResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/DeleteResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/DeleteResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DeleteResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DeleteResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DeleteResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/DeleteResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/DeleteResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/DeleteResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/DeleteResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/DeleteResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/DeleteResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/DeleteResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/DeleteResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/DeleteResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/DeleteResult.html", "kind" : "class"}, {"name" : "kantan.mongodb.DistinctQuery", "shortDescription" : "", "object" : "kantan\/mongodb\/DistinctQuery$.html", "members_class" : [{"label" : "onIterator", "tail" : "(f: (ResourceIterator[A]) ⇒ ResourceIterator[B]): DistinctQuery[B]", "member" : "kantan.mongodb.DistinctQuery.onIterator", "link" : "kantan\/mongodb\/DistinctQuery.html#onIterator[B](f:kantan.codecs.resource.ResourceIterator[A]=>kantan.codecs.resource.ResourceIterator[B]):kantan.mongodb.DistinctQuery[B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): ResourceIterator[A]", "member" : "kantan.mongodb.DistinctQuery.iterator", "link" : "kantan\/mongodb\/DistinctQuery.html#iterator:kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): DistinctQuery[A]", "member" : "kantan.mongodb.DistinctQuery.maxTime", "link" : "kantan\/mongodb\/DistinctQuery.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.DistinctQuery[A]", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): DistinctQuery[A]", "member" : "kantan.mongodb.DistinctQuery.collation", "link" : "kantan\/mongodb\/DistinctQuery.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.DistinctQuery[A]", "kind" : "def"}, {"label" : "batchSize", "tail" : "(i: Int): DistinctQuery[A]", "member" : "kantan.mongodb.DistinctQuery.batchSize", "link" : "kantan\/mongodb\/DistinctQuery.html#batchSize(i:Int):kantan.mongodb.DistinctQuery[A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(c: Config): DistinctQuery[A]", "member" : "kantan.mongodb.DistinctQuery.withConfig", "link" : "kantan\/mongodb\/DistinctQuery.html#withConfig(c:kantan.mongodb.DistinctQuery.Config):kantan.mongodb.DistinctQuery[A]", "kind" : "def"}, {"label" : "Repr", "tail" : "", "member" : "kantan.mongodb.DistinctQuery.Repr", "link" : "kantan\/mongodb\/DistinctQuery.html#Repr[X]=kantan.mongodb.DistinctQuery[X]", "kind" : "type"}, {"label" : "config", "tail" : ": Config", "member" : "kantan.mongodb.DistinctQuery.config", "link" : "kantan\/mongodb\/DistinctQuery.html#config:kantan.mongodb.DistinctQuery.Config", "kind" : "val"}, {"label" : "reduceRight", "tail" : "(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceRight", "link" : "kantan\/mongodb\/DistinctQuery.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldRight", "link" : "kantan\/mongodb\/DistinctQuery.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceLeft", "link" : "kantan\/mongodb\/DistinctQuery.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(b: B)(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldLeft", "link" : "kantan\/mongodb\/DistinctQuery.html#foldLeft[B](b:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.nonEmpty", "link" : "kantan\/mongodb\/DistinctQuery.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.isEmpty", "link" : "kantan\/mongodb\/DistinctQuery.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) ⇒ Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterable.find", "link" : "kantan\/mongodb\/DistinctQuery.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.exists", "link" : "kantan\/mongodb\/DistinctQuery.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.forall", "link" : "kantan\/mongodb\/DistinctQuery.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U): Unit", "member" : "kantan.codecs.resource.ResourceIterable.foreach", "link" : "kantan\/mongodb\/DistinctQuery.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.withFilter", "link" : "kantan\/mongodb\/DistinctQuery.html#withFilter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.filter", "link" : "kantan\/mongodb\/DistinctQuery.html#filter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.takeWhile", "link" : "kantan\/mongodb\/DistinctQuery.html#takeWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.take", "link" : "kantan\/mongodb\/DistinctQuery.html#take(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.dropWhile", "link" : "kantan\/mongodb\/DistinctQuery.html#dropWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.drop", "link" : "kantan\/mongodb\/DistinctQuery.html#drop(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.collect", "link" : "kantan\/mongodb\/DistinctQuery.html#collect[B](f:PartialFunction[A,B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Repr[B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.flatMap", "link" : "kantan\/mongodb\/DistinctQuery.html#flatMap[B](f:A=>ResourceIterable.this.Repr[B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.map", "link" : "kantan\/mongodb\/DistinctQuery.html#map[B](f:A=>B):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/DistinctQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/DistinctQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/DistinctQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/DistinctQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/DistinctQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/DistinctQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/DistinctQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DistinctQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DistinctQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DistinctQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/DistinctQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/DistinctQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/DistinctQuery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/DistinctQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/DistinctQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/DistinctQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/DistinctQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/DistinctQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/DistinctQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Config", "tail" : "", "member" : "kantan.mongodb.DistinctQuery.Config", "link" : "kantan\/mongodb\/DistinctQuery$.html#Config", "kind" : "object"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.DistinctQuery.Config", "link" : "kantan\/mongodb\/DistinctQuery$.html#ConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/DistinctQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/DistinctQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/DistinctQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/DistinctQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/DistinctQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/DistinctQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/DistinctQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DistinctQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DistinctQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/DistinctQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/DistinctQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/DistinctQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/DistinctQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/DistinctQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/DistinctQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/DistinctQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/DistinctQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/DistinctQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/DistinctQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/DistinctQuery.html", "kind" : "class"}, {"name" : "kantan.mongodb.FindQuery", "shortDescription" : "", "object" : "kantan\/mongodb\/FindQuery$.html", "members_class" : [{"label" : "onIterator", "tail" : "(f: (ResourceIterator[A]) ⇒ ResourceIterator[B]): FindQuery[B]", "member" : "kantan.mongodb.FindQuery.onIterator", "link" : "kantan\/mongodb\/FindQuery.html#onIterator[B](f:kantan.codecs.resource.ResourceIterator[A]=>kantan.codecs.resource.ResourceIterator[B]):kantan.mongodb.FindQuery[B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): ResourceIterator[A]", "member" : "kantan.mongodb.FindQuery.iterator", "link" : "kantan\/mongodb\/FindQuery.html#iterator:kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.drop", "link" : "kantan\/mongodb\/FindQuery.html#drop(n:Int):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.take", "link" : "kantan\/mongodb\/FindQuery.html#take(n:Int):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "sort", "tail" : "(e: E)(arg0: BsonDocumentEncoder[E]): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.sort", "link" : "kantan\/mongodb\/FindQuery.html#sort[E](e:E)(implicitevidence$3:kantan.mongodb.BsonDocumentEncoder[E]):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "skip", "tail" : "(i: Int): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.skip", "link" : "kantan\/mongodb\/FindQuery.html#skip(i:Int):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "projection", "tail" : "(e: E)(arg0: BsonDocumentEncoder[E]): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.projection", "link" : "kantan\/mongodb\/FindQuery.html#projection[E](e:E)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[E]):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "partial", "tail" : "(b: Boolean): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.partial", "link" : "kantan\/mongodb\/FindQuery.html#partial(b:Boolean):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "noCursorTimeout", "tail" : "(b: Boolean): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.noCursorTimeout", "link" : "kantan\/mongodb\/FindQuery.html#noCursorTimeout(b:Boolean):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "modifiers", "tail" : "(e: E)(arg0: BsonDocumentEncoder[E]): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.modifiers", "link" : "kantan\/mongodb\/FindQuery.html#modifiers[E](e:E)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[E]):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.maxTime", "link" : "kantan\/mongodb\/FindQuery.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "maxAwaitTime", "tail" : "(duration: Duration): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.maxAwaitTime", "link" : "kantan\/mongodb\/FindQuery.html#maxAwaitTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "limit", "tail" : "(i: Int): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.limit", "link" : "kantan\/mongodb\/FindQuery.html#limit(i:Int):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "cursorType", "tail" : "(c: CursorType): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.cursorType", "link" : "kantan\/mongodb\/FindQuery.html#cursorType(c:kantan.mongodb.FindQuery.CursorType):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.collation", "link" : "kantan\/mongodb\/FindQuery.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "batchSize", "tail" : "(i: Int): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.batchSize", "link" : "kantan\/mongodb\/FindQuery.html#batchSize(i:Int):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(config: Config): FindQuery[A]", "member" : "kantan.mongodb.FindQuery.withConfig", "link" : "kantan\/mongodb\/FindQuery.html#withConfig(config:kantan.mongodb.FindQuery.Config):kantan.mongodb.FindQuery[A]", "kind" : "def"}, {"label" : "Repr", "tail" : "", "member" : "kantan.mongodb.FindQuery.Repr", "link" : "kantan\/mongodb\/FindQuery.html#Repr[X]=kantan.mongodb.FindQuery[X]", "kind" : "type"}, {"label" : "config", "tail" : ": Config", "member" : "kantan.mongodb.FindQuery.config", "link" : "kantan\/mongodb\/FindQuery.html#config:kantan.mongodb.FindQuery.Config", "kind" : "val"}, {"label" : "reduceRight", "tail" : "(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceRight", "link" : "kantan\/mongodb\/FindQuery.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldRight", "link" : "kantan\/mongodb\/FindQuery.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceLeft", "link" : "kantan\/mongodb\/FindQuery.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(b: B)(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldLeft", "link" : "kantan\/mongodb\/FindQuery.html#foldLeft[B](b:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.nonEmpty", "link" : "kantan\/mongodb\/FindQuery.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.isEmpty", "link" : "kantan\/mongodb\/FindQuery.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) ⇒ Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterable.find", "link" : "kantan\/mongodb\/FindQuery.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.exists", "link" : "kantan\/mongodb\/FindQuery.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.forall", "link" : "kantan\/mongodb\/FindQuery.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U): Unit", "member" : "kantan.codecs.resource.ResourceIterable.foreach", "link" : "kantan\/mongodb\/FindQuery.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.withFilter", "link" : "kantan\/mongodb\/FindQuery.html#withFilter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.filter", "link" : "kantan\/mongodb\/FindQuery.html#filter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.takeWhile", "link" : "kantan\/mongodb\/FindQuery.html#takeWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.dropWhile", "link" : "kantan\/mongodb\/FindQuery.html#dropWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.collect", "link" : "kantan\/mongodb\/FindQuery.html#collect[B](f:PartialFunction[A,B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Repr[B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.flatMap", "link" : "kantan\/mongodb\/FindQuery.html#flatMap[B](f:A=>ResourceIterable.this.Repr[B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.map", "link" : "kantan\/mongodb\/FindQuery.html#map[B](f:A=>B):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/FindQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/FindQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/FindQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/FindQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/FindQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/FindQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/FindQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/FindQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/FindQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/FindQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/FindQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/FindQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/FindQuery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/FindQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/FindQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/FindQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/FindQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/FindQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/FindQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "CursorType", "tail" : "", "member" : "kantan.mongodb.FindQuery.CursorType", "link" : "kantan\/mongodb\/FindQuery$.html#CursorType", "kind" : "object"}, {"label" : "CursorType", "tail" : "", "member" : "kantan.mongodb.FindQuery.CursorType", "link" : "kantan\/mongodb\/FindQuery$.html#CursorTypeextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.FindQuery.Config", "link" : "kantan\/mongodb\/FindQuery$.html#Config", "kind" : "object"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.FindQuery.Config", "link" : "kantan\/mongodb\/FindQuery$.html#ConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/FindQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/FindQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/FindQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/FindQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/FindQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/FindQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/FindQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/FindQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/FindQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/FindQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/FindQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/FindQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/FindQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/FindQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/FindQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/FindQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/FindQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/FindQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/FindQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/FindQuery.html", "kind" : "class"}, {"name" : "kantan.mongodb.GeneratedBsonDocumentCodecs", "members_trait" : [{"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21], arg42: BsonValueEncoder[A22], arg43: BsonValueDecoder[A22]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$969:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$970:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$971:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$972:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$973:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$974:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$975:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$976:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$977:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$978:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$979:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$980:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$981:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$982:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$983:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$984:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$985:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$986:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$987:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$988:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$989:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$990:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$991:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$992:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$993:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$994:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$995:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$996:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$997:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$998:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$999:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$1000:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$1001:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$1002:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$1003:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$1004:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$1005:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$1006:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$1007:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$1008:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$1009:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$1010:kantan.mongodb.BsonValueDecoder[A21],implicitevidence$1011:kantan.mongodb.BsonValueEncoder[A22],implicitevidence$1012:kantan.mongodb.BsonValueDecoder[A22]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$927:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$928:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$929:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$930:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$931:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$932:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$933:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$934:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$935:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$936:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$937:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$938:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$939:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$940:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$941:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$942:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$943:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$944:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$945:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$946:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$947:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$948:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$949:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$950:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$951:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$952:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$953:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$954:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$955:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$956:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$957:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$958:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$959:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$960:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$961:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$962:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$963:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$964:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$965:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$966:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$967:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$968:kantan.mongodb.BsonValueDecoder[A21]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$887:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$888:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$889:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$890:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$891:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$892:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$893:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$894:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$895:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$896:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$897:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$898:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$899:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$900:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$901:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$902:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$903:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$904:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$905:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$906:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$907:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$908:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$909:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$910:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$911:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$912:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$913:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$914:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$915:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$916:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$917:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$918:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$919:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$920:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$921:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$922:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$923:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$924:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$925:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$926:kantan.mongodb.BsonValueDecoder[A20]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$849:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$850:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$851:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$852:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$853:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$854:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$855:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$856:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$857:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$858:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$859:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$860:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$861:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$862:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$863:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$864:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$865:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$866:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$867:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$868:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$869:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$870:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$871:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$872:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$873:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$874:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$875:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$876:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$877:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$878:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$879:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$880:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$881:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$882:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$883:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$884:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$885:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$886:kantan.mongodb.BsonValueDecoder[A19]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$813:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$814:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$815:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$816:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$817:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$818:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$819:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$820:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$821:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$822:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$823:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$824:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$825:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$826:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$827:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$828:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$829:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$830:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$831:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$832:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$833:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$834:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$835:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$836:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$837:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$838:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$839:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$840:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$841:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$842:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$843:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$844:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$845:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$846:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$847:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$848:kantan.mongodb.BsonValueDecoder[A18]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$779:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$780:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$781:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$782:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$783:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$784:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$785:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$786:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$787:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$788:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$789:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$790:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$791:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$792:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$793:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$794:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$795:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$796:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$797:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$798:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$799:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$800:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$801:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$802:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$803:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$804:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$805:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$806:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$807:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$808:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$809:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$810:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$811:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$812:kantan.mongodb.BsonValueDecoder[A17]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$747:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$748:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$749:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$750:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$751:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$752:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$753:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$754:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$755:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$756:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$757:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$758:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$759:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$760:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$761:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$762:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$763:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$764:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$765:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$766:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$767:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$768:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$769:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$770:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$771:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$772:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$773:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$774:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$775:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$776:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$777:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$778:kantan.mongodb.BsonValueDecoder[A16]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$717:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$718:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$719:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$720:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$721:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$722:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$723:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$724:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$725:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$726:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$727:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$728:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$729:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$730:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$731:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$732:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$733:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$734:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$735:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$736:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$737:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$738:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$739:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$740:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$741:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$742:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$743:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$744:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$745:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$746:kantan.mongodb.BsonValueDecoder[A15]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$689:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$690:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$691:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$692:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$693:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$694:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$695:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$696:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$697:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$698:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$699:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$700:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$701:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$702:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$703:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$704:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$705:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$706:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$707:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$708:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$709:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$710:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$711:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$712:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$713:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$714:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$715:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$716:kantan.mongodb.BsonValueDecoder[A14]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$663:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$664:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$665:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$666:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$667:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$668:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$669:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$670:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$671:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$672:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$673:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$674:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$675:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$676:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$677:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$678:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$679:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$680:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$681:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$682:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$683:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$684:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$685:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$686:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$687:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$688:kantan.mongodb.BsonValueDecoder[A13]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$639:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$640:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$641:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$642:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$643:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$644:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$645:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$646:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$647:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$648:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$649:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$650:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$651:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$652:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$653:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$654:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$655:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$656:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$657:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$658:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$659:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$660:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$661:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$662:kantan.mongodb.BsonValueDecoder[A12]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$617:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$618:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$619:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$620:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$621:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$622:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$623:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$624:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$625:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$626:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$627:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$628:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$629:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$630:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$631:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$632:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$633:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$634:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$635:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$636:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$637:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$638:kantan.mongodb.BsonValueDecoder[A11]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$597:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$598:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$599:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$600:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$601:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$602:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$603:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$604:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$605:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$606:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$607:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$608:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$609:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$610:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$611:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$612:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$613:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$614:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$615:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$616:kantan.mongodb.BsonValueDecoder[A10]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$579:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$580:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$581:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$582:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$583:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$584:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$585:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$586:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$587:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$588:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$589:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$590:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$591:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$592:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$593:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$594:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$595:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$596:kantan.mongodb.BsonValueDecoder[A9]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$563:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$564:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$565:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$566:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$567:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$568:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$569:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$570:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$571:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$572:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$573:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$574:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$575:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$576:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$577:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$578:kantan.mongodb.BsonValueDecoder[A8]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (A1, A2, A3, A4, A5, A6, A7) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$549:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$550:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$551:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$552:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$553:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$554:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$555:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$556:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$557:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$558:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$559:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$560:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$561:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$562:kantan.mongodb.BsonValueDecoder[A7]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (A1, A2, A3, A4, A5, A6) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:(A1,A2,A3,A4,A5,A6)=>B)(g:B=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$537:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$538:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$539:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$540:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$541:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$542:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$543:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$544:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$545:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$546:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$547:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$548:kantan.mongodb.BsonValueDecoder[A6]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (A1, A2, A3, A4, A5) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:(A1,A2,A3,A4,A5)=>B)(g:B=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$527:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$528:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$529:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$530:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$531:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$532:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$533:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$534:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$535:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$536:kantan.mongodb.BsonValueDecoder[A5]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (A1, A2, A3, A4) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3, A4)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:(A1,A2,A3,A4)=>B)(g:B=>Option[(A1,A2,A3,A4)])(implicitevidence$519:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$520:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$521:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$522:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$523:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$524:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$525:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$526:kantan.mongodb.BsonValueDecoder[A4]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String, n3: String)(f: (A1, A2, A3) ⇒ B)(g: (B) ⇒ Option[(A1, A2, A3)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:(A1,A2,A3)=>B)(g:B=>Option[(A1,A2,A3)])(implicitevidence$513:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$514:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$515:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$516:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$517:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$518:kantan.mongodb.BsonValueDecoder[A3]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(n1: String, n2: String)(f: (A1, A2) ⇒ B)(g: (B) ⇒ Option[(A1, A2)])(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A1,A2,B](n1:String,n2:String)(f:(A1,A2)=>B)(g:B=>Option[(A1,A2)])(implicitevidence$509:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$510:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$511:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$512:kantan.mongodb.BsonValueDecoder[A2]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "caseCodec", "tail" : "(name: String)(f: (A) ⇒ B)(g: (B) ⇒ Option[A])(arg0: BsonValueEncoder[A], arg1: BsonValueDecoder[A]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.caseCodec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#caseCodec[A,B](name:String)(f:A=>B)(g:B=>Option[A])(implicitevidence$507:kantan.mongodb.BsonValueEncoder[A],implicitevidence$508:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21], arg42: BsonValueEncoder[A22], arg43: BsonValueDecoder[A22]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$463:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$464:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$465:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$466:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$467:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$468:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$469:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$470:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$471:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$472:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$473:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$474:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$475:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$476:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$477:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$478:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$479:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$480:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$481:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$482:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$483:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$484:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$485:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$486:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$487:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$488:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$489:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$490:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$491:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$492:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$493:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$494:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$495:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$496:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$497:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$498:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$499:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$500:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$501:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$502:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$503:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$504:kantan.mongodb.BsonValueDecoder[A21],implicitevidence$505:kantan.mongodb.BsonValueEncoder[A22],implicitevidence$506:kantan.mongodb.BsonValueDecoder[A22]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20], arg40: BsonValueEncoder[A21], arg41: BsonValueDecoder[A21]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$421:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$422:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$423:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$424:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$425:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$426:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$427:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$428:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$429:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$430:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$431:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$432:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$433:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$434:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$435:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$436:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$437:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$438:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$439:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$440:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$441:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$442:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$443:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$444:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$445:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$446:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$447:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$448:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$449:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$450:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$451:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$452:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$453:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$454:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$455:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$456:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$457:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$458:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$459:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$460:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$461:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$462:kantan.mongodb.BsonValueDecoder[A21]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19], arg38: BsonValueEncoder[A20], arg39: BsonValueDecoder[A20]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$381:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$382:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$383:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$384:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$385:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$386:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$387:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$388:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$389:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$390:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$391:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$392:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$393:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$394:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$395:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$396:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$397:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$398:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$399:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$400:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$401:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$402:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$403:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$404:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$405:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$406:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$407:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$408:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$409:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$410:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$411:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$412:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$413:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$414:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$415:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$416:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$417:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$418:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$419:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$420:kantan.mongodb.BsonValueDecoder[A20]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18], arg36: BsonValueEncoder[A19], arg37: BsonValueDecoder[A19]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$343:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$344:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$345:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$346:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$347:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$348:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$349:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$350:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$351:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$352:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$353:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$354:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$355:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$356:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$357:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$358:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$359:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$360:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$361:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$362:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$363:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$364:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$365:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$366:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$367:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$368:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$369:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$370:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$371:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$372:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$373:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$374:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$375:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$376:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$377:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$378:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$379:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$380:kantan.mongodb.BsonValueDecoder[A19]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17], arg34: BsonValueEncoder[A18], arg35: BsonValueDecoder[A18]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$307:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$308:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$309:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$310:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$311:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$312:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$313:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$314:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$315:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$316:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$317:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$318:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$319:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$320:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$321:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$322:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$323:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$324:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$325:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$326:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$327:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$328:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$329:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$330:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$331:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$332:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$333:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$334:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$335:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$336:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$337:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$338:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$339:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$340:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$341:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$342:kantan.mongodb.BsonValueDecoder[A18]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16], arg32: BsonValueEncoder[A17], arg33: BsonValueDecoder[A17]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$273:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$274:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$275:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$276:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$277:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$278:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$279:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$280:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$281:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$282:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$283:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$284:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$285:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$286:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$287:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$288:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$289:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$290:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$291:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$292:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$293:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$294:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$295:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$296:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$297:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$298:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$299:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$300:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$301:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$302:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$303:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$304:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$305:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$306:kantan.mongodb.BsonValueDecoder[A17]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15], arg30: BsonValueEncoder[A16], arg31: BsonValueDecoder[A16]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$241:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$242:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$243:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$244:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$245:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$246:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$247:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$248:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$249:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$250:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$251:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$252:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$253:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$254:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$255:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$256:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$257:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$258:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$259:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$260:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$261:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$262:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$263:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$264:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$265:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$266:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$267:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$268:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$269:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$270:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$271:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$272:kantan.mongodb.BsonValueDecoder[A16]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14], arg28: BsonValueEncoder[A15], arg29: BsonValueDecoder[A15]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$211:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$212:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$213:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$214:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$215:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$216:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$217:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$218:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$219:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$220:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$221:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$222:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$223:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$224:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$225:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$226:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$227:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$228:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$229:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$230:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$231:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$232:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$233:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$234:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$235:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$236:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$237:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$238:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$239:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$240:kantan.mongodb.BsonValueDecoder[A15]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13], arg26: BsonValueEncoder[A14], arg27: BsonValueDecoder[A14]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$183:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$184:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$185:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$186:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$187:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$188:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$189:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$190:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$191:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$192:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$193:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$194:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$195:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$196:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$197:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$198:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$199:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$200:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$201:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$202:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$203:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$204:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$205:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$206:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$207:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$208:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$209:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$210:kantan.mongodb.BsonValueDecoder[A14]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12], arg24: BsonValueEncoder[A13], arg25: BsonValueDecoder[A13]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$157:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$158:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$159:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$160:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$161:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$162:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$163:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$164:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$165:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$166:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$167:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$168:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$169:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$170:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$171:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$172:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$173:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$174:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$175:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$176:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$177:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$178:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$179:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$180:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$181:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$182:kantan.mongodb.BsonValueDecoder[A13]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11], arg22: BsonValueEncoder[A12], arg23: BsonValueDecoder[A12]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$133:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$134:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$135:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$136:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$137:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$138:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$139:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$140:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$141:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$142:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$143:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$144:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$145:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$146:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$147:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$148:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$149:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$150:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$151:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$152:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$153:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$154:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$155:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$156:kantan.mongodb.BsonValueDecoder[A12]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10], arg20: BsonValueEncoder[A11], arg21: BsonValueDecoder[A11]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$111:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$112:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$113:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$114:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$115:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$116:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$117:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$118:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$119:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$120:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$121:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$122:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$123:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$124:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$125:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$126:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$127:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$128:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$129:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$130:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$131:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$132:kantan.mongodb.BsonValueDecoder[A11]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9], arg18: BsonValueEncoder[A10], arg19: BsonValueDecoder[A10]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$91:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$92:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$93:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$94:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$95:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$96:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$97:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$98:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$99:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$100:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$101:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$102:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$103:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$104:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$105:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$106:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$107:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$108:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$109:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$110:kantan.mongodb.BsonValueDecoder[A10]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8], arg16: BsonValueEncoder[A9], arg17: BsonValueDecoder[A9]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$73:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$74:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$75:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$76:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$77:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$78:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$79:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$80:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$81:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$82:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$83:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$84:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$85:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$86:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$87:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$88:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$89:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$90:kantan.mongodb.BsonValueDecoder[A9]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7], arg14: BsonValueEncoder[A8], arg15: BsonValueDecoder[A8]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$57:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$58:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$59:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$60:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$61:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$62:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$63:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$64:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$65:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$66:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$67:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$68:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$69:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$70:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$71:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$72:kantan.mongodb.BsonValueDecoder[A8]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (A1, A2, A3, A4, A5, A6, A7) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6], arg12: BsonValueEncoder[A7], arg13: BsonValueDecoder[A7]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>B)(g:B=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$43:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$44:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$45:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$46:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$47:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$48:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$49:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$50:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$51:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$52:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$53:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$54:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$55:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$56:kantan.mongodb.BsonValueDecoder[A7]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (A1, A2, A3, A4, A5, A6) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5, A6))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5], arg10: BsonValueEncoder[A6], arg11: BsonValueDecoder[A6]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:(A1,A2,A3,A4,A5,A6)=>B)(g:B=>(A1,A2,A3,A4,A5,A6))(implicitevidence$31:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$32:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$33:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$34:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$35:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$36:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$37:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$38:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$39:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$40:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$41:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$42:kantan.mongodb.BsonValueDecoder[A6]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (A1, A2, A3, A4, A5) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4, A5))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4], arg8: BsonValueEncoder[A5], arg9: BsonValueDecoder[A5]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:(A1,A2,A3,A4,A5)=>B)(g:B=>(A1,A2,A3,A4,A5))(implicitevidence$21:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$22:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$23:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$24:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$25:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$26:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$27:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$28:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$29:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$30:kantan.mongodb.BsonValueDecoder[A5]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (A1, A2, A3, A4) ⇒ B)(g: (B) ⇒ (A1, A2, A3, A4))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3], arg6: BsonValueEncoder[A4], arg7: BsonValueDecoder[A4]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:(A1,A2,A3,A4)=>B)(g:B=>(A1,A2,A3,A4))(implicitevidence$13:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$14:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$15:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$16:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$17:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$18:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$19:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$20:kantan.mongodb.BsonValueDecoder[A4]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String, n3: String)(f: (A1, A2, A3) ⇒ B)(g: (B) ⇒ (A1, A2, A3))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2], arg4: BsonValueEncoder[A3], arg5: BsonValueDecoder[A3]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:(A1,A2,A3)=>B)(g:B=>(A1,A2,A3))(implicitevidence$7:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$8:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$9:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$10:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$11:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$12:kantan.mongodb.BsonValueDecoder[A3]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(n1: String, n2: String)(f: (A1, A2) ⇒ B)(g: (B) ⇒ (A1, A2))(arg0: BsonValueEncoder[A1], arg1: BsonValueDecoder[A1], arg2: BsonValueEncoder[A2], arg3: BsonValueDecoder[A2]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A1,A2,B](n1:String,n2:String)(f:(A1,A2)=>B)(g:B=>(A1,A2))(implicitevidence$3:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$4:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$5:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$6:kantan.mongodb.BsonValueDecoder[A2]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "codec", "tail" : "(name: String)(f: (A) ⇒ B)(g: (B) ⇒ A)(arg0: BsonValueEncoder[A], arg1: BsonValueDecoder[A]): BsonDocumentCodec[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentCodecs.codec", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#codec[A,B](name:String)(f:A=>B)(g:B=>A)(implicitevidence$1:kantan.mongodb.BsonValueEncoder[A],implicitevidence$2:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.BsonDocumentCodec[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/GeneratedBsonDocumentCodecs.html", "kind" : "trait"}, {"name" : "kantan.mongodb.GeneratedBsonDocumentDecoders", "members_trait" : [{"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19], arg19: BsonValueDecoder[A20], arg20: BsonValueDecoder[A21], arg21: BsonValueDecoder[A22]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)=>B)(implicitevidence$232:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$233:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$234:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$235:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$236:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$237:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$238:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$239:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$240:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$241:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$242:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$243:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$244:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$245:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$246:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$247:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$248:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$249:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$250:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$251:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$252:kantan.mongodb.BsonValueDecoder[A21],implicitevidence$253:kantan.mongodb.BsonValueDecoder[A22]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19], arg19: BsonValueDecoder[A20], arg20: BsonValueDecoder[A21]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)=>B)(implicitevidence$211:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$212:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$213:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$214:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$215:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$216:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$217:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$218:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$219:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$220:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$221:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$222:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$223:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$224:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$225:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$226:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$227:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$228:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$229:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$230:kantan.mongodb.BsonValueDecoder[A20],implicitevidence$231:kantan.mongodb.BsonValueDecoder[A21]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19], arg19: BsonValueDecoder[A20]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)=>B)(implicitevidence$191:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$192:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$193:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$194:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$195:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$196:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$197:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$198:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$199:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$200:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$201:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$202:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$203:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$204:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$205:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$206:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$207:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$208:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$209:kantan.mongodb.BsonValueDecoder[A19],implicitevidence$210:kantan.mongodb.BsonValueDecoder[A20]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18], arg18: BsonValueDecoder[A19]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)=>B)(implicitevidence$172:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$173:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$174:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$175:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$176:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$177:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$178:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$179:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$180:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$181:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$182:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$183:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$184:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$185:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$186:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$187:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$188:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$189:kantan.mongodb.BsonValueDecoder[A18],implicitevidence$190:kantan.mongodb.BsonValueDecoder[A19]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17], arg17: BsonValueDecoder[A18]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)=>B)(implicitevidence$154:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$155:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$156:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$157:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$158:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$159:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$160:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$161:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$162:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$163:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$164:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$165:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$166:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$167:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$168:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$169:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$170:kantan.mongodb.BsonValueDecoder[A17],implicitevidence$171:kantan.mongodb.BsonValueDecoder[A18]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16], arg16: BsonValueDecoder[A17]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)=>B)(implicitevidence$137:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$138:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$139:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$140:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$141:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$142:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$143:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$144:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$145:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$146:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$147:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$148:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$149:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$150:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$151:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$152:kantan.mongodb.BsonValueDecoder[A16],implicitevidence$153:kantan.mongodb.BsonValueDecoder[A17]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15], arg15: BsonValueDecoder[A16]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)=>B)(implicitevidence$121:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$122:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$123:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$124:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$125:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$126:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$127:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$128:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$129:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$130:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$131:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$132:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$133:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$134:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$135:kantan.mongodb.BsonValueDecoder[A15],implicitevidence$136:kantan.mongodb.BsonValueDecoder[A16]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14], arg14: BsonValueDecoder[A15]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)=>B)(implicitevidence$106:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$107:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$108:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$109:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$110:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$111:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$112:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$113:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$114:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$115:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$116:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$117:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$118:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$119:kantan.mongodb.BsonValueDecoder[A14],implicitevidence$120:kantan.mongodb.BsonValueDecoder[A15]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13], arg13: BsonValueDecoder[A14]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)=>B)(implicitevidence$92:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$93:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$94:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$95:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$96:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$97:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$98:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$99:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$100:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$101:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$102:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$103:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$104:kantan.mongodb.BsonValueDecoder[A13],implicitevidence$105:kantan.mongodb.BsonValueDecoder[A14]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12], arg12: BsonValueDecoder[A13]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)=>B)(implicitevidence$79:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$80:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$81:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$82:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$83:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$84:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$85:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$86:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$87:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$88:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$89:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$90:kantan.mongodb.BsonValueDecoder[A12],implicitevidence$91:kantan.mongodb.BsonValueDecoder[A13]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11], arg11: BsonValueDecoder[A12]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)=>B)(implicitevidence$67:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$68:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$69:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$70:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$71:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$72:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$73:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$74:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$75:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$76:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$77:kantan.mongodb.BsonValueDecoder[A11],implicitevidence$78:kantan.mongodb.BsonValueDecoder[A12]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10], arg10: BsonValueDecoder[A11]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)=>B)(implicitevidence$56:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$57:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$58:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$59:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$60:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$61:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$62:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$63:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$64:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$65:kantan.mongodb.BsonValueDecoder[A10],implicitevidence$66:kantan.mongodb.BsonValueDecoder[A11]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9], arg9: BsonValueDecoder[A10]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)=>B)(implicitevidence$46:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$47:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$48:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$49:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$50:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$51:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$52:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$53:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$54:kantan.mongodb.BsonValueDecoder[A9],implicitevidence$55:kantan.mongodb.BsonValueDecoder[A10]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8, A9) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8], arg8: BsonValueDecoder[A9]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8,A9)=>B)(implicitevidence$37:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$38:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$39:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$40:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$41:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$42:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$43:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$44:kantan.mongodb.BsonValueDecoder[A8],implicitevidence$45:kantan.mongodb.BsonValueDecoder[A9]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (A1, A2, A3, A4, A5, A6, A7, A8) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7], arg7: BsonValueDecoder[A8]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:(A1,A2,A3,A4,A5,A6,A7,A8)=>B)(implicitevidence$29:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$30:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$31:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$32:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$33:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$34:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$35:kantan.mongodb.BsonValueDecoder[A7],implicitevidence$36:kantan.mongodb.BsonValueDecoder[A8]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (A1, A2, A3, A4, A5, A6, A7) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6], arg6: BsonValueDecoder[A7]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:(A1,A2,A3,A4,A5,A6,A7)=>B)(implicitevidence$22:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$23:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$24:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$25:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$26:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$27:kantan.mongodb.BsonValueDecoder[A6],implicitevidence$28:kantan.mongodb.BsonValueDecoder[A7]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (A1, A2, A3, A4, A5, A6) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5], arg5: BsonValueDecoder[A6]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:(A1,A2,A3,A4,A5,A6)=>B)(implicitevidence$16:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$17:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$18:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$19:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$20:kantan.mongodb.BsonValueDecoder[A5],implicitevidence$21:kantan.mongodb.BsonValueDecoder[A6]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (A1, A2, A3, A4, A5) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4], arg4: BsonValueDecoder[A5]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:(A1,A2,A3,A4,A5)=>B)(implicitevidence$11:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$12:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$13:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$14:kantan.mongodb.BsonValueDecoder[A4],implicitevidence$15:kantan.mongodb.BsonValueDecoder[A5]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (A1, A2, A3, A4) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3], arg3: BsonValueDecoder[A4]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:(A1,A2,A3,A4)=>B)(implicitevidence$7:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$8:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$9:kantan.mongodb.BsonValueDecoder[A3],implicitevidence$10:kantan.mongodb.BsonValueDecoder[A4]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String, n3: String)(f: (A1, A2, A3) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2], arg2: BsonValueDecoder[A3]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:(A1,A2,A3)=>B)(implicitevidence$4:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$5:kantan.mongodb.BsonValueDecoder[A2],implicitevidence$6:kantan.mongodb.BsonValueDecoder[A3]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String, n2: String)(f: (A1, A2) ⇒ B)(arg0: BsonValueDecoder[A1], arg1: BsonValueDecoder[A2]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,A2,B](n1:String,n2:String)(f:(A1,A2)=>B)(implicitevidence$2:kantan.mongodb.BsonValueDecoder[A1],implicitevidence$3:kantan.mongodb.BsonValueDecoder[A2]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "decoder", "tail" : "(n1: String)(f: (A1) ⇒ B)(arg0: BsonValueDecoder[A1]): BsonDocumentDecoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentDecoders.decoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#decoder[A1,B](n1:String)(f:A1=>B)(implicitevidence$1:kantan.mongodb.BsonValueDecoder[A1]):kantan.mongodb.BsonDocumentDecoder[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/GeneratedBsonDocumentDecoders.html", "kind" : "trait"}, {"name" : "kantan.mongodb.GeneratedBsonDocumentEncoders", "members_trait" : [{"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21], arg21: BsonValueEncoder[A22]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22)])(implicitevidence$485:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$486:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$487:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$488:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$489:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$490:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$491:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$492:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$493:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$494:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$495:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$496:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$497:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$498:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$499:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$500:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$501:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$502:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$503:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$504:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$505:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$506:kantan.mongodb.BsonValueEncoder[A22]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21)])(implicitevidence$464:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$465:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$466:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$467:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$468:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$469:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$470:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$471:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$472:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$473:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$474:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$475:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$476:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$477:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$478:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$479:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$480:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$481:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$482:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$483:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$484:kantan.mongodb.BsonValueEncoder[A21]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20)])(implicitevidence$444:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$445:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$446:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$447:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$448:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$449:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$450:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$451:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$452:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$453:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$454:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$455:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$456:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$457:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$458:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$459:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$460:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$461:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$462:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$463:kantan.mongodb.BsonValueEncoder[A20]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19)])(implicitevidence$425:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$426:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$427:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$428:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$429:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$430:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$431:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$432:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$433:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$434:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$435:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$436:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$437:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$438:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$439:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$440:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$441:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$442:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$443:kantan.mongodb.BsonValueEncoder[A19]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18)])(implicitevidence$407:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$408:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$409:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$410:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$411:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$412:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$413:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$414:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$415:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$416:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$417:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$418:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$419:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$420:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$421:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$422:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$423:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$424:kantan.mongodb.BsonValueEncoder[A18]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17)])(implicitevidence$390:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$391:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$392:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$393:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$394:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$395:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$396:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$397:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$398:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$399:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$400:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$401:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$402:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$403:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$404:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$405:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$406:kantan.mongodb.BsonValueEncoder[A17]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16)])(implicitevidence$374:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$375:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$376:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$377:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$378:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$379:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$380:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$381:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$382:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$383:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$384:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$385:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$386:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$387:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$388:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$389:kantan.mongodb.BsonValueEncoder[A16]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15)])(implicitevidence$359:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$360:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$361:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$362:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$363:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$364:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$365:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$366:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$367:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$368:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$369:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$370:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$371:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$372:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$373:kantan.mongodb.BsonValueEncoder[A15]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14)])(implicitevidence$345:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$346:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$347:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$348:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$349:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$350:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$351:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$352:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$353:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$354:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$355:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$356:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$357:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$358:kantan.mongodb.BsonValueEncoder[A14]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13)])(implicitevidence$332:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$333:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$334:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$335:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$336:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$337:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$338:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$339:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$340:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$341:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$342:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$343:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$344:kantan.mongodb.BsonValueEncoder[A13]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12)])(implicitevidence$320:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$321:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$322:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$323:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$324:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$325:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$326:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$327:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$328:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$329:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$330:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$331:kantan.mongodb.BsonValueEncoder[A12]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11)])(implicitevidence$309:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$310:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$311:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$312:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$313:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$314:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$315:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$316:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$317:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$318:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$319:kantan.mongodb.BsonValueEncoder[A11]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9, A10)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10)])(implicitevidence$299:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$300:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$301:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$302:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$303:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$304:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$305:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$306:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$307:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$308:kantan.mongodb.BsonValueEncoder[A10]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8, A9)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8,A9)])(implicitevidence$290:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$291:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$292:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$293:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$294:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$295:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$296:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$297:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$298:kantan.mongodb.BsonValueEncoder[A9]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7, A8)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7,A8)])(implicitevidence$282:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$283:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$284:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$285:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$286:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$287:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$288:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$289:kantan.mongodb.BsonValueEncoder[A8]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6, A7)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6,A7)])(implicitevidence$275:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$276:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$277:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$278:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$279:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$280:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$281:kantan.mongodb.BsonValueEncoder[A7]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5, A6)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:B=>Option[(A1,A2,A3,A4,A5,A6)])(implicitevidence$269:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$270:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$271:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$272:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$273:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$274:kantan.mongodb.BsonValueEncoder[A6]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (B) ⇒ Option[(A1, A2, A3, A4, A5)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:B=>Option[(A1,A2,A3,A4,A5)])(implicitevidence$264:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$265:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$266:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$267:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$268:kantan.mongodb.BsonValueEncoder[A5]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (B) ⇒ Option[(A1, A2, A3, A4)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:B=>Option[(A1,A2,A3,A4)])(implicitevidence$260:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$261:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$262:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$263:kantan.mongodb.BsonValueEncoder[A4]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String, n3: String)(f: (B) ⇒ Option[(A1, A2, A3)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:B=>Option[(A1,A2,A3)])(implicitevidence$257:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$258:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$259:kantan.mongodb.BsonValueEncoder[A3]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String, n2: String)(f: (B) ⇒ Option[(A1, A2)])(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,A2,B](n1:String,n2:String)(f:B=>Option[(A1,A2)])(implicitevidence$255:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$256:kantan.mongodb.BsonValueEncoder[A2]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "caseEncoder", "tail" : "(n1: String)(f: (B) ⇒ Option[A1])(arg0: BsonValueEncoder[A1]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.caseEncoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#caseEncoder[A1,B](n1:String)(f:B=>Option[A1])(implicitevidence$254:kantan.mongodb.BsonValueEncoder[A1]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String, n22: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21, A22))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21], arg21: BsonValueEncoder[A22]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String,n22:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,A22))(implicitevidence$232:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$233:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$234:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$235:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$236:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$237:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$238:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$239:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$240:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$241:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$242:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$243:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$244:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$245:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$246:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$247:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$248:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$249:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$250:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$251:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$252:kantan.mongodb.BsonValueEncoder[A21],implicitevidence$253:kantan.mongodb.BsonValueEncoder[A22]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String, n21: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20, A21))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20], arg20: BsonValueEncoder[A21]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String,n21:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,A21))(implicitevidence$211:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$212:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$213:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$214:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$215:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$216:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$217:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$218:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$219:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$220:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$221:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$222:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$223:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$224:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$225:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$226:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$227:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$228:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$229:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$230:kantan.mongodb.BsonValueEncoder[A20],implicitevidence$231:kantan.mongodb.BsonValueEncoder[A21]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String, n20: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19, A20))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19], arg19: BsonValueEncoder[A20]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String,n20:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,A20))(implicitevidence$191:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$192:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$193:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$194:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$195:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$196:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$197:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$198:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$199:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$200:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$201:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$202:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$203:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$204:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$205:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$206:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$207:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$208:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$209:kantan.mongodb.BsonValueEncoder[A19],implicitevidence$210:kantan.mongodb.BsonValueEncoder[A20]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String, n19: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18, A19))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18], arg18: BsonValueEncoder[A19]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String,n19:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,A19))(implicitevidence$172:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$173:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$174:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$175:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$176:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$177:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$178:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$179:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$180:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$181:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$182:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$183:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$184:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$185:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$186:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$187:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$188:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$189:kantan.mongodb.BsonValueEncoder[A18],implicitevidence$190:kantan.mongodb.BsonValueEncoder[A19]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String, n18: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17, A18))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17], arg17: BsonValueEncoder[A18]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String,n18:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,A18))(implicitevidence$154:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$155:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$156:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$157:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$158:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$159:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$160:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$161:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$162:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$163:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$164:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$165:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$166:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$167:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$168:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$169:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$170:kantan.mongodb.BsonValueEncoder[A17],implicitevidence$171:kantan.mongodb.BsonValueEncoder[A18]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String, n17: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16, A17))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16], arg16: BsonValueEncoder[A17]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String,n17:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,A17))(implicitevidence$137:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$138:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$139:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$140:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$141:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$142:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$143:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$144:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$145:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$146:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$147:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$148:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$149:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$150:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$151:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$152:kantan.mongodb.BsonValueEncoder[A16],implicitevidence$153:kantan.mongodb.BsonValueEncoder[A17]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String, n16: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15, A16))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15], arg15: BsonValueEncoder[A16]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String,n16:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,A16))(implicitevidence$121:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$122:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$123:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$124:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$125:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$126:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$127:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$128:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$129:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$130:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$131:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$132:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$133:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$134:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$135:kantan.mongodb.BsonValueEncoder[A15],implicitevidence$136:kantan.mongodb.BsonValueEncoder[A16]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String, n15: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14, A15))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14], arg14: BsonValueEncoder[A15]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String,n15:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,A15))(implicitevidence$106:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$107:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$108:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$109:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$110:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$111:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$112:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$113:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$114:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$115:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$116:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$117:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$118:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$119:kantan.mongodb.BsonValueEncoder[A14],implicitevidence$120:kantan.mongodb.BsonValueEncoder[A15]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String, n14: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13, A14))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13], arg13: BsonValueEncoder[A14]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String,n14:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,A14))(implicitevidence$92:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$93:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$94:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$95:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$96:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$97:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$98:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$99:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$100:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$101:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$102:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$103:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$104:kantan.mongodb.BsonValueEncoder[A13],implicitevidence$105:kantan.mongodb.BsonValueEncoder[A14]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String, n13: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12, A13))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12], arg12: BsonValueEncoder[A13]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String,n13:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,A13))(implicitevidence$79:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$80:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$81:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$82:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$83:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$84:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$85:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$86:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$87:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$88:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$89:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$90:kantan.mongodb.BsonValueEncoder[A12],implicitevidence$91:kantan.mongodb.BsonValueEncoder[A13]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String, n12: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11, A12))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11], arg11: BsonValueEncoder[A12]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String,n12:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,A12))(implicitevidence$67:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$68:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$69:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$70:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$71:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$72:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$73:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$74:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$75:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$76:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$77:kantan.mongodb.BsonValueEncoder[A11],implicitevidence$78:kantan.mongodb.BsonValueEncoder[A12]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String, n11: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10, A11))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10], arg10: BsonValueEncoder[A11]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String,n11:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,A11))(implicitevidence$56:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$57:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$58:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$59:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$60:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$61:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$62:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$63:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$64:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$65:kantan.mongodb.BsonValueEncoder[A10],implicitevidence$66:kantan.mongodb.BsonValueEncoder[A11]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String, n10: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9, A10))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9], arg9: BsonValueEncoder[A10]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,A10,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String,n10:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9,A10))(implicitevidence$46:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$47:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$48:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$49:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$50:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$51:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$52:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$53:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$54:kantan.mongodb.BsonValueEncoder[A9],implicitevidence$55:kantan.mongodb.BsonValueEncoder[A10]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String, n9: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8, A9))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8], arg8: BsonValueEncoder[A9]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,A9,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String,n9:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8,A9))(implicitevidence$37:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$38:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$39:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$40:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$41:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$42:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$43:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$44:kantan.mongodb.BsonValueEncoder[A8],implicitevidence$45:kantan.mongodb.BsonValueEncoder[A9]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String, n8: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7, A8))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7], arg7: BsonValueEncoder[A8]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,A8,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String,n8:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7,A8))(implicitevidence$29:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$30:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$31:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$32:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$33:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$34:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$35:kantan.mongodb.BsonValueEncoder[A7],implicitevidence$36:kantan.mongodb.BsonValueEncoder[A8]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String, n7: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6, A7))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6], arg6: BsonValueEncoder[A7]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,A7,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String,n7:String)(f:B=>(A1,A2,A3,A4,A5,A6,A7))(implicitevidence$22:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$23:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$24:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$25:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$26:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$27:kantan.mongodb.BsonValueEncoder[A6],implicitevidence$28:kantan.mongodb.BsonValueEncoder[A7]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String, n6: String)(f: (B) ⇒ (A1, A2, A3, A4, A5, A6))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5], arg5: BsonValueEncoder[A6]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,A6,B](n1:String,n2:String,n3:String,n4:String,n5:String,n6:String)(f:B=>(A1,A2,A3,A4,A5,A6))(implicitevidence$16:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$17:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$18:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$19:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$20:kantan.mongodb.BsonValueEncoder[A5],implicitevidence$21:kantan.mongodb.BsonValueEncoder[A6]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String, n5: String)(f: (B) ⇒ (A1, A2, A3, A4, A5))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4], arg4: BsonValueEncoder[A5]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,A5,B](n1:String,n2:String,n3:String,n4:String,n5:String)(f:B=>(A1,A2,A3,A4,A5))(implicitevidence$11:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$12:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$13:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$14:kantan.mongodb.BsonValueEncoder[A4],implicitevidence$15:kantan.mongodb.BsonValueEncoder[A5]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String, n4: String)(f: (B) ⇒ (A1, A2, A3, A4))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3], arg3: BsonValueEncoder[A4]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,A4,B](n1:String,n2:String,n3:String,n4:String)(f:B=>(A1,A2,A3,A4))(implicitevidence$7:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$8:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$9:kantan.mongodb.BsonValueEncoder[A3],implicitevidence$10:kantan.mongodb.BsonValueEncoder[A4]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String, n3: String)(f: (B) ⇒ (A1, A2, A3))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2], arg2: BsonValueEncoder[A3]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,A3,B](n1:String,n2:String,n3:String)(f:B=>(A1,A2,A3))(implicitevidence$4:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$5:kantan.mongodb.BsonValueEncoder[A2],implicitevidence$6:kantan.mongodb.BsonValueEncoder[A3]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(n1: String, n2: String)(f: (B) ⇒ (A1, A2))(arg0: BsonValueEncoder[A1], arg1: BsonValueEncoder[A2]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A1,A2,B](n1:String,n2:String)(f:B=>(A1,A2))(implicitevidence$2:kantan.mongodb.BsonValueEncoder[A1],implicitevidence$3:kantan.mongodb.BsonValueEncoder[A2]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "encoder", "tail" : "(name: String)(f: (B) ⇒ A)(arg0: BsonValueEncoder[A]): BsonDocumentEncoder[B]", "member" : "kantan.mongodb.GeneratedBsonDocumentEncoders.encoder", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#encoder[A,B](name:String)(f:B=>A)(implicitevidence$1:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.BsonDocumentEncoder[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/GeneratedBsonDocumentEncoders.html", "kind" : "trait"}, {"name" : "kantan.mongodb.IndexQuery", "shortDescription" : "", "object" : "kantan\/mongodb\/IndexQuery$.html", "members_class" : [{"label" : "onIterator", "tail" : "(f: (ResourceIterator[A]) ⇒ ResourceIterator[B]): IndexQuery[B]", "member" : "kantan.mongodb.IndexQuery.onIterator", "link" : "kantan\/mongodb\/IndexQuery.html#onIterator[B](f:kantan.codecs.resource.ResourceIterator[A]=>kantan.codecs.resource.ResourceIterator[B]):kantan.mongodb.IndexQuery[B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): ResourceIterator[A]", "member" : "kantan.mongodb.IndexQuery.iterator", "link" : "kantan\/mongodb\/IndexQuery.html#iterator:kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): IndexQuery[A]", "member" : "kantan.mongodb.IndexQuery.maxTime", "link" : "kantan\/mongodb\/IndexQuery.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.IndexQuery[A]", "kind" : "def"}, {"label" : "batchSize", "tail" : "(i: Int): IndexQuery[A]", "member" : "kantan.mongodb.IndexQuery.batchSize", "link" : "kantan\/mongodb\/IndexQuery.html#batchSize(i:Int):kantan.mongodb.IndexQuery[A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(conf: Config): IndexQuery[A]", "member" : "kantan.mongodb.IndexQuery.withConfig", "link" : "kantan\/mongodb\/IndexQuery.html#withConfig(conf:kantan.mongodb.IndexQuery.Config):kantan.mongodb.IndexQuery[A]", "kind" : "def"}, {"label" : "Repr", "tail" : "", "member" : "kantan.mongodb.IndexQuery.Repr", "link" : "kantan\/mongodb\/IndexQuery.html#Repr[X]=kantan.mongodb.IndexQuery[X]", "kind" : "type"}, {"label" : "config", "tail" : ": Config", "member" : "kantan.mongodb.IndexQuery.config", "link" : "kantan\/mongodb\/IndexQuery.html#config:kantan.mongodb.IndexQuery.Config", "kind" : "val"}, {"label" : "reduceRight", "tail" : "(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceRight", "link" : "kantan\/mongodb\/IndexQuery.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldRight", "link" : "kantan\/mongodb\/IndexQuery.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceLeft", "link" : "kantan\/mongodb\/IndexQuery.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(b: B)(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldLeft", "link" : "kantan\/mongodb\/IndexQuery.html#foldLeft[B](b:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.nonEmpty", "link" : "kantan\/mongodb\/IndexQuery.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.isEmpty", "link" : "kantan\/mongodb\/IndexQuery.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) ⇒ Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterable.find", "link" : "kantan\/mongodb\/IndexQuery.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.exists", "link" : "kantan\/mongodb\/IndexQuery.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.forall", "link" : "kantan\/mongodb\/IndexQuery.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U): Unit", "member" : "kantan.codecs.resource.ResourceIterable.foreach", "link" : "kantan\/mongodb\/IndexQuery.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.withFilter", "link" : "kantan\/mongodb\/IndexQuery.html#withFilter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.filter", "link" : "kantan\/mongodb\/IndexQuery.html#filter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.takeWhile", "link" : "kantan\/mongodb\/IndexQuery.html#takeWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.take", "link" : "kantan\/mongodb\/IndexQuery.html#take(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.dropWhile", "link" : "kantan\/mongodb\/IndexQuery.html#dropWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.drop", "link" : "kantan\/mongodb\/IndexQuery.html#drop(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.collect", "link" : "kantan\/mongodb\/IndexQuery.html#collect[B](f:PartialFunction[A,B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Repr[B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.flatMap", "link" : "kantan\/mongodb\/IndexQuery.html#flatMap[B](f:A=>ResourceIterable.this.Repr[B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.map", "link" : "kantan\/mongodb\/IndexQuery.html#map[B](f:A=>B):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/IndexQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/IndexQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/IndexQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/IndexQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/IndexQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/IndexQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/IndexQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/IndexQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/IndexQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/IndexQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/IndexQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/IndexQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/IndexQuery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/IndexQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/IndexQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/IndexQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/IndexQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/IndexQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/IndexQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Config", "tail" : "", "member" : "kantan.mongodb.IndexQuery.Config", "link" : "kantan\/mongodb\/IndexQuery$.html#Config", "kind" : "object"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.IndexQuery.Config", "link" : "kantan\/mongodb\/IndexQuery$.html#ConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/IndexQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/IndexQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/IndexQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/IndexQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/IndexQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/IndexQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/IndexQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/IndexQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/IndexQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/IndexQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/IndexQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/IndexQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/IndexQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/IndexQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/IndexQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/IndexQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/IndexQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/IndexQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/IndexQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/IndexQuery.html", "kind" : "class"}, {"name" : "kantan.mongodb.LowPriorityBsonValueDecoderInstances", "members_trait" : [{"label" : "decoderFromDocument", "tail" : "(arg0: BsonDocumentDecoder[A]): BsonValueDecoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueDecoderInstances.decoderFromDocument", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#decoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.BsonValueDecoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/LowPriorityBsonValueDecoderInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.LowPriorityBsonValueEncoderInstances", "members_trait" : [{"label" : "encoderFromDocument", "tail" : "(arg0: BsonDocumentEncoder[A]): BsonValueEncoder[A]", "member" : "kantan.mongodb.LowPriorityBsonValueEncoderInstances.encoderFromDocument", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#encoderFromDocument[A](implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.BsonValueEncoder[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/LowPriorityBsonValueEncoderInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.MapReduceQuery", "shortDescription" : "", "object" : "kantan\/mongodb\/MapReduceQuery$.html", "members_class" : [{"label" : "onIterator", "tail" : "(f: (ResourceIterator[A]) ⇒ ResourceIterator[B]): MapReduceQuery[B]", "member" : "kantan.mongodb.MapReduceQuery.onIterator", "link" : "kantan\/mongodb\/MapReduceQuery.html#onIterator[B](f:kantan.codecs.resource.ResourceIterator[A]=>kantan.codecs.resource.ResourceIterator[B]):kantan.mongodb.MapReduceQuery[B]", "kind" : "def"}, {"label" : "iterator", "tail" : "(): ResourceIterator[A]", "member" : "kantan.mongodb.MapReduceQuery.iterator", "link" : "kantan\/mongodb\/MapReduceQuery.html#iterator:kantan.codecs.resource.ResourceIterator[A]", "kind" : "def"}, {"label" : "take", "tail" : "(n: Int): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.take", "link" : "kantan\/mongodb\/MapReduceQuery.html#take(n:Int):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.maxTime", "link" : "kantan\/mongodb\/MapReduceQuery.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "limit", "tail" : "(i: Int): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.limit", "link" : "kantan\/mongodb\/MapReduceQuery.html#limit(i:Int):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "toCollection", "tail" : "(): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.toCollection", "link" : "kantan\/mongodb\/MapReduceQuery.html#toCollection:kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "verbose", "tail" : "(b: Boolean): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.verbose", "link" : "kantan\/mongodb\/MapReduceQuery.html#verbose(b:Boolean):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.collation", "link" : "kantan\/mongodb\/MapReduceQuery.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "sort", "tail" : "(sort: S)(arg0: BsonDocumentEncoder[S]): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.sort", "link" : "kantan\/mongodb\/MapReduceQuery.html#sort[S](sort:S)(implicitevidence$3:kantan.mongodb.BsonDocumentEncoder[S]):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "sharded", "tail" : "(s: Boolean): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.sharded", "link" : "kantan\/mongodb\/MapReduceQuery.html#sharded(s:Boolean):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "scope", "tail" : "(scope: S)(arg0: BsonDocumentEncoder[S]): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.scope", "link" : "kantan\/mongodb\/MapReduceQuery.html#scope[S](scope:S)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[S]):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "nonAtomic", "tail" : "(b: Boolean): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.nonAtomic", "link" : "kantan\/mongodb\/MapReduceQuery.html#nonAtomic(b:Boolean):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "jsMode", "tail" : "(m: Boolean): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.jsMode", "link" : "kantan\/mongodb\/MapReduceQuery.html#jsMode(m:Boolean):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "finalizeFunction", "tail" : "(s: String): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.finalizeFunction", "link" : "kantan\/mongodb\/MapReduceQuery.html#finalizeFunction(s:String):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(filter: F)(arg0: BsonDocumentEncoder[F]): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.filter", "link" : "kantan\/mongodb\/MapReduceQuery.html#filter[F](filter:F)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[F]):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "databaseName", "tail" : "(n: String): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.databaseName", "link" : "kantan\/mongodb\/MapReduceQuery.html#databaseName(n:String):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "collectionName", "tail" : "(n: String): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.collectionName", "link" : "kantan\/mongodb\/MapReduceQuery.html#collectionName(n:String):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "batchSize", "tail" : "(i: Int): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.batchSize", "link" : "kantan\/mongodb\/MapReduceQuery.html#batchSize(i:Int):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "action", "tail" : "(a: Action): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.action", "link" : "kantan\/mongodb\/MapReduceQuery.html#action(a:kantan.mongodb.MapReduceQuery.Action):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "withConfig", "tail" : "(conf: Config): MapReduceQuery[A]", "member" : "kantan.mongodb.MapReduceQuery.withConfig", "link" : "kantan\/mongodb\/MapReduceQuery.html#withConfig(conf:kantan.mongodb.MapReduceQuery.Config):kantan.mongodb.MapReduceQuery[A]", "kind" : "def"}, {"label" : "Repr", "tail" : "", "member" : "kantan.mongodb.MapReduceQuery.Repr", "link" : "kantan\/mongodb\/MapReduceQuery.html#Repr[X]=kantan.mongodb.MapReduceQuery[X]", "kind" : "type"}, {"label" : "config", "tail" : ": Config", "member" : "kantan.mongodb.MapReduceQuery.config", "link" : "kantan\/mongodb\/MapReduceQuery.html#config:kantan.mongodb.MapReduceQuery.Config", "kind" : "val"}, {"label" : "reduceRight", "tail" : "(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceRight", "link" : "kantan\/mongodb\/MapReduceQuery.html#reduceRight[B>:A](op:(A,B)=>B):B", "kind" : "def"}, {"label" : "foldRight", "tail" : "(z: B)(op: (A, B) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldRight", "link" : "kantan\/mongodb\/MapReduceQuery.html#foldRight[B](z:B)(op:(A,B)=>B):B", "kind" : "def"}, {"label" : "reduceLeft", "tail" : "(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.reduceLeft", "link" : "kantan\/mongodb\/MapReduceQuery.html#reduceLeft[B>:A](op:(B,A)=>B):B", "kind" : "def"}, {"label" : "foldLeft", "tail" : "(b: B)(op: (B, A) ⇒ B): B", "member" : "kantan.codecs.resource.ResourceIterable.foldLeft", "link" : "kantan\/mongodb\/MapReduceQuery.html#foldLeft[B](b:B)(op:(B,A)=>B):B", "kind" : "def"}, {"label" : "nonEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.nonEmpty", "link" : "kantan\/mongodb\/MapReduceQuery.html#nonEmpty:Boolean", "kind" : "def"}, {"label" : "isEmpty", "tail" : "(): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.isEmpty", "link" : "kantan\/mongodb\/MapReduceQuery.html#isEmpty:Boolean", "kind" : "def"}, {"label" : "find", "tail" : "(p: (A) ⇒ Boolean): Option[A]", "member" : "kantan.codecs.resource.ResourceIterable.find", "link" : "kantan\/mongodb\/MapReduceQuery.html#find(p:A=>Boolean):Option[A]", "kind" : "def"}, {"label" : "exists", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.exists", "link" : "kantan\/mongodb\/MapReduceQuery.html#exists(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "forall", "tail" : "(p: (A) ⇒ Boolean): Boolean", "member" : "kantan.codecs.resource.ResourceIterable.forall", "link" : "kantan\/mongodb\/MapReduceQuery.html#forall(p:A=>Boolean):Boolean", "kind" : "def"}, {"label" : "foreach", "tail" : "(f: (A) ⇒ U): Unit", "member" : "kantan.codecs.resource.ResourceIterable.foreach", "link" : "kantan\/mongodb\/MapReduceQuery.html#foreach[U](f:A=>U):Unit", "kind" : "def"}, {"label" : "withFilter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.withFilter", "link" : "kantan\/mongodb\/MapReduceQuery.html#withFilter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "filter", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.filter", "link" : "kantan\/mongodb\/MapReduceQuery.html#filter(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "takeWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.takeWhile", "link" : "kantan\/mongodb\/MapReduceQuery.html#takeWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "dropWhile", "tail" : "(p: (A) ⇒ Boolean): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.dropWhile", "link" : "kantan\/mongodb\/MapReduceQuery.html#dropWhile(p:A=>Boolean):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(n: Int): Repr[A]", "member" : "kantan.codecs.resource.ResourceIterable.drop", "link" : "kantan\/mongodb\/MapReduceQuery.html#drop(n:Int):ResourceIterable.this.Repr[A]", "kind" : "def"}, {"label" : "collect", "tail" : "(f: PartialFunction[A, B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.collect", "link" : "kantan\/mongodb\/MapReduceQuery.html#collect[B](f:PartialFunction[A,B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "flatMap", "tail" : "(f: (A) ⇒ Repr[B]): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.flatMap", "link" : "kantan\/mongodb\/MapReduceQuery.html#flatMap[B](f:A=>ResourceIterable.this.Repr[B]):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "map", "tail" : "(f: (A) ⇒ B): Repr[B]", "member" : "kantan.codecs.resource.ResourceIterable.map", "link" : "kantan\/mongodb\/MapReduceQuery.html#map[B](f:A=>B):ResourceIterable.this.Repr[B]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MapReduceQuery.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MapReduceQuery.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MapReduceQuery.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MapReduceQuery.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MapReduceQuery.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MapReduceQuery.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MapReduceQuery.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MapReduceQuery.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MapReduceQuery.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MapReduceQuery.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MapReduceQuery.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MapReduceQuery.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MapReduceQuery.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MapReduceQuery.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MapReduceQuery.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MapReduceQuery.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MapReduceQuery.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MapReduceQuery.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MapReduceQuery.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "Action", "tail" : "", "member" : "kantan.mongodb.MapReduceQuery.Action", "link" : "kantan\/mongodb\/MapReduceQuery$.html#Action", "kind" : "object"}, {"label" : "Action", "tail" : "", "member" : "kantan.mongodb.MapReduceQuery.Action", "link" : "kantan\/mongodb\/MapReduceQuery$.html#ActionextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.MapReduceQuery.Config", "link" : "kantan\/mongodb\/MapReduceQuery$.html#Config", "kind" : "object"}, {"label" : "Config", "tail" : "", "member" : "kantan.mongodb.MapReduceQuery.Config", "link" : "kantan\/mongodb\/MapReduceQuery$.html#ConfigextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MapReduceQuery$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MapReduceQuery$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MapReduceQuery$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MapReduceQuery$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MapReduceQuery$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MapReduceQuery$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MapReduceQuery$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MapReduceQuery$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MapReduceQuery$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MapReduceQuery$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MapReduceQuery$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MapReduceQuery$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MapReduceQuery$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MapReduceQuery$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MapReduceQuery$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MapReduceQuery$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MapReduceQuery$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MapReduceQuery$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MapReduceQuery$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/MapReduceQuery.html", "kind" : "class"}, {"name" : "kantan.mongodb.MongoClient", "shortDescription" : "", "object" : "kantan\/mongodb\/MongoClient$.html", "members_class" : [{"label" : "close", "tail" : "(): Unit", "member" : "kantan.mongodb.MongoClient.close", "link" : "kantan\/mongodb\/MongoClient.html#close():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.mongodb.MongoClient.toString", "link" : "kantan\/mongodb\/MongoClient.html#toString():String", "kind" : "def"}, {"label" : "databaseNames", "tail" : "(): DatabaseQuery[MongoResult[String]]", "member" : "kantan.mongodb.MongoClient.databaseNames", "link" : "kantan\/mongodb\/MongoClient.html#databaseNames():kantan.mongodb.DatabaseQuery[kantan.mongodb.MongoResult[String]]", "kind" : "def"}, {"label" : "databases", "tail" : "(): DatabaseQuery[MongoResult[DatabaseInfo]]", "member" : "kantan.mongodb.MongoClient.databases", "link" : "kantan\/mongodb\/MongoClient.html#databases():kantan.mongodb.DatabaseQuery[kantan.mongodb.MongoResult[kantan.mongodb.MongoClient.DatabaseInfo]]", "kind" : "def"}, {"label" : "rawDatabases", "tail" : "()(arg0: BsonDocumentDecoder[D]): DatabaseQuery[MongoResult[D]]", "member" : "kantan.mongodb.MongoClient.rawDatabases", "link" : "kantan\/mongodb\/MongoClient.html#rawDatabases[D]()(implicitevidence$1:kantan.mongodb.BsonDocumentDecoder[D]):kantan.mongodb.DatabaseQuery[kantan.mongodb.MongoResult[D]]", "kind" : "def"}, {"label" : "database", "tail" : "(name: String): MongoDatabase", "member" : "kantan.mongodb.MongoClient.database", "link" : "kantan\/mongodb\/MongoClient.html#database(name:String):kantan.mongodb.MongoDatabase", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoClient.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoClient.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoClient.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoClient.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoClient.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoClient.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoClient.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoClient.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoClient.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoClient.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoClient.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoClient.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoClient.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoClient.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoClient.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoClient.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoClient.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoClient.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "DatabaseInfo", "tail" : "", "member" : "kantan.mongodb.MongoClient.DatabaseInfo", "link" : "kantan\/mongodb\/MongoClient$.html#DatabaseInfo", "kind" : "object"}, {"label" : "DatabaseInfo", "tail" : "", "member" : "kantan.mongodb.MongoClient.DatabaseInfo", "link" : "kantan\/mongodb\/MongoClient$.html#DatabaseInfoextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "fromUri", "tail" : "(uri: String): Option[MongoClient]", "member" : "kantan.mongodb.MongoClient.fromUri", "link" : "kantan\/mongodb\/MongoClient$.html#fromUri(uri:String):Option[kantan.mongodb.MongoClient]", "kind" : "def"}, {"label" : "fromAddressWith", "tail" : "(cluster: List[ServerAddress], creds: MongoCredential*)(options: MongoClientOptions): MongoClient", "member" : "kantan.mongodb.MongoClient.fromAddressWith", "link" : "kantan\/mongodb\/MongoClient$.html#fromAddressWith(cluster:List[kantan.mongodb.ServerAddress],creds:kantan.mongodb.MongoCredential*)(options:kantan.mongodb.MongoClientOptions):kantan.mongodb.MongoClient", "kind" : "def"}, {"label" : "fromAddress", "tail" : "(cluster: List[ServerAddress], creds: MongoCredential*): MongoClient", "member" : "kantan.mongodb.MongoClient.fromAddress", "link" : "kantan\/mongodb\/MongoClient$.html#fromAddress(cluster:List[kantan.mongodb.ServerAddress],creds:kantan.mongodb.MongoCredential*):kantan.mongodb.MongoClient", "kind" : "def"}, {"label" : "localWith", "tail" : "(creds: MongoCredential*)(options: MongoClientOptions): MongoClient", "member" : "kantan.mongodb.MongoClient.localWith", "link" : "kantan\/mongodb\/MongoClient$.html#localWith(creds:kantan.mongodb.MongoCredential*)(options:kantan.mongodb.MongoClientOptions):kantan.mongodb.MongoClient", "kind" : "def"}, {"label" : "local", "tail" : "(creds: MongoCredential*): MongoClient", "member" : "kantan.mongodb.MongoClient.local", "link" : "kantan\/mongodb\/MongoClient$.html#local(creds:kantan.mongodb.MongoCredential*):kantan.mongodb.MongoClient", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoClient$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoClient$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoClient$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoClient$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoClient$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoClient$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoClient$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoClient$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoClient$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoClient$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoClient$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoClient$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MongoClient$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoClient$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoClient$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoClient$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoClient$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoClient$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoClient$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/MongoClient.html", "kind" : "class"}, {"name" : "kantan.mongodb.MongoCollection", "shortDescription" : "", "members_class" : [{"label" : "withWriteConcern", "tail" : "(concern: WriteConcern): MongoCollection[A]", "member" : "kantan.mongodb.MongoCollection.withWriteConcern", "link" : "kantan\/mongodb\/MongoCollection.html#withWriteConcern(concern:kantan.mongodb.WriteConcern):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "withReadPreference", "tail" : "(Preference: ReadPreference): MongoCollection[A]", "member" : "kantan.mongodb.MongoCollection.withReadPreference", "link" : "kantan\/mongodb\/MongoCollection.html#withReadPreference(Preference:kantan.mongodb.ReadPreference):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "withReadConcern", "tail" : "(concern: ReadConcern): MongoCollection[A]", "member" : "kantan.mongodb.MongoCollection.withReadConcern", "link" : "kantan\/mongodb\/MongoCollection.html#withReadConcern(concern:kantan.mongodb.ReadConcern):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "readPreference", "tail" : "(): ReadPreference", "member" : "kantan.mongodb.MongoCollection.readPreference", "link" : "kantan\/mongodb\/MongoCollection.html#readPreference:kantan.mongodb.ReadPreference", "kind" : "def"}, {"label" : "writeConcern", "tail" : "(): WriteConcern", "member" : "kantan.mongodb.MongoCollection.writeConcern", "link" : "kantan\/mongodb\/MongoCollection.html#writeConcern:kantan.mongodb.WriteConcern", "kind" : "def"}, {"label" : "readConcern", "tail" : "(): ReadConcern", "member" : "kantan.mongodb.MongoCollection.readConcern", "link" : "kantan\/mongodb\/MongoCollection.html#readConcern:kantan.mongodb.ReadConcern", "kind" : "def"}, {"label" : "renameWith", "tail" : "(namespace: MongoNamespace)(options: RenameCollectionOpts): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.renameWith", "link" : "kantan\/mongodb\/MongoCollection.html#renameWith(namespace:kantan.mongodb.MongoNamespace)(options:kantan.mongodb.options.RenameCollectionOpts):kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "rename", "tail" : "(namespace: MongoNamespace): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.rename", "link" : "kantan\/mongodb\/MongoCollection.html#rename(namespace:kantan.mongodb.MongoNamespace):kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "namespace", "tail" : "(): MongoNamespace", "member" : "kantan.mongodb.MongoCollection.namespace", "link" : "kantan\/mongodb\/MongoCollection.html#namespace:kantan.mongodb.MongoNamespace", "kind" : "def"}, {"label" : "drop", "tail" : "(): Unit", "member" : "kantan.mongodb.MongoCollection.drop", "link" : "kantan\/mongodb\/MongoCollection.html#drop():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.mongodb.MongoCollection.toString", "link" : "kantan\/mongodb\/MongoCollection.html#toString():String", "kind" : "def"}, {"label" : "insertOne", "tail" : "(document: A)(ea: BsonDocumentEncoder[A]): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.insertOne", "link" : "kantan\/mongodb\/MongoCollection.html#insertOne(document:A)(implicitea:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "insertManyWith", "tail" : "(documents: A*)(options: InsertManyOpts)(ea: BsonDocumentEncoder[A]): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.insertManyWith", "link" : "kantan\/mongodb\/MongoCollection.html#insertManyWith(documents:A*)(options:kantan.mongodb.options.InsertManyOpts)(implicitea:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "insertMany", "tail" : "(documents: A*)(ea: BsonDocumentEncoder[A]): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.insertMany", "link" : "kantan\/mongodb\/MongoCollection.html#insertMany(documents:A*)(implicitea:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "findOneAndDeleteWith", "tail" : "(filter: F)(options: FindOneAndDeleteOpts)(arg0: BsonDocumentEncoder[F], da: BsonDocumentDecoder[A]): MongoResult[A]", "member" : "kantan.mongodb.MongoCollection.findOneAndDeleteWith", "link" : "kantan\/mongodb\/MongoCollection.html#findOneAndDeleteWith[F](filter:F)(options:kantan.mongodb.options.FindOneAndDeleteOpts)(implicitevidence$34:kantan.mongodb.BsonDocumentEncoder[F],implicitda:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.MongoResult[A]", "kind" : "def"}, {"label" : "findOneAndDelete", "tail" : "(filter: F)(arg0: BsonDocumentEncoder[F], da: BsonDocumentDecoder[A]): MongoResult[A]", "member" : "kantan.mongodb.MongoCollection.findOneAndDelete", "link" : "kantan\/mongodb\/MongoCollection.html#findOneAndDelete[F](filter:F)(implicitevidence$33:kantan.mongodb.BsonDocumentEncoder[F],implicitda:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.MongoResult[A]", "kind" : "def"}, {"label" : "deleteOneWith", "tail" : "(filter: F)(options: DeleteOpts)(arg0: BsonDocumentEncoder[F]): MongoResult[DeleteResult]", "member" : "kantan.mongodb.MongoCollection.deleteOneWith", "link" : "kantan\/mongodb\/MongoCollection.html#deleteOneWith[F](filter:F)(options:kantan.mongodb.options.DeleteOpts)(implicitevidence$32:kantan.mongodb.BsonDocumentEncoder[F]):kantan.mongodb.MongoResult[kantan.mongodb.DeleteResult]", "kind" : "def"}, {"label" : "deleteOne", "tail" : "(filter: F)(arg0: BsonDocumentEncoder[F]): MongoResult[DeleteResult]", "member" : "kantan.mongodb.MongoCollection.deleteOne", "link" : "kantan\/mongodb\/MongoCollection.html#deleteOne[F](filter:F)(implicitevidence$31:kantan.mongodb.BsonDocumentEncoder[F]):kantan.mongodb.MongoResult[kantan.mongodb.DeleteResult]", "kind" : "def"}, {"label" : "deleteManyWith", "tail" : "(filter: F)(options: DeleteOpts)(arg0: BsonDocumentEncoder[F]): MongoResult[DeleteResult]", "member" : "kantan.mongodb.MongoCollection.deleteManyWith", "link" : "kantan\/mongodb\/MongoCollection.html#deleteManyWith[F](filter:F)(options:kantan.mongodb.options.DeleteOpts)(implicitevidence$30:kantan.mongodb.BsonDocumentEncoder[F]):kantan.mongodb.MongoResult[kantan.mongodb.DeleteResult]", "kind" : "def"}, {"label" : "deleteAllWith", "tail" : "(options: DeleteOpts): MongoResult[DeleteResult]", "member" : "kantan.mongodb.MongoCollection.deleteAllWith", "link" : "kantan\/mongodb\/MongoCollection.html#deleteAllWith(options:kantan.mongodb.options.DeleteOpts):kantan.mongodb.MongoResult[kantan.mongodb.DeleteResult]", "kind" : "def"}, {"label" : "deleteAll", "tail" : "(): MongoResult[DeleteResult]", "member" : "kantan.mongodb.MongoCollection.deleteAll", "link" : "kantan\/mongodb\/MongoCollection.html#deleteAll():kantan.mongodb.MongoResult[kantan.mongodb.DeleteResult]", "kind" : "def"}, {"label" : "replaceOneWith", "tail" : "(filter: F, rep: A)(options: UpdateOpts)(arg0: BsonDocumentEncoder[F], ea: BsonDocumentEncoder[A]): MongoResult[UpdateResult]", "member" : "kantan.mongodb.MongoCollection.replaceOneWith", "link" : "kantan\/mongodb\/MongoCollection.html#replaceOneWith[F](filter:F,rep:A)(options:kantan.mongodb.options.UpdateOpts)(implicitevidence$29:kantan.mongodb.BsonDocumentEncoder[F],implicitea:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.MongoResult[kantan.mongodb.UpdateResult]", "kind" : "def"}, {"label" : "replaceOne", "tail" : "(filter: F, rep: A)(arg0: BsonDocumentEncoder[F], ea: BsonDocumentEncoder[A]): MongoResult[UpdateResult]", "member" : "kantan.mongodb.MongoCollection.replaceOne", "link" : "kantan\/mongodb\/MongoCollection.html#replaceOne[F](filter:F,rep:A)(implicitevidence$28:kantan.mongodb.BsonDocumentEncoder[F],implicitea:kantan.mongodb.BsonDocumentEncoder[A]):kantan.mongodb.MongoResult[kantan.mongodb.UpdateResult]", "kind" : "def"}, {"label" : "findOneAndReplaceWith", "tail" : "(filter: F, replacement: A)(options: FindOneAndReplaceOpts)(arg0: BsonDocumentEncoder[F], da: BsonDocumentDecoder[A], ea: BsonDocumentEncoder[A]): Option[MongoResult[A]]", "member" : "kantan.mongodb.MongoCollection.findOneAndReplaceWith", "link" : "kantan\/mongodb\/MongoCollection.html#findOneAndReplaceWith[F](filter:F,replacement:A)(options:kantan.mongodb.options.FindOneAndReplaceOpts)(implicitevidence$27:kantan.mongodb.BsonDocumentEncoder[F],implicitda:kantan.mongodb.BsonDocumentDecoder[A],implicitea:kantan.mongodb.BsonDocumentEncoder[A]):Option[kantan.mongodb.MongoResult[A]]", "kind" : "def"}, {"label" : "findOneAndReplace", "tail" : "(filter: F, replacement: A)(arg0: BsonDocumentEncoder[F], da: BsonDocumentDecoder[A], ea: BsonDocumentEncoder[A]): Option[MongoResult[A]]", "member" : "kantan.mongodb.MongoCollection.findOneAndReplace", "link" : "kantan\/mongodb\/MongoCollection.html#findOneAndReplace[F](filter:F,replacement:A)(implicitevidence$26:kantan.mongodb.BsonDocumentEncoder[F],implicitda:kantan.mongodb.BsonDocumentDecoder[A],implicitea:kantan.mongodb.BsonDocumentEncoder[A]):Option[kantan.mongodb.MongoResult[A]]", "kind" : "def"}, {"label" : "updateManyWith", "tail" : "(filter: F, update: U)(options: UpdateOpts)(arg0: BsonDocumentEncoder[F], arg1: BsonDocumentEncoder[U]): MongoResult[UpdateResult]", "member" : "kantan.mongodb.MongoCollection.updateManyWith", "link" : "kantan\/mongodb\/MongoCollection.html#updateManyWith[F,U](filter:F,update:U)(options:kantan.mongodb.options.UpdateOpts)(implicitevidence$24:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$25:kantan.mongodb.BsonDocumentEncoder[U]):kantan.mongodb.MongoResult[kantan.mongodb.UpdateResult]", "kind" : "def"}, {"label" : "updateMany", "tail" : "(filter: F, update: U)(arg0: BsonDocumentEncoder[F], arg1: BsonDocumentEncoder[U]): MongoResult[UpdateResult]", "member" : "kantan.mongodb.MongoCollection.updateMany", "link" : "kantan\/mongodb\/MongoCollection.html#updateMany[F,U](filter:F,update:U)(implicitevidence$22:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$23:kantan.mongodb.BsonDocumentEncoder[U]):kantan.mongodb.MongoResult[kantan.mongodb.UpdateResult]", "kind" : "def"}, {"label" : "updateOneWith", "tail" : "(filter: F, update: U)(options: UpdateOpts)(arg0: BsonDocumentEncoder[F], arg1: BsonDocumentEncoder[U]): MongoResult[UpdateResult]", "member" : "kantan.mongodb.MongoCollection.updateOneWith", "link" : "kantan\/mongodb\/MongoCollection.html#updateOneWith[F,U](filter:F,update:U)(options:kantan.mongodb.options.UpdateOpts)(implicitevidence$20:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$21:kantan.mongodb.BsonDocumentEncoder[U]):kantan.mongodb.MongoResult[kantan.mongodb.UpdateResult]", "kind" : "def"}, {"label" : "updateOne", "tail" : "(filter: F, update: U)(arg0: BsonDocumentEncoder[F], arg1: BsonDocumentEncoder[U]): MongoResult[UpdateResult]", "member" : "kantan.mongodb.MongoCollection.updateOne", "link" : "kantan\/mongodb\/MongoCollection.html#updateOne[F,U](filter:F,update:U)(implicitevidence$18:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$19:kantan.mongodb.BsonDocumentEncoder[U]):kantan.mongodb.MongoResult[kantan.mongodb.UpdateResult]", "kind" : "def"}, {"label" : "findOneAndUpdateWith", "tail" : "(filter: F, update: U)(options: FindOneAndUpdateOpts)(arg0: BsonDocumentEncoder[F], arg1: BsonDocumentEncoder[U], da: BsonDocumentDecoder[A]): MongoResult[A]", "member" : "kantan.mongodb.MongoCollection.findOneAndUpdateWith", "link" : "kantan\/mongodb\/MongoCollection.html#findOneAndUpdateWith[F,U](filter:F,update:U)(options:kantan.mongodb.options.FindOneAndUpdateOpts)(implicitevidence$16:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$17:kantan.mongodb.BsonDocumentEncoder[U],implicitda:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.MongoResult[A]", "kind" : "def"}, {"label" : "findOneAndUpdate", "tail" : "(filter: F, update: U)(arg0: BsonDocumentEncoder[F], arg1: BsonDocumentEncoder[U], da: BsonDocumentDecoder[A]): MongoResult[A]", "member" : "kantan.mongodb.MongoCollection.findOneAndUpdate", "link" : "kantan\/mongodb\/MongoCollection.html#findOneAndUpdate[F,U](filter:F,update:U)(implicitevidence$14:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$15:kantan.mongodb.BsonDocumentEncoder[U],implicitda:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.MongoResult[A]", "kind" : "def"}, {"label" : "find", "tail" : "()(da: BsonDocumentDecoder[A]): FindQuery[MongoResult[A]]", "member" : "kantan.mongodb.MongoCollection.find", "link" : "kantan\/mongodb\/MongoCollection.html#find()(implicitda:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.FindQuery[kantan.mongodb.MongoResult[A]]", "kind" : "def"}, {"label" : "find", "tail" : "(filter: F)(arg0: BsonDocumentEncoder[F], da: BsonDocumentDecoder[A]): FindQuery[MongoResult[A]]", "member" : "kantan.mongodb.MongoCollection.find", "link" : "kantan\/mongodb\/MongoCollection.html#find[F](filter:F)(implicitevidence$13:kantan.mongodb.BsonDocumentEncoder[F],implicitda:kantan.mongodb.BsonDocumentDecoder[A]):kantan.mongodb.FindQuery[kantan.mongodb.MongoResult[A]]", "kind" : "def"}, {"label" : "dropIndexes", "tail" : "(): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.dropIndexes", "link" : "kantan\/mongodb\/MongoCollection.html#dropIndexes():kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "dropIndex", "tail" : "(name: String): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.dropIndex", "link" : "kantan\/mongodb\/MongoCollection.html#dropIndex(name:String):kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "dropIndex", "tail" : "(keys: I)(arg0: BsonDocumentEncoder[I]): MongoResult[Unit]", "member" : "kantan.mongodb.MongoCollection.dropIndex", "link" : "kantan\/mongodb\/MongoCollection.html#dropIndex[I](keys:I)(implicitevidence$12:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.MongoResult[Unit]", "kind" : "def"}, {"label" : "indexes", "tail" : "()(arg0: BsonDocumentDecoder[O]): IndexQuery[MongoResult[O]]", "member" : "kantan.mongodb.MongoCollection.indexes", "link" : "kantan\/mongodb\/MongoCollection.html#indexes[O]()(implicitevidence$11:kantan.mongodb.BsonDocumentDecoder[O]):kantan.mongodb.IndexQuery[kantan.mongodb.MongoResult[O]]", "kind" : "def"}, {"label" : "createIndexWith", "tail" : "(keys: I)(options: IndexOpts)(arg0: BsonDocumentEncoder[I]): MongoResult[String]", "member" : "kantan.mongodb.MongoCollection.createIndexWith", "link" : "kantan\/mongodb\/MongoCollection.html#createIndexWith[I](keys:I)(options:kantan.mongodb.options.IndexOpts)(implicitevidence$10:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.MongoResult[String]", "kind" : "def"}, {"label" : "createIndex", "tail" : "(keys: I)(arg0: BsonDocumentEncoder[I]): MongoResult[String]", "member" : "kantan.mongodb.MongoCollection.createIndex", "link" : "kantan\/mongodb\/MongoCollection.html#createIndex[I](keys:I)(implicitevidence$9:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.MongoResult[String]", "kind" : "def"}, {"label" : "distinct", "tail" : "(field: String, filter: F)(arg0: BsonDocumentEncoder[F], arg1: BsonValueDecoder[O]): DistinctQuery[MongoResult[O]]", "member" : "kantan.mongodb.MongoCollection.distinct", "link" : "kantan\/mongodb\/MongoCollection.html#distinct[F,O](field:String,filter:F)(implicitevidence$7:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$8:kantan.mongodb.BsonValueDecoder[O]):kantan.mongodb.DistinctQuery[kantan.mongodb.MongoResult[O]]", "kind" : "def"}, {"label" : "distinct", "tail" : "(field: String)(arg0: BsonValueDecoder[O]): DistinctQuery[MongoResult[O]]", "member" : "kantan.mongodb.MongoCollection.distinct", "link" : "kantan\/mongodb\/MongoCollection.html#distinct[O](field:String)(implicitevidence$6:kantan.mongodb.BsonValueDecoder[O]):kantan.mongodb.DistinctQuery[kantan.mongodb.MongoResult[O]]", "kind" : "def"}, {"label" : "mapReduce", "tail" : "(map: String, reduce: String)(arg0: BsonDocumentDecoder[O]): MapReduceQuery[MongoResult[O]]", "member" : "kantan.mongodb.MongoCollection.mapReduce", "link" : "kantan\/mongodb\/MongoCollection.html#mapReduce[O](map:String,reduce:String)(implicitevidence$5:kantan.mongodb.BsonDocumentDecoder[O]):kantan.mongodb.MapReduceQuery[kantan.mongodb.MongoResult[O]]", "kind" : "def"}, {"label" : "aggregate", "tail" : "(filters: F*)(arg0: BsonDocumentEncoder[F], arg1: BsonDocumentDecoder[O]): AggregateQuery[MongoResult[O]]", "member" : "kantan.mongodb.MongoCollection.aggregate", "link" : "kantan\/mongodb\/MongoCollection.html#aggregate[F,O](filters:F*)(implicitevidence$3:kantan.mongodb.BsonDocumentEncoder[F],implicitevidence$4:kantan.mongodb.BsonDocumentDecoder[O]):kantan.mongodb.AggregateQuery[kantan.mongodb.MongoResult[O]]", "kind" : "def"}, {"label" : "bulkWriteWith", "tail" : "(operations: BulkOperation*)(options: BulkWriteOpts): MongoResult[BulkResult]", "member" : "kantan.mongodb.MongoCollection.bulkWriteWith", "link" : "kantan\/mongodb\/MongoCollection.html#bulkWriteWith(operations:kantan.mongodb.BulkOperation*)(options:kantan.mongodb.options.BulkWriteOpts):kantan.mongodb.MongoResult[kantan.mongodb.BulkResult]", "kind" : "def"}, {"label" : "bulkWrite", "tail" : "(operations: BulkOperation*): MongoResult[BulkResult]", "member" : "kantan.mongodb.MongoCollection.bulkWrite", "link" : "kantan\/mongodb\/MongoCollection.html#bulkWrite(operations:kantan.mongodb.BulkOperation*):kantan.mongodb.MongoResult[kantan.mongodb.BulkResult]", "kind" : "def"}, {"label" : "countWith", "tail" : "(filter: I)(options: CountOpts)(arg0: BsonDocumentEncoder[I]): MongoResult[Long]", "member" : "kantan.mongodb.MongoCollection.countWith", "link" : "kantan\/mongodb\/MongoCollection.html#countWith[I](filter:I)(options:kantan.mongodb.options.CountOpts)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.MongoResult[Long]", "kind" : "def"}, {"label" : "count", "tail" : "(filter: I)(arg0: BsonDocumentEncoder[I]): MongoResult[Long]", "member" : "kantan.mongodb.MongoCollection.count", "link" : "kantan\/mongodb\/MongoCollection.html#count[I](filter:I)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.MongoResult[Long]", "kind" : "def"}, {"label" : "count", "tail" : "(): MongoResult[Long]", "member" : "kantan.mongodb.MongoCollection.count", "link" : "kantan\/mongodb\/MongoCollection.html#count():kantan.mongodb.MongoResult[Long]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoCollection.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoCollection.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoCollection.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoCollection.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoCollection.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoCollection.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoCollection.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoCollection.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoCollection.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoCollection.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoCollection.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoCollection.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoCollection.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoCollection.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoCollection.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoCollection.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoCollection.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoCollection.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/MongoCollection.html", "kind" : "class"}, {"name" : "kantan.mongodb.MongoDatabase", "shortDescription" : "", "object" : "kantan\/mongodb\/MongoDatabase$.html", "members_class" : [{"label" : "withWriteConcern", "tail" : "(concern: WriteConcern): MongoDatabase", "member" : "kantan.mongodb.MongoDatabase.withWriteConcern", "link" : "kantan\/mongodb\/MongoDatabase.html#withWriteConcern(concern:kantan.mongodb.WriteConcern):kantan.mongodb.MongoDatabase", "kind" : "def"}, {"label" : "withReadPreference", "tail" : "(pref: ReadPreference): MongoDatabase", "member" : "kantan.mongodb.MongoDatabase.withReadPreference", "link" : "kantan\/mongodb\/MongoDatabase.html#withReadPreference(pref:kantan.mongodb.ReadPreference):kantan.mongodb.MongoDatabase", "kind" : "def"}, {"label" : "withReadConcern", "tail" : "(concern: ReadConcern): MongoDatabase", "member" : "kantan.mongodb.MongoDatabase.withReadConcern", "link" : "kantan\/mongodb\/MongoDatabase.html#withReadConcern(concern:kantan.mongodb.ReadConcern):kantan.mongodb.MongoDatabase", "kind" : "def"}, {"label" : "writeConcern", "tail" : "(): WriteConcern", "member" : "kantan.mongodb.MongoDatabase.writeConcern", "link" : "kantan\/mongodb\/MongoDatabase.html#writeConcern:kantan.mongodb.WriteConcern", "kind" : "def"}, {"label" : "readPreference", "tail" : "(): ReadPreference", "member" : "kantan.mongodb.MongoDatabase.readPreference", "link" : "kantan\/mongodb\/MongoDatabase.html#readPreference:kantan.mongodb.ReadPreference", "kind" : "def"}, {"label" : "readConcern", "tail" : "(): ReadConcern", "member" : "kantan.mongodb.MongoDatabase.readConcern", "link" : "kantan\/mongodb\/MongoDatabase.html#readConcern:kantan.mongodb.ReadConcern", "kind" : "def"}, {"label" : "runCommandWith", "tail" : "(command: I)(p: ReadPreference)(arg0: BsonDocumentEncoder[I], arg1: BsonDocumentDecoder[O]): DecodeResult[O]", "member" : "kantan.mongodb.MongoDatabase.runCommandWith", "link" : "kantan\/mongodb\/MongoDatabase.html#runCommandWith[I,O](command:I)(p:kantan.mongodb.ReadPreference)(implicitevidence$7:kantan.mongodb.BsonDocumentEncoder[I],implicitevidence$8:kantan.mongodb.BsonDocumentDecoder[O]):kantan.mongodb.DecodeResult[O]", "kind" : "def"}, {"label" : "runCommand", "tail" : "(command: I)(arg0: BsonDocumentEncoder[I], arg1: BsonDocumentDecoder[O]): DecodeResult[O]", "member" : "kantan.mongodb.MongoDatabase.runCommand", "link" : "kantan\/mongodb\/MongoDatabase.html#runCommand[I,O](command:I)(implicitevidence$5:kantan.mongodb.BsonDocumentEncoder[I],implicitevidence$6:kantan.mongodb.BsonDocumentDecoder[O]):kantan.mongodb.DecodeResult[O]", "kind" : "def"}, {"label" : "collection", "tail" : "(name: String): MongoCollection[A]", "member" : "kantan.mongodb.MongoDatabase.collection", "link" : "kantan\/mongodb\/MongoDatabase.html#collection[A](name:String):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "collectionNames", "tail" : "(): Iterator[String]", "member" : "kantan.mongodb.MongoDatabase.collectionNames", "link" : "kantan\/mongodb\/MongoDatabase.html#collectionNames():Iterator[String]", "kind" : "def"}, {"label" : "collections", "tail" : "(): Iterator[CollectionInfo]", "member" : "kantan.mongodb.MongoDatabase.collections", "link" : "kantan\/mongodb\/MongoDatabase.html#collections():Iterator[kantan.mongodb.MongoDatabase.CollectionInfo]", "kind" : "def"}, {"label" : "createViewWith", "tail" : "(name: String, on: String, pipeline: I*)(options: CreateViewOpts)(arg0: BsonDocumentEncoder[I]): MongoCollection[A]", "member" : "kantan.mongodb.MongoDatabase.createViewWith", "link" : "kantan\/mongodb\/MongoDatabase.html#createViewWith[I,A](name:String,on:String,pipeline:I*)(options:kantan.mongodb.options.CreateViewOpts)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "createView", "tail" : "(name: String, on: String, pipeline: I*)(arg0: BsonDocumentEncoder[I]): MongoCollection[A]", "member" : "kantan.mongodb.MongoDatabase.createView", "link" : "kantan\/mongodb\/MongoDatabase.html#createView[I,A](name:String,on:String,pipeline:I*)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "createCollectionWith", "tail" : "(name: String)(options: CreateCollectionOpts): MongoCollection[A]", "member" : "kantan.mongodb.MongoDatabase.createCollectionWith", "link" : "kantan\/mongodb\/MongoDatabase.html#createCollectionWith[A](name:String)(options:kantan.mongodb.options.CreateCollectionOpts):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "createCollection", "tail" : "(name: String): MongoCollection[A]", "member" : "kantan.mongodb.MongoDatabase.createCollection", "link" : "kantan\/mongodb\/MongoDatabase.html#createCollection[A](name:String):kantan.mongodb.MongoCollection[A]", "kind" : "def"}, {"label" : "drop", "tail" : "(): Unit", "member" : "kantan.mongodb.MongoDatabase.drop", "link" : "kantan\/mongodb\/MongoDatabase.html#drop():Unit", "kind" : "def"}, {"label" : "toString", "tail" : "(): String", "member" : "kantan.mongodb.MongoDatabase.toString", "link" : "kantan\/mongodb\/MongoDatabase.html#toString():String", "kind" : "def"}, {"label" : "name", "tail" : "(): String", "member" : "kantan.mongodb.MongoDatabase.name", "link" : "kantan\/mongodb\/MongoDatabase.html#name:String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoDatabase.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoDatabase.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoDatabase.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoDatabase.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoDatabase.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoDatabase.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoDatabase.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoDatabase.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoDatabase.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoDatabase.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoDatabase.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoDatabase.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoDatabase.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoDatabase.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoDatabase.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoDatabase.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoDatabase.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoDatabase.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_object" : [{"label" : "infoDecoder", "tail" : ": BsonDocumentDecoder[CollectionInfo]", "member" : "kantan.mongodb.MongoDatabase.infoDecoder", "link" : "kantan\/mongodb\/MongoDatabase$.html#infoDecoder:kantan.mongodb.BsonDocumentDecoder[kantan.mongodb.MongoDatabase.CollectionInfo]", "kind" : "implicit val"}, {"label" : "CollectionInfo", "tail" : "", "member" : "kantan.mongodb.MongoDatabase.CollectionInfo", "link" : "kantan\/mongodb\/MongoDatabase$.html#CollectionInfoextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoDatabase$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoDatabase$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoDatabase$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoDatabase$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoDatabase$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoDatabase$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoDatabase$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoDatabase$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoDatabase$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoDatabase$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoDatabase$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoDatabase$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MongoDatabase$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoDatabase$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoDatabase$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoDatabase$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoDatabase$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoDatabase$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoDatabase$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/MongoDatabase.html", "kind" : "class"}, {"name" : "kantan.mongodb.MongoError", "shortDescription" : "", "object" : "kantan\/mongodb\/MongoError$.html", "members_class" : [{"label" : "toString", "tail" : "(): String", "member" : "kantan.codecs.error.Error.toString", "link" : "kantan\/mongodb\/MongoError.html#toString():String", "kind" : "final def"}, {"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/MongoError.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/MongoError.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "getSuppressed", "tail" : "(): Array[Throwable]", "member" : "java.lang.Throwable.getSuppressed", "link" : "kantan\/mongodb\/MongoError.html#getSuppressed():Array[Throwable]", "kind" : "final def"}, {"label" : "addSuppressed", "tail" : "(arg0: Throwable): Unit", "member" : "java.lang.Throwable.addSuppressed", "link" : "kantan\/mongodb\/MongoError.html#addSuppressed(x$1:Throwable):Unit", "kind" : "final def"}, {"label" : "setStackTrace", "tail" : "(arg0: Array[StackTraceElement]): Unit", "member" : "java.lang.Throwable.setStackTrace", "link" : "kantan\/mongodb\/MongoError.html#setStackTrace(x$1:Array[StackTraceElement]):Unit", "kind" : "def"}, {"label" : "getStackTrace", "tail" : "(): Array[StackTraceElement]", "member" : "java.lang.Throwable.getStackTrace", "link" : "kantan\/mongodb\/MongoError.html#getStackTrace():Array[StackTraceElement]", "kind" : "def"}, {"label" : "fillInStackTrace", "tail" : "(): Throwable", "member" : "java.lang.Throwable.fillInStackTrace", "link" : "kantan\/mongodb\/MongoError.html#fillInStackTrace():Throwable", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintWriter): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/mongodb\/MongoError.html#printStackTrace(x$1:java.io.PrintWriter):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(arg0: PrintStream): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/mongodb\/MongoError.html#printStackTrace(x$1:java.io.PrintStream):Unit", "kind" : "def"}, {"label" : "printStackTrace", "tail" : "(): Unit", "member" : "java.lang.Throwable.printStackTrace", "link" : "kantan\/mongodb\/MongoError.html#printStackTrace():Unit", "kind" : "def"}, {"label" : "initCause", "tail" : "(arg0: Throwable): Throwable", "member" : "java.lang.Throwable.initCause", "link" : "kantan\/mongodb\/MongoError.html#initCause(x$1:Throwable):Throwable", "kind" : "def"}, {"label" : "getCause", "tail" : "(): Throwable", "member" : "java.lang.Throwable.getCause", "link" : "kantan\/mongodb\/MongoError.html#getCause():Throwable", "kind" : "def"}, {"label" : "getLocalizedMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getLocalizedMessage", "link" : "kantan\/mongodb\/MongoError.html#getLocalizedMessage():String", "kind" : "def"}, {"label" : "getMessage", "tail" : "(): String", "member" : "java.lang.Throwable.getMessage", "link" : "kantan\/mongodb\/MongoError.html#getMessage():String", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoError.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoError.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoError.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoError.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoError.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoError.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoError.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoError.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoError.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoError.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoError.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoError.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoError.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoError.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoError.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoError.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoError.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoError.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/MongoError.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/MongoError.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/MongoError.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Socket", "tail" : "", "member" : "kantan.mongodb.MongoError.Socket", "link" : "kantan\/mongodb\/MongoError$.html#Socket", "kind" : "object"}, {"label" : "Socket", "tail" : "", "member" : "kantan.mongodb.MongoError.Socket", "link" : "kantan\/mongodb\/MongoError$.html#SocketextendsMongoError", "kind" : "sealed abstract class"}, {"label" : "Server", "tail" : "", "member" : "kantan.mongodb.MongoError.Server", "link" : "kantan\/mongodb\/MongoError$.html#Server", "kind" : "object"}, {"label" : "Server", "tail" : "", "member" : "kantan.mongodb.MongoError.Server", "link" : "kantan\/mongodb\/MongoError$.html#ServerextendsMongoError", "kind" : "sealed abstract class"}, {"label" : "Client", "tail" : "", "member" : "kantan.mongodb.MongoError.Client", "link" : "kantan\/mongodb\/MongoError$.html#Client", "kind" : "object"}, {"label" : "Client", "tail" : "", "member" : "kantan.mongodb.MongoError.Client", "link" : "kantan\/mongodb\/MongoError$.html#ClientextendsMongoError", "kind" : "sealed abstract class"}, {"label" : "Interrupted", "tail" : "", "member" : "kantan.mongodb.MongoError.Interrupted", "link" : "kantan\/mongodb\/MongoError$.html#Interrupted", "kind" : "object"}, {"label" : "Interrupted", "tail" : "", "member" : "kantan.mongodb.MongoError.Interrupted", "link" : "kantan\/mongodb\/MongoError$.html#InterruptedextendsMongoErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Internal", "tail" : "", "member" : "kantan.mongodb.MongoError.Internal", "link" : "kantan\/mongodb\/MongoError$.html#Internal", "kind" : "object"}, {"label" : "Internal", "tail" : "", "member" : "kantan.mongodb.MongoError.Internal", "link" : "kantan\/mongodb\/MongoError$.html#InternalextendsMongoErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "IncompatibleDriver", "tail" : "", "member" : "kantan.mongodb.MongoError.IncompatibleDriver", "link" : "kantan\/mongodb\/MongoError$.html#IncompatibleDriver", "kind" : "object"}, {"label" : "IncompatibleDriver", "tail" : "", "member" : "kantan.mongodb.MongoError.IncompatibleDriver", "link" : "kantan\/mongodb\/MongoError$.html#IncompatibleDriverextendsMongoErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "GridFS", "tail" : "", "member" : "kantan.mongodb.MongoError.GridFS", "link" : "kantan\/mongodb\/MongoError$.html#GridFS", "kind" : "object"}, {"label" : "GridFS", "tail" : "", "member" : "kantan.mongodb.MongoError.GridFS", "link" : "kantan\/mongodb\/MongoError$.html#GridFSextendsMongoErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "ExecutionTimeout", "tail" : "", "member" : "kantan.mongodb.MongoError.ExecutionTimeout", "link" : "kantan\/mongodb\/MongoError$.html#ExecutionTimeout", "kind" : "object"}, {"label" : "ExecutionTimeout", "tail" : "", "member" : "kantan.mongodb.MongoError.ExecutionTimeout", "link" : "kantan\/mongodb\/MongoError$.html#ExecutionTimeoutextendsMongoErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Decode", "tail" : "", "member" : "kantan.mongodb.MongoError.Decode", "link" : "kantan\/mongodb\/MongoError$.html#Decode", "kind" : "object"}, {"label" : "Decode", "tail" : "", "member" : "kantan.mongodb.MongoError.Decode", "link" : "kantan\/mongodb\/MongoError$.html#DecodeextendsMongoErrorwithProductwithSerializable", "kind" : "sealed case class"}, {"label" : "Unknown", "tail" : "", "member" : "kantan.mongodb.MongoError.Unknown", "link" : "kantan\/mongodb\/MongoError$.html#Unknown", "kind" : "object"}, {"label" : "Unknown", "tail" : "", "member" : "kantan.mongodb.MongoError.Unknown", "link" : "kantan\/mongodb\/MongoError$.html#UnknownextendsMongoErrorwithProductwithSerializable", "kind" : "final case class"}, {"label" : "apply", "tail" : "(exception: MongoException): MongoError", "member" : "kantan.mongodb.MongoError.apply", "link" : "kantan\/mongodb\/MongoError$.html#apply(exception:com.mongodb.MongoException):kantan.mongodb.MongoError", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoError$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoError$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoError$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoError$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoError$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoError$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoError$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoError$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoError$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoError$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoError$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoError$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MongoError$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoError$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoError$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoError$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoError$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoError$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoError$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/MongoError.html", "kind" : "class"}, {"name" : "kantan.mongodb.MongoErrorCompanion", "shortDescription" : "", "members_class" : [{"label" : "isError", "tail" : ": IsError[T]", "member" : "kantan.mongodb.MongoErrorCompanion.isError", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#isError:kantan.codecs.error.IsError[T]", "kind" : "implicit val"}, {"member" : "kantan.mongodb.MongoErrorCompanion#<init>", "error" : "unsupported entity"}, {"label" : "apply", "tail" : "(msg: String): T", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#apply(msg:String):T", "kind" : "def"}, {"label" : "apply", "tail" : "(cause: Throwable): T", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#apply(cause:Throwable):T", "kind" : "def"}, {"label" : "apply", "tail" : "(msg: String, cause: Throwable): T", "member" : "kantan.codecs.error.ErrorCompanion.apply", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#apply(msg:String,cause:Throwable):T", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoErrorCompanion.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoErrorCompanion.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/MongoErrorCompanion.html", "kind" : "class"}, {"name" : "kantan.mongodb.MongoNamespace", "shortDescription" : "", "object" : "kantan\/mongodb\/MongoNamespace$.html", "members_object" : [{"label" : "apply", "tail" : "(fullName: String): MongoNamespace", "member" : "kantan.mongodb.MongoNamespace.apply", "link" : "kantan\/mongodb\/MongoNamespace$.html#apply(fullName:String):kantan.mongodb.MongoNamespace", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoNamespace$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoNamespace$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoNamespace$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoNamespace$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoNamespace$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoNamespace$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoNamespace$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoNamespace$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoNamespace$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoNamespace$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoNamespace$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoNamespace$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MongoNamespace$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoNamespace$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoNamespace$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoNamespace$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoNamespace$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoNamespace$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoNamespace$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.mongodb.MongoNamespace#<init>", "error" : "unsupported entity"}, {"label" : "collection", "tail" : ": String", "member" : "kantan.mongodb.MongoNamespace.collection", "link" : "kantan\/mongodb\/MongoNamespace.html#collection:String", "kind" : "val"}, {"label" : "db", "tail" : ": String", "member" : "kantan.mongodb.MongoNamespace.db", "link" : "kantan\/mongodb\/MongoNamespace.html#db:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoNamespace.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoNamespace.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoNamespace.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoNamespace.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoNamespace.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoNamespace.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoNamespace.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoNamespace.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoNamespace.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoNamespace.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoNamespace.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoNamespace.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoNamespace.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoNamespace.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoNamespace.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoNamespace.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/MongoNamespace.html", "kind" : "case class"}, {"name" : "kantan.mongodb.MongoResult", "shortDescription" : "", "object" : "kantan\/mongodb\/MongoResult$.html", "members_object" : [{"label" : "fromThrowable", "tail" : "(t: Throwable): MongoError", "member" : "kantan.mongodb.MongoResult.fromThrowable", "link" : "kantan\/mongodb\/MongoResult$.html#fromThrowable(t:Throwable):kantan.mongodb.MongoError", "kind" : "def"}, {"label" : "fromTry", "tail" : "(t: Try[S]): Result[MongoError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.fromTry", "link" : "kantan\/mongodb\/MongoResult$.html#fromTry[S](t:scala.util.Try[S]):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "apply", "tail" : "(s: ⇒ S): Result[MongoError, S]", "member" : "kantan.codecs.ResultCompanion.WithDefault.apply", "link" : "kantan\/mongodb\/MongoResult$.html#apply[S](s:=>S):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "fromOption", "tail" : "(o: Option[S], f: ⇒ MongoError): Result[MongoError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.fromOption", "link" : "kantan\/mongodb\/MongoResult$.html#fromOption[S](o:Option[S],f:=>F):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "fromEither", "tail" : "(e: Either[MongoError, S]): Result[MongoError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.fromEither", "link" : "kantan\/mongodb\/MongoResult$.html#fromEither[S](e:Either[F,S]):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "failure", "tail" : "(f: MongoError): Result[MongoError, Nothing]", "member" : "kantan.codecs.ResultCompanion.Simple.failure", "link" : "kantan\/mongodb\/MongoResult$.html#failure(f:F):kantan.codecs.Result[F,Nothing]", "kind" : "def"}, {"label" : "success", "tail" : "(s: S): Result[MongoError, S]", "member" : "kantan.codecs.ResultCompanion.Simple.success", "link" : "kantan\/mongodb\/MongoResult$.html#success[S](s:S):kantan.codecs.Result[F,S]", "kind" : "def"}, {"label" : "sequence", "tail" : "(rs: M[Result[MongoError, S]])(cbf: CanBuildFrom[M[Result[MongoError, S]], S, M[S]]): Result[MongoError, M[S]]", "member" : "kantan.codecs.ResultCompanion.Simple.sequence", "link" : "kantan\/mongodb\/MongoResult$.html#sequence[S,M<:<?>](rs:M[kantan.codecs.Result[F,S]])(implicitcbf:scala.collection.generic.CanBuildFrom[M[kantan.codecs.Result[F,S]],S,M[S]]):kantan.codecs.Result[F,M[S]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/MongoResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/MongoResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/MongoResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/MongoResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/MongoResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/MongoResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/MongoResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/MongoResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/MongoResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/MongoResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/MongoResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/MongoResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/MongoResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/MongoResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/MongoResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/MongoResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/MongoResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.ReadConcern", "shortDescription" : "", "object" : "kantan\/mongodb\/ReadConcern$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/ReadConcern.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/ReadConcern.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ReadConcern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ReadConcern.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ReadConcern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ReadConcern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ReadConcern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ReadConcern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ReadConcern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ReadConcern.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ReadConcern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ReadConcern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ReadConcern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ReadConcern.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ReadConcern.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ReadConcern.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ReadConcern.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ReadConcern.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ReadConcern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ReadConcern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ReadConcern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/ReadConcern.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/ReadConcern.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/ReadConcern.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "values", "tail" : "(): List[ReadConcern]", "member" : "kantan.mongodb.ReadConcern.values", "link" : "kantan\/mongodb\/ReadConcern$.html#values:List[kantan.mongodb.ReadConcern]", "kind" : "def"}, {"label" : "Majority", "tail" : "", "member" : "kantan.mongodb.ReadConcern.Majority", "link" : "kantan\/mongodb\/ReadConcern$.html#Majority", "kind" : "object"}, {"label" : "Local", "tail" : "", "member" : "kantan.mongodb.ReadConcern.Local", "link" : "kantan\/mongodb\/ReadConcern$.html#Local", "kind" : "object"}, {"label" : "Linearizable", "tail" : "", "member" : "kantan.mongodb.ReadConcern.Linearizable", "link" : "kantan\/mongodb\/ReadConcern$.html#Linearizable", "kind" : "object"}, {"label" : "Default", "tail" : "", "member" : "kantan.mongodb.ReadConcern.Default", "link" : "kantan\/mongodb\/ReadConcern$.html#Default", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ReadConcern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ReadConcern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ReadConcern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ReadConcern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ReadConcern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ReadConcern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ReadConcern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ReadConcern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ReadConcern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ReadConcern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ReadConcern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ReadConcern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ReadConcern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ReadConcern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ReadConcern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ReadConcern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ReadConcern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ReadConcern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ReadConcern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/ReadConcern.html", "kind" : "class"}, {"name" : "kantan.mongodb.ServerAddress", "shortDescription" : "", "object" : "kantan\/mongodb\/ServerAddress$.html", "members_object" : [{"label" : "apply", "tail" : "(host: String): ServerAddress", "member" : "kantan.mongodb.ServerAddress.apply", "link" : "kantan\/mongodb\/ServerAddress$.html#apply(host:String):kantan.mongodb.ServerAddress", "kind" : "def"}, {"label" : "default", "tail" : "(): ServerAddress", "member" : "kantan.mongodb.ServerAddress.default", "link" : "kantan\/mongodb\/ServerAddress$.html#default:kantan.mongodb.ServerAddress", "kind" : "def"}, {"label" : "defaultPort", "tail" : ": Int", "member" : "kantan.mongodb.ServerAddress.defaultPort", "link" : "kantan\/mongodb\/ServerAddress$.html#defaultPort:Int", "kind" : "val"}, {"label" : "defaultHost", "tail" : ": String", "member" : "kantan.mongodb.ServerAddress.defaultHost", "link" : "kantan\/mongodb\/ServerAddress$.html#defaultHost:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ServerAddress$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ServerAddress$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ServerAddress$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ServerAddress$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ServerAddress$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ServerAddress$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ServerAddress$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ServerAddress$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ServerAddress$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ServerAddress$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ServerAddress$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ServerAddress$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ServerAddress$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ServerAddress$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ServerAddress$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ServerAddress$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ServerAddress$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ServerAddress$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ServerAddress$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"member" : "kantan.mongodb.ServerAddress#<init>", "error" : "unsupported entity"}, {"label" : "port", "tail" : ": Int", "member" : "kantan.mongodb.ServerAddress.port", "link" : "kantan\/mongodb\/ServerAddress.html#port:Int", "kind" : "val"}, {"label" : "host", "tail" : ": String", "member" : "kantan.mongodb.ServerAddress.host", "link" : "kantan\/mongodb\/ServerAddress.html#host:String", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ServerAddress.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ServerAddress.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ServerAddress.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ServerAddress.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ServerAddress.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ServerAddress.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ServerAddress.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ServerAddress.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ServerAddress.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ServerAddress.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ServerAddress.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ServerAddress.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ServerAddress.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ServerAddress.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ServerAddress.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ServerAddress.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/ServerAddress.html", "kind" : "case class"}, {"name" : "kantan.mongodb.UpdateResult", "shortDescription" : "", "object" : "kantan\/mongodb\/UpdateResult$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/UpdateResult.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/UpdateResult.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/UpdateResult.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/UpdateResult.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/UpdateResult.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/UpdateResult.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/UpdateResult.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/UpdateResult.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/UpdateResult.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/UpdateResult.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/UpdateResult.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/UpdateResult.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/UpdateResult.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/UpdateResult.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/UpdateResult.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/UpdateResult.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/UpdateResult.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/UpdateResult.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/UpdateResult.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/UpdateResult.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/UpdateResult.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/UpdateResult.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/UpdateResult.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/UpdateResult.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "Update", "tail" : "", "member" : "kantan.mongodb.UpdateResult.Update", "link" : "kantan\/mongodb\/UpdateResult$.html#UpdateextendsUpdateResultwithProductwithSerializable", "kind" : "final case class"}, {"label" : "Upsert", "tail" : "", "member" : "kantan.mongodb.UpdateResult.Upsert", "link" : "kantan\/mongodb\/UpdateResult$.html#UpsertextendsUpdateResultwithProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/UpdateResult$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/UpdateResult$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/UpdateResult$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/UpdateResult$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/UpdateResult$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/UpdateResult$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/UpdateResult$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/UpdateResult$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/UpdateResult$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/UpdateResult$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/UpdateResult$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/UpdateResult$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/UpdateResult$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/UpdateResult$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/UpdateResult$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/UpdateResult$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/UpdateResult$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/UpdateResult$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/UpdateResult$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/UpdateResult.html", "kind" : "class"}, {"name" : "kantan.mongodb.WriteConcern", "shortDescription" : "", "object" : "kantan\/mongodb\/WriteConcern$.html", "members_class" : [{"label" : "productPrefix", "tail" : "(): String", "member" : "scala.Product.productPrefix", "link" : "kantan\/mongodb\/WriteConcern.html#productPrefix:String", "kind" : "def"}, {"label" : "productIterator", "tail" : "(): Iterator[Any]", "member" : "scala.Product.productIterator", "link" : "kantan\/mongodb\/WriteConcern.html#productIterator:Iterator[Any]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/WriteConcern.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/WriteConcern.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/WriteConcern.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/WriteConcern.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/WriteConcern.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/WriteConcern.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/WriteConcern.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/WriteConcern.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/WriteConcern.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/WriteConcern.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/WriteConcern.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/WriteConcern.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/WriteConcern.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/WriteConcern.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/WriteConcern.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/WriteConcern.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/WriteConcern.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/WriteConcern.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/WriteConcern.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "productArity", "tail" : "(): Int", "member" : "scala.Product.productArity", "link" : "kantan\/mongodb\/WriteConcern.html#productArity:Int", "kind" : "abstract def"}, {"label" : "productElement", "tail" : "(n: Int): Any", "member" : "scala.Product.productElement", "link" : "kantan\/mongodb\/WriteConcern.html#productElement(n:Int):Any", "kind" : "abstract def"}, {"label" : "canEqual", "tail" : "(that: Any): Boolean", "member" : "scala.Equals.canEqual", "link" : "kantan\/mongodb\/WriteConcern.html#canEqual(that:Any):Boolean", "kind" : "abstract def"}], "members_object" : [{"label" : "values", "tail" : "(): List[WriteConcern]", "member" : "kantan.mongodb.WriteConcern.values", "link" : "kantan\/mongodb\/WriteConcern$.html#values:List[kantan.mongodb.WriteConcern]", "kind" : "def"}, {"label" : "W3", "tail" : "", "member" : "kantan.mongodb.WriteConcern.W3", "link" : "kantan\/mongodb\/WriteConcern$.html#W3", "kind" : "object"}, {"label" : "W2", "tail" : "", "member" : "kantan.mongodb.WriteConcern.W2", "link" : "kantan\/mongodb\/WriteConcern$.html#W2", "kind" : "object"}, {"label" : "W1", "tail" : "", "member" : "kantan.mongodb.WriteConcern.W1", "link" : "kantan\/mongodb\/WriteConcern$.html#W1", "kind" : "object"}, {"label" : "Unacknowledged", "tail" : "", "member" : "kantan.mongodb.WriteConcern.Unacknowledged", "link" : "kantan\/mongodb\/WriteConcern$.html#Unacknowledged", "kind" : "object"}, {"label" : "Majority", "tail" : "", "member" : "kantan.mongodb.WriteConcern.Majority", "link" : "kantan\/mongodb\/WriteConcern$.html#Majority", "kind" : "object"}, {"label" : "Journaled", "tail" : "", "member" : "kantan.mongodb.WriteConcern.Journaled", "link" : "kantan\/mongodb\/WriteConcern$.html#Journaled", "kind" : "object"}, {"label" : "Acknowledged", "tail" : "", "member" : "kantan.mongodb.WriteConcern.Acknowledged", "link" : "kantan\/mongodb\/WriteConcern$.html#Acknowledged", "kind" : "object"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/WriteConcern$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/WriteConcern$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/WriteConcern$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/WriteConcern$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/WriteConcern$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/WriteConcern$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/WriteConcern$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/WriteConcern$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/WriteConcern$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/WriteConcern$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/WriteConcern$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/WriteConcern$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/WriteConcern$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/WriteConcern$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/WriteConcern$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/WriteConcern$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/WriteConcern$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/WriteConcern$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/WriteConcern$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/WriteConcern.html", "kind" : "class"}], "kantan.mongodb.laws.discipline" : [{"name" : "kantan.mongodb.laws.discipline.arbitrary", "shortDescription" : "", "object" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html", "members_object" : [{"label" : "bsonValueCogen", "tail" : ": Cogen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.bsonValueCogen", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#bsonValueCogen:org.scalacheck.Cogen[kantan.mongodb.BsonValue]", "kind" : "implicit lazy val"}, {"label" : "cogenBsonDocument", "tail" : ": Cogen[BsonDocument]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenBsonDocument", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenBsonDocument:org.scalacheck.Cogen[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "cogenBsonDocumentContent", "tail" : ": Cogen[Map[String, BsonValue]]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenBsonDocumentContent", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenBsonDocumentContent:org.scalacheck.Cogen[Map[String,kantan.mongodb.BsonValue]]", "kind" : "implicit val"}, {"label" : "cogenBsonDecodeError", "tail" : ": Cogen[Decode]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenBsonDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenBsonDecodeError:org.scalacheck.Cogen[kantan.mongodb.MongoError.Decode]", "kind" : "implicit val"}, {"label" : "cogenObjectId", "tail" : ": Cogen[ObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenObjectId:org.scalacheck.Cogen[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "arbObjectId", "tail" : ": Arbitrary[ObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbObjectId:org.scalacheck.Arbitrary[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "arbBsonValue", "tail" : ": Arbitrary[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbBsonValue", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbBsonValue:org.scalacheck.Arbitrary[kantan.mongodb.BsonValue]", "kind" : "implicit val"}, {"label" : "arbBsonDocument", "tail" : ": Arbitrary[BsonDocument]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbBsonDocument", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbBsonDocument:org.scalacheck.Arbitrary[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[Decode]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.mongodb.MongoError.Decode]", "kind" : "implicit val"}, {"label" : "genBsonValue", "tail" : "(depth: Int): Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonValue", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonValue(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "def"}, {"label" : "genNestedType", "tail" : "(depth: Int): Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genNestedType", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genNestedType(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "def"}, {"label" : "genBsonDocument", "tail" : "(depth: Int): Gen[BsonDocument]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDocument", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonDocument(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonDocument]", "kind" : "def"}, {"label" : "genBsonArray", "tail" : "(depth: Int): Gen[BsonArray]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonArray", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonArray(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonArray]", "kind" : "def"}, {"label" : "genTerminalType", "tail" : ": Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genTerminalType", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genTerminalType:org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "genJavascript", "tail" : ": Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genJavascript", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genJavascript:org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "genValueType", "tail" : ": Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genValueType", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genValueType:org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "genBsonNull", "tail" : ": Gen[BsonNull.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonNull", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonNull:org.scalacheck.Gen[kantan.mongodb.BsonNull.type]", "kind" : "val"}, {"label" : "genBsonMinKey", "tail" : ": Gen[BsonMinKey.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonMinKey", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonMinKey:org.scalacheck.Gen[kantan.mongodb.BsonMinKey.type]", "kind" : "val"}, {"label" : "genBsonMaxKey", "tail" : ": Gen[BsonMaxKey.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonMaxKey", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonMaxKey:org.scalacheck.Gen[kantan.mongodb.BsonMaxKey.type]", "kind" : "val"}, {"label" : "genBsonUndefined", "tail" : ": Gen[BsonUndefined.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonUndefined", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonUndefined:org.scalacheck.Gen[kantan.mongodb.BsonUndefined.type]", "kind" : "val"}, {"label" : "genBsonDateTime", "tail" : ": Gen[BsonDateTime]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDateTime", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonDateTime:org.scalacheck.Gen[kantan.mongodb.BsonDateTime]", "kind" : "val"}, {"label" : "genBsonTimestamp", "tail" : ": Gen[BsonTimestamp]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonTimestamp", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonTimestamp:org.scalacheck.Gen[kantan.mongodb.BsonTimestamp]", "kind" : "val"}, {"label" : "genBsonRegularExpression", "tail" : ": Gen[BsonRegularExpression]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonRegularExpression", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonRegularExpression:org.scalacheck.Gen[kantan.mongodb.BsonRegularExpression]", "kind" : "val"}, {"label" : "genBsonSymbol", "tail" : ": Gen[BsonSymbol]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonSymbol", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonSymbol:org.scalacheck.Gen[kantan.mongodb.BsonSymbol]", "kind" : "val"}, {"label" : "genBsonJavaScriptWithScope", "tail" : ": Gen[BsonJavaScriptWithScope]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonJavaScriptWithScope", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonJavaScriptWithScope:org.scalacheck.Gen[kantan.mongodb.BsonJavaScriptWithScope]", "kind" : "val"}, {"label" : "genBsonJavaScript", "tail" : ": Gen[BsonJavaScript]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonJavaScript", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonJavaScript:org.scalacheck.Gen[kantan.mongodb.BsonJavaScript]", "kind" : "val"}, {"label" : "genBsonString", "tail" : ": Gen[BsonString]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonString", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonString:org.scalacheck.Gen[kantan.mongodb.BsonString]", "kind" : "val"}, {"label" : "genBsonDbPointer", "tail" : ": Gen[BsonDbPointer]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDbPointer", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonDbPointer:org.scalacheck.Gen[kantan.mongodb.BsonDbPointer]", "kind" : "val"}, {"label" : "genBsonLong", "tail" : ": Gen[BsonLong]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonLong", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonLong:org.scalacheck.Gen[kantan.mongodb.BsonLong]", "kind" : "val"}, {"label" : "genBsonInt", "tail" : ": Gen[BsonInt]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonInt", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonInt:org.scalacheck.Gen[kantan.mongodb.BsonInt]", "kind" : "val"}, {"label" : "genBsonDouble", "tail" : ": Gen[BsonDouble]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDouble", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonDouble:org.scalacheck.Gen[kantan.mongodb.BsonDouble]", "kind" : "val"}, {"label" : "genBsonBoolean", "tail" : ": Gen[BsonBoolean]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonBoolean", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonBoolean:org.scalacheck.Gen[kantan.mongodb.BsonBoolean]", "kind" : "val"}, {"label" : "genBsonDecimal128", "tail" : ": Gen[BsonDecimal128]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDecimal128", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonDecimal128:org.scalacheck.Gen[kantan.mongodb.BsonDecimal128]", "kind" : "val"}, {"label" : "genBsonObjectId", "tail" : ": Gen[BsonObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonObjectId:org.scalacheck.Gen[kantan.mongodb.BsonObjectId]", "kind" : "val"}, {"label" : "genBsonBinaryData", "tail" : ": Gen[BsonBinaryData]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonBinaryData", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonBinaryData:org.scalacheck.Gen[kantan.mongodb.BsonBinaryData]", "kind" : "val"}, {"label" : "genBsonMd5", "tail" : ": Gen[BsonMd5]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonMd5", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonMd5:org.scalacheck.Gen[kantan.mongodb.BsonMd5]", "kind" : "val"}, {"label" : "genBsonUuid", "tail" : ": Gen[BsonUuid]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonUuid", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonUuid:org.scalacheck.Gen[kantan.mongodb.BsonUuid]", "kind" : "val"}, {"label" : "genBsonUserDefinedBinary", "tail" : ": Gen[BsonUserDefinedBinary]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonUserDefinedBinary", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonUserDefinedBinary:org.scalacheck.Gen[kantan.mongodb.BsonUserDefinedBinary]", "kind" : "val"}, {"label" : "genBsonFunction", "tail" : ": Gen[BsonFunction]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonFunction", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonFunction:org.scalacheck.Gen[kantan.mongodb.BsonFunction]", "kind" : "val"}, {"label" : "genBsonBinary", "tail" : ": Gen[BsonBinary]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonBinary", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genBsonBinary:org.scalacheck.Gen[kantan.mongodb.BsonBinary]", "kind" : "val"}, {"label" : "genDecimal128", "tail" : ": Gen[Decimal128]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genDecimal128", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genDecimal128:org.scalacheck.Gen[org.bson.types.Decimal128]", "kind" : "val"}, {"label" : "genObjectId", "tail" : ": Gen[ObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genObjectId:org.scalacheck.Gen[org.bson.types.ObjectId]", "kind" : "val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbTry", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : ": Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbException", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit val"}, {"label" : "genException", "tail" : ": Gen[Exception]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genException", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit val"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIoException", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIllegalArgument", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenDate", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUUID", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "cogenResult", "tail" : "(arg0: Cogen[A], arg1: Cogen[B]): Cogen[Result[A, B]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenResult", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenResult[A,B](implicitevidence$13:org.scalacheck.Cogen[A],implicitevidence$14:org.scalacheck.Cogen[B]):org.scalacheck.Cogen[kantan.codecs.Result[A,B]]", "kind" : "implicit def"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbUuid", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbDate", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbBigDecimal", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbStringDecoder", "tail" : "(arg0: Arbitrary[A]): Arbitrary[StringDecoder[A]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbStringDecoder", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbStringDecoder[A](implicitevidence$12:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.strings.StringDecoder[A]]", "kind" : "implicit def"}, {"label" : "arbStringEncoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Arbitrary[StringEncoder[A]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbStringEncoder", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbStringEncoder[A](implicitevidence$10:org.scalacheck.Arbitrary[A],implicitevidence$11:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[kantan.codecs.strings.StringEncoder[A]]", "kind" : "implicit def"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbStringDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) ⇒ Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalValue", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$9:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) ⇒ E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbLegalValue", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbIllegalValueFromDec[E,A,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbLegalValueFromEnc[E,A,T](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbValue", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenRegex", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbRegex", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPattern", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPattern", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPattern", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genRegularExpression", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genRegexOptions", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbResult", "tail" : "(arg0: Arbitrary[F], arg1: Arbitrary[S]): Arbitrary[Result[F, S]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbResult", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbResult[F,S](implicitevidence$5:org.scalacheck.Arbitrary[F],implicitevidence$6:org.scalacheck.Arbitrary[S]):org.scalacheck.Arbitrary[kantan.codecs.Result[F,S]]", "kind" : "implicit def"}, {"label" : "arbFailure", "tail" : "(arg0: Arbitrary[F]): Arbitrary[codecs.Result.Failure[F]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFailure", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbFailure[F](implicitevidence$4:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Result.Failure[F]]", "kind" : "implicit def"}, {"label" : "arbSuccess", "tail" : "(arg0: Arbitrary[S]): Arbitrary[codecs.Result.Success[S]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbSuccess", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#arbSuccess[S](implicitevidence$3:org.scalacheck.Arbitrary[S]):org.scalacheck.Arbitrary[kantan.codecs.Result.Success[S]]", "kind" : "implicit def"}, {"label" : "failure", "tail" : "(arg0: Arbitrary[F]): Gen[codecs.Result.Failure[F]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.failure", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#failure[F](implicitevidence$2:org.scalacheck.Arbitrary[F]):org.scalacheck.Gen[kantan.codecs.Result.Failure[F]]", "kind" : "def"}, {"label" : "success", "tail" : "(arg0: Arbitrary[S]): Gen[codecs.Result.Success[S]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.success", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#success[S](implicitevidence$1:org.scalacheck.Arbitrary[S]):org.scalacheck.Gen[kantan.codecs.Result.Success[S]]", "kind" : "def"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) ⇒ DD)(encoded: (E1, E2, E3, E4, E5) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) ⇒ DD)(encoded: (E1, E2, E3, E4) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) ⇒ DD)(encoded: (E1, E2, E3) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) ⇒ DD)(encoded: (E1, E2) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) ⇒ DD)(encoded: (E1) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/arbitrary$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.laws.discipline.ArbitraryInstances", "members_trait" : [{"label" : "bsonValueCogen", "tail" : ": Cogen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.bsonValueCogen", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#bsonValueCogen:org.scalacheck.Cogen[kantan.mongodb.BsonValue]", "kind" : "implicit lazy val"}, {"label" : "cogenBsonDocument", "tail" : ": Cogen[BsonDocument]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenBsonDocument", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenBsonDocument:org.scalacheck.Cogen[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "cogenBsonDocumentContent", "tail" : ": Cogen[Map[String, BsonValue]]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenBsonDocumentContent", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenBsonDocumentContent:org.scalacheck.Cogen[Map[String,kantan.mongodb.BsonValue]]", "kind" : "implicit val"}, {"label" : "cogenBsonDecodeError", "tail" : ": Cogen[Decode]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenBsonDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenBsonDecodeError:org.scalacheck.Cogen[kantan.mongodb.MongoError.Decode]", "kind" : "implicit val"}, {"label" : "cogenObjectId", "tail" : ": Cogen[ObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.cogenObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenObjectId:org.scalacheck.Cogen[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "arbObjectId", "tail" : ": Arbitrary[ObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbObjectId:org.scalacheck.Arbitrary[org.bson.types.ObjectId]", "kind" : "implicit val"}, {"label" : "arbBsonValue", "tail" : ": Arbitrary[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbBsonValue", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbBsonValue:org.scalacheck.Arbitrary[kantan.mongodb.BsonValue]", "kind" : "implicit val"}, {"label" : "arbBsonDocument", "tail" : ": Arbitrary[BsonDocument]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbBsonDocument", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbBsonDocument:org.scalacheck.Arbitrary[kantan.mongodb.BsonDocument]", "kind" : "implicit val"}, {"label" : "arbDecodeError", "tail" : ": Arbitrary[Decode]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.arbDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbDecodeError:org.scalacheck.Arbitrary[kantan.mongodb.MongoError.Decode]", "kind" : "implicit val"}, {"label" : "genBsonValue", "tail" : "(depth: Int): Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonValue", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonValue(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "def"}, {"label" : "genNestedType", "tail" : "(depth: Int): Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genNestedType", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genNestedType(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "def"}, {"label" : "genBsonDocument", "tail" : "(depth: Int): Gen[BsonDocument]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDocument", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonDocument(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonDocument]", "kind" : "def"}, {"label" : "genBsonArray", "tail" : "(depth: Int): Gen[BsonArray]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonArray", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonArray(depth:Int):org.scalacheck.Gen[kantan.mongodb.BsonArray]", "kind" : "def"}, {"label" : "genTerminalType", "tail" : ": Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genTerminalType", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genTerminalType:org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "genJavascript", "tail" : ": Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genJavascript", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genJavascript:org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "genValueType", "tail" : ": Gen[BsonValue]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genValueType", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genValueType:org.scalacheck.Gen[kantan.mongodb.BsonValue]", "kind" : "val"}, {"label" : "genBsonNull", "tail" : ": Gen[BsonNull.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonNull", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonNull:org.scalacheck.Gen[kantan.mongodb.BsonNull.type]", "kind" : "val"}, {"label" : "genBsonMinKey", "tail" : ": Gen[BsonMinKey.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonMinKey", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonMinKey:org.scalacheck.Gen[kantan.mongodb.BsonMinKey.type]", "kind" : "val"}, {"label" : "genBsonMaxKey", "tail" : ": Gen[BsonMaxKey.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonMaxKey", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonMaxKey:org.scalacheck.Gen[kantan.mongodb.BsonMaxKey.type]", "kind" : "val"}, {"label" : "genBsonUndefined", "tail" : ": Gen[BsonUndefined.type]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonUndefined", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonUndefined:org.scalacheck.Gen[kantan.mongodb.BsonUndefined.type]", "kind" : "val"}, {"label" : "genBsonDateTime", "tail" : ": Gen[BsonDateTime]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDateTime", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonDateTime:org.scalacheck.Gen[kantan.mongodb.BsonDateTime]", "kind" : "val"}, {"label" : "genBsonTimestamp", "tail" : ": Gen[BsonTimestamp]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonTimestamp", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonTimestamp:org.scalacheck.Gen[kantan.mongodb.BsonTimestamp]", "kind" : "val"}, {"label" : "genBsonRegularExpression", "tail" : ": Gen[BsonRegularExpression]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonRegularExpression", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonRegularExpression:org.scalacheck.Gen[kantan.mongodb.BsonRegularExpression]", "kind" : "val"}, {"label" : "genBsonSymbol", "tail" : ": Gen[BsonSymbol]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonSymbol", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonSymbol:org.scalacheck.Gen[kantan.mongodb.BsonSymbol]", "kind" : "val"}, {"label" : "genBsonJavaScriptWithScope", "tail" : ": Gen[BsonJavaScriptWithScope]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonJavaScriptWithScope", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonJavaScriptWithScope:org.scalacheck.Gen[kantan.mongodb.BsonJavaScriptWithScope]", "kind" : "val"}, {"label" : "genBsonJavaScript", "tail" : ": Gen[BsonJavaScript]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonJavaScript", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonJavaScript:org.scalacheck.Gen[kantan.mongodb.BsonJavaScript]", "kind" : "val"}, {"label" : "genBsonString", "tail" : ": Gen[BsonString]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonString", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonString:org.scalacheck.Gen[kantan.mongodb.BsonString]", "kind" : "val"}, {"label" : "genBsonDbPointer", "tail" : ": Gen[BsonDbPointer]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDbPointer", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonDbPointer:org.scalacheck.Gen[kantan.mongodb.BsonDbPointer]", "kind" : "val"}, {"label" : "genBsonLong", "tail" : ": Gen[BsonLong]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonLong", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonLong:org.scalacheck.Gen[kantan.mongodb.BsonLong]", "kind" : "val"}, {"label" : "genBsonInt", "tail" : ": Gen[BsonInt]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonInt", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonInt:org.scalacheck.Gen[kantan.mongodb.BsonInt]", "kind" : "val"}, {"label" : "genBsonDouble", "tail" : ": Gen[BsonDouble]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDouble", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonDouble:org.scalacheck.Gen[kantan.mongodb.BsonDouble]", "kind" : "val"}, {"label" : "genBsonBoolean", "tail" : ": Gen[BsonBoolean]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonBoolean", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonBoolean:org.scalacheck.Gen[kantan.mongodb.BsonBoolean]", "kind" : "val"}, {"label" : "genBsonDecimal128", "tail" : ": Gen[BsonDecimal128]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonDecimal128", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonDecimal128:org.scalacheck.Gen[kantan.mongodb.BsonDecimal128]", "kind" : "val"}, {"label" : "genBsonObjectId", "tail" : ": Gen[BsonObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonObjectId:org.scalacheck.Gen[kantan.mongodb.BsonObjectId]", "kind" : "val"}, {"label" : "genBsonBinaryData", "tail" : ": Gen[BsonBinaryData]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonBinaryData", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonBinaryData:org.scalacheck.Gen[kantan.mongodb.BsonBinaryData]", "kind" : "val"}, {"label" : "genBsonMd5", "tail" : ": Gen[BsonMd5]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonMd5", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonMd5:org.scalacheck.Gen[kantan.mongodb.BsonMd5]", "kind" : "val"}, {"label" : "genBsonUuid", "tail" : ": Gen[BsonUuid]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonUuid", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonUuid:org.scalacheck.Gen[kantan.mongodb.BsonUuid]", "kind" : "val"}, {"label" : "genBsonUserDefinedBinary", "tail" : ": Gen[BsonUserDefinedBinary]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonUserDefinedBinary", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonUserDefinedBinary:org.scalacheck.Gen[kantan.mongodb.BsonUserDefinedBinary]", "kind" : "val"}, {"label" : "genBsonFunction", "tail" : ": Gen[BsonFunction]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonFunction", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonFunction:org.scalacheck.Gen[kantan.mongodb.BsonFunction]", "kind" : "val"}, {"label" : "genBsonBinary", "tail" : ": Gen[BsonBinary]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genBsonBinary", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genBsonBinary:org.scalacheck.Gen[kantan.mongodb.BsonBinary]", "kind" : "val"}, {"label" : "genDecimal128", "tail" : ": Gen[Decimal128]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genDecimal128", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genDecimal128:org.scalacheck.Gen[org.bson.types.Decimal128]", "kind" : "val"}, {"label" : "genObjectId", "tail" : ": Gen[ObjectId]", "member" : "kantan.mongodb.laws.discipline.ArbitraryInstances.genObjectId", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genObjectId:org.scalacheck.Gen[org.bson.types.ObjectId]", "kind" : "val"}, {"label" : "arbTry", "tail" : "(aa: Arbitrary[A]): Arbitrary[Try[A]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbTry", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbTry[A](implicitaa:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[scala.util.Try[A]]", "kind" : "implicit def"}, {"label" : "arbException", "tail" : ": Arbitrary[Exception]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbException", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbException:org.scalacheck.Arbitrary[Exception]", "kind" : "implicit val"}, {"label" : "genException", "tail" : ": Gen[Exception]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genException", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genException:org.scalacheck.Gen[Exception]", "kind" : "implicit val"}, {"label" : "arbIoException", "tail" : ": Arbitrary[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIoException", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbIoException:org.scalacheck.Arbitrary[java.io.IOException]", "kind" : "implicit val"}, {"label" : "genIllegalArgument", "tail" : ": Gen[IllegalArgumentException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIllegalArgument", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalArgument:org.scalacheck.Gen[IllegalArgumentException]", "kind" : "val"}, {"label" : "genIoException", "tail" : ": Gen[IOException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genIoException", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIoException:org.scalacheck.Gen[java.io.IOException]", "kind" : "val"}, {"label" : "genUnsupportedEncoding", "tail" : ": Gen[UnsupportedEncodingException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genUnsupportedEncoding", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genUnsupportedEncoding:org.scalacheck.Gen[java.io.UnsupportedEncodingException]", "kind" : "val"}, {"label" : "genFileNotFound", "tail" : ": Gen[FileNotFoundException]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genFileNotFound", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genFileNotFound:org.scalacheck.Gen[java.io.FileNotFoundException]", "kind" : "val"}, {"label" : "cogenDate", "tail" : ": Cogen[Date]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenDate", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenDate:org.scalacheck.Cogen[java.util.Date]", "kind" : "implicit val"}, {"label" : "cogenFile", "tail" : ": Cogen[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenFile", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenFile:org.scalacheck.Cogen[java.io.File]", "kind" : "implicit val"}, {"label" : "cogenPath", "tail" : ": Cogen[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPath", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenPath:org.scalacheck.Cogen[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "cogenUUID", "tail" : ": Cogen[UUID]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUUID", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenUUID:org.scalacheck.Cogen[java.util.UUID]", "kind" : "implicit val"}, {"label" : "cogenStringDecodeError", "tail" : ": Cogen[DecodeError]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenStringDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenStringDecodeError:org.scalacheck.Cogen[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "cogenUri", "tail" : ": Cogen[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUri", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenUri:org.scalacheck.Cogen[java.net.URI]", "kind" : "implicit val"}, {"label" : "cogenUrl", "tail" : ": Cogen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenUrl", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenUrl:org.scalacheck.Cogen[java.net.URL]", "kind" : "implicit val"}, {"label" : "cogenResult", "tail" : "(arg0: Cogen[A], arg1: Cogen[B]): Cogen[Result[A, B]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenResult", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenResult[A,B](implicitevidence$13:org.scalacheck.Cogen[A],implicitevidence$14:org.scalacheck.Cogen[B]):org.scalacheck.Cogen[kantan.codecs.Result[A,B]]", "kind" : "implicit def"}, {"label" : "arbUuid", "tail" : ": Arbitrary[UUID]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbUuid", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbUuid:org.scalacheck.Arbitrary[java.util.UUID]", "kind" : "implicit val"}, {"label" : "arbDate", "tail" : ": Arbitrary[Date]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbDate", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbDate:org.scalacheck.Arbitrary[java.util.Date]", "kind" : "implicit val"}, {"label" : "arbBigDecimal", "tail" : ": Arbitrary[BigDecimal]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbBigDecimal", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbBigDecimal:org.scalacheck.Arbitrary[BigDecimal]", "kind" : "implicit lazy val"}, {"label" : "arbPath", "tail" : ": Arbitrary[Path]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPath", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbPath:org.scalacheck.Arbitrary[java.nio.file.Path]", "kind" : "implicit val"}, {"label" : "arbFile", "tail" : ": Arbitrary[File]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFile", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbFile:org.scalacheck.Arbitrary[java.io.File]", "kind" : "implicit val"}, {"label" : "arbURI", "tail" : ": Arbitrary[URI]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURI", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbURI:org.scalacheck.Arbitrary[java.net.URI]", "kind" : "implicit val"}, {"label" : "arbURL", "tail" : ": Arbitrary[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbURL", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbURL:org.scalacheck.Arbitrary[java.net.URL]", "kind" : "implicit val"}, {"label" : "genURL", "tail" : ": Gen[URL]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genURL", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genURL:org.scalacheck.Gen[java.net.URL]", "kind" : "val"}, {"label" : "genPathElement", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPathElement", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genPathElement:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "arbStringDecoder", "tail" : "(arg0: Arbitrary[A]): Arbitrary[StringDecoder[A]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbStringDecoder", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbStringDecoder[A](implicitevidence$12:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.strings.StringDecoder[A]]", "kind" : "implicit def"}, {"label" : "arbStringEncoder", "tail" : "(arg0: Arbitrary[A], arg1: Cogen[A]): Arbitrary[StringEncoder[A]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbStringEncoder", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbStringEncoder[A](implicitevidence$10:org.scalacheck.Arbitrary[A],implicitevidence$11:org.scalacheck.Cogen[A]):org.scalacheck.Arbitrary[kantan.codecs.strings.StringEncoder[A]]", "kind" : "implicit def"}, {"label" : "arbStringDecodeError", "tail" : ": Arbitrary[DecodeError]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbStringDecodeError", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbStringDecodeError:org.scalacheck.Arbitrary[kantan.codecs.strings.DecodeError]", "kind" : "implicit val"}, {"label" : "arbIllegalURI", "tail" : "(): Arbitrary[IllegalValue[String, URI, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalURI", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbIllegalURI[T]:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[String,java.net.URI,T]]", "kind" : "implicit def"}, {"label" : "arbIllegalValue", "tail" : "(illegal: (E) ⇒ Boolean)(arg0: Arbitrary[E]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalValue", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValue[E,A,T](illegal:E=>Boolean)(implicitevidence$9:org.scalacheck.Arbitrary[E]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbLegalValue", "tail" : "(encode: (A) ⇒ E)(arbA: Arbitrary[A]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbLegalValue", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbLegalValue[E,A,T](encode:A=>E)(implicitarbA:org.scalacheck.Arbitrary[A]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "def"}, {"label" : "arbIllegalValueFromDec", "tail" : "(arg0: Arbitrary[E], da: Decoder[E, A, _, T]): Arbitrary[IllegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbIllegalValueFromDec", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbIllegalValueFromDec[E,A,T](implicitevidence$8:org.scalacheck.Arbitrary[E],implicitda:kantan.codecs.Decoder[E,A,_,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbLegalValueFromEnc", "tail" : "(arg0: Arbitrary[A], ea: Encoder[E, A, T]): Arbitrary[LegalValue[E, A, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbLegalValueFromEnc", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbLegalValueFromEnc[E,A,T](implicitevidence$7:org.scalacheck.Arbitrary[A],implicitea:kantan.codecs.Encoder[E,A,T]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,A,T]]", "kind" : "implicit def"}, {"label" : "arbValue", "tail" : "(arbL: Arbitrary[LegalValue[E, D, T]], arbI: Arbitrary[IllegalValue[E, D, T]]): Arbitrary[CodecValue[E, D, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbValue", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbValue[E,D,T](implicitarbL:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E,D,T]],implicitarbI:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E,D,T]]):org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue[E,D,T]]", "kind" : "implicit def"}, {"label" : "cogenRegex", "tail" : ": Cogen[Regex]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenRegex", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenRegex:org.scalacheck.Cogen[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "arbRegex", "tail" : ": Arbitrary[Regex]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbRegex", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbRegex:org.scalacheck.Arbitrary[scala.util.matching.Regex]", "kind" : "implicit val"}, {"label" : "cogenPattern", "tail" : ": Cogen[Pattern]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenPattern", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenPattern:org.scalacheck.Cogen[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "arbPattern", "tail" : ": Arbitrary[Pattern]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbPattern", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbPattern:org.scalacheck.Arbitrary[java.util.regex.Pattern]", "kind" : "implicit val"}, {"label" : "genPattern", "tail" : ": Gen[Pattern]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genPattern", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genPattern:org.scalacheck.Gen[java.util.regex.Pattern]", "kind" : "val"}, {"label" : "genRegularExpression", "tail" : ": Gen[String]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genRegularExpression", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genRegularExpression:org.scalacheck.Gen[String]", "kind" : "val"}, {"label" : "genRegexOptions", "tail" : ": Gen[Int]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.genRegexOptions", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genRegexOptions:org.scalacheck.Gen[Int]", "kind" : "val"}, {"label" : "cogenAccessMode", "tail" : ": Cogen[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.cogenAccessMode", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#cogenAccessMode:org.scalacheck.Cogen[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbAccessMode", "tail" : ": Arbitrary[AccessMode]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbAccessMode", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbAccessMode:org.scalacheck.Arbitrary[java.nio.file.AccessMode]", "kind" : "implicit val"}, {"label" : "arbResult", "tail" : "(arg0: Arbitrary[F], arg1: Arbitrary[S]): Arbitrary[Result[F, S]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbResult", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbResult[F,S](implicitevidence$5:org.scalacheck.Arbitrary[F],implicitevidence$6:org.scalacheck.Arbitrary[S]):org.scalacheck.Arbitrary[kantan.codecs.Result[F,S]]", "kind" : "implicit def"}, {"label" : "arbFailure", "tail" : "(arg0: Arbitrary[F]): Arbitrary[codecs.Result.Failure[F]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbFailure", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbFailure[F](implicitevidence$4:org.scalacheck.Arbitrary[F]):org.scalacheck.Arbitrary[kantan.codecs.Result.Failure[F]]", "kind" : "implicit def"}, {"label" : "arbSuccess", "tail" : "(arg0: Arbitrary[S]): Arbitrary[codecs.Result.Success[S]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.arbSuccess", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#arbSuccess[S](implicitevidence$3:org.scalacheck.Arbitrary[S]):org.scalacheck.Arbitrary[kantan.codecs.Result.Success[S]]", "kind" : "implicit def"}, {"label" : "failure", "tail" : "(arg0: Arbitrary[F]): Gen[codecs.Result.Failure[F]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.failure", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#failure[F](implicitevidence$2:org.scalacheck.Arbitrary[F]):org.scalacheck.Gen[kantan.codecs.Result.Failure[F]]", "kind" : "def"}, {"label" : "success", "tail" : "(arg0: Arbitrary[S]): Gen[codecs.Result.Success[S]]", "member" : "kantan.codecs.laws.discipline.ArbitraryInstances.success", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#success[S](implicitevidence$1:org.scalacheck.Arbitrary[S]):org.scalacheck.Gen[kantan.codecs.Result.Success[S]]", "kind" : "def"}, {"label" : "genIllegalTuple22", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]], arbD22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple22", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genLegalTuple22", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]], arbD22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple22", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarbD22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22),T]]", "kind" : "def"}, {"label" : "genIllegalTuple21", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]], arbD21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple21", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genLegalTuple21", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]], arbD21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple21", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarbD21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21),T]]", "kind" : "def"}, {"label" : "genIllegalTuple20", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]], arbD20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple20", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genLegalTuple20", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]], arbD20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple20", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarbD20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20),T]]", "kind" : "def"}, {"label" : "genIllegalTuple19", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]], arbD19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple19", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genLegalTuple19", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]], arbD19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple19", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarbD19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19),T]]", "kind" : "def"}, {"label" : "genIllegalTuple18", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]], arbD18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple18", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genLegalTuple18", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]], arbD18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple18", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarbD18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18),T]]", "kind" : "def"}, {"label" : "genIllegalTuple17", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]], arbD17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple17", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genLegalTuple17", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]], arbD17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple17", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarbD17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17),T]]", "kind" : "def"}, {"label" : "genIllegalTuple16", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]], arbD16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple16", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genLegalTuple16", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]], arbD16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple16", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarbD16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16),T]]", "kind" : "def"}, {"label" : "genIllegalTuple15", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]], arbD15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple15", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genLegalTuple15", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]], arbD15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple15", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarbD15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15),T]]", "kind" : "def"}, {"label" : "genIllegalTuple14", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]], arbD14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple14", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genLegalTuple14", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]], arbD14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple14", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarbD14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14),T]]", "kind" : "def"}, {"label" : "genIllegalTuple13", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]], arbD13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple13", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genLegalTuple13", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]], arbD13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple13", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarbD13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13),T]]", "kind" : "def"}, {"label" : "genIllegalTuple12", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]], arbD12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple12", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genLegalTuple12", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]], arbD12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple12", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarbD12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12),T]]", "kind" : "def"}, {"label" : "genIllegalTuple11", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]], arbD11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple11", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genLegalTuple11", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]], arbD11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple11", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarbD11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11),T]]", "kind" : "def"}, {"label" : "genIllegalTuple10", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]], arbD10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple10", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genLegalTuple10", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]], arbD10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9, E10), (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple10", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarbD10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10),(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10),T]]", "kind" : "def"}, {"label" : "genIllegalTuple9", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]], arbD9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple9", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genLegalTuple9", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]], arbD9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8, E9), (D1, D2, D3, D4, D5, D6, D7, D8, D9), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple9", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarbD9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8,E9),(D1,D2,D3,D4,D5,D6,D7,D8,D9),T]]", "kind" : "def"}, {"label" : "genIllegalTuple8", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]], arbD8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple8", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genLegalTuple8", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]], arbD8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7, E8), (D1, D2, D3, D4, D5, D6, D7, D8), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple8", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarbD8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7,E8),(D1,D2,D3,D4,D5,D6,D7,D8),T]]", "kind" : "def"}, {"label" : "genIllegalTuple7", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]], arbD7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple7", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genLegalTuple7", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]], arbD7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6, E7), (D1, D2, D3, D4, D5, D6, D7), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple7", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarbD7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6,E7),(D1,D2,D3,D4,D5,D6,D7),T]]", "kind" : "def"}, {"label" : "genIllegalTuple6", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]], arbD6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple6", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genLegalTuple6", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]], arbD6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5, E6), (D1, D2, D3, D4, D5, D6), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple6", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarbD6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5,E6),(D1,D2,D3,D4,D5,D6),T]]", "kind" : "def"}, {"label" : "genIllegalTuple5", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]], arbD5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple5", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genLegalTuple5", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]], arbD5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[(E1, E2, E3, E4, E5), (D1, D2, D3, D4, D5), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple5", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarbD5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4,E5),(D1,D2,D3,D4,D5),T]]", "kind" : "def"}, {"label" : "genIllegalTuple4", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]], arbD4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple4", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genLegalTuple4", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]], arbD4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[(E1, E2, E3, E4), (D1, D2, D3, D4), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple4", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple4[E1,E2,E3,E4,D1,D2,D3,D4,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarbD4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3,E4),(D1,D2,D3,D4),T]]", "kind" : "def"}, {"label" : "genIllegalTuple3", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]], arbD3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple3", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genLegalTuple3", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]], arbD3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[(E1, E2, E3), (D1, D2, D3), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple3", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple3[E1,E2,E3,D1,D2,D3,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarbD3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2,E3),(D1,D2,D3),T]]", "kind" : "def"}, {"label" : "genIllegalTuple2", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]], arbD2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple2", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genLegalTuple2", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]], arbD2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[(E1, E2), (D1, D2), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple2", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple2[E1,E2,D1,D2,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarbD2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,E2),(D1,D2),T]]", "kind" : "def"}, {"label" : "genIllegalTuple1", "tail" : "(arbD1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalTuple1", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genLegalTuple1", "tail" : "(arbD1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[(E1), (D1), T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalTuple1", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalTuple1[E1,D1,T](implicitarbD1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[(E1,),(D1,),T]]", "kind" : "def"}, {"label" : "genIllegalWith22", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]], arb22: Arbitrary[IllegalValue[E22, D22, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith22", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith22", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21, D22) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21, E22) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]], arb22: Arbitrary[LegalValue[E22, D22, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith22", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith22[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,D22)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,E22)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]],implicitarb22:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E22,D22,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith21", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]], arb21: Arbitrary[IllegalValue[E21, D21, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith21", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith21", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20, D21) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20, E21) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]], arb21: Arbitrary[LegalValue[E21, D21, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith21", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith21[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,D21)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,E21)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]],implicitarb21:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E21,D21,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith20", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]], arb20: Arbitrary[IllegalValue[E20, D20, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith20", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith20", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19, D20) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19, E20) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]], arb20: Arbitrary[LegalValue[E20, D20, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith20", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith20[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,D20)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,E20)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]],implicitarb20:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E20,D20,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith19", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]], arb19: Arbitrary[IllegalValue[E19, D19, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith19", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith19", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18, D19) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18, E19) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]], arb19: Arbitrary[LegalValue[E19, D19, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith19", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith19[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,D19)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,E19)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]],implicitarb19:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E19,D19,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith18", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]], arb18: Arbitrary[IllegalValue[E18, D18, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith18", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith18", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17, D18) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17, E18) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]], arb18: Arbitrary[LegalValue[E18, D18, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith18", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith18[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,D18)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,E18)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]],implicitarb18:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E18,D18,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith17", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]], arb17: Arbitrary[IllegalValue[E17, D17, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith17", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith17", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16, D17) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16, E17) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]], arb17: Arbitrary[LegalValue[E17, D17, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith17", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith17[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,D17)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,E17)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]],implicitarb17:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E17,D17,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith16", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]], arb16: Arbitrary[IllegalValue[E16, D16, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith16", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith16", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15, D16) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15, E16) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]], arb16: Arbitrary[LegalValue[E16, D16, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith16", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith16[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,D16)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,E16)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]],implicitarb16:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E16,D16,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith15", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]], arb15: Arbitrary[IllegalValue[E15, D15, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith15", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith15", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14, D15) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14, E15) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]], arb15: Arbitrary[LegalValue[E15, D15, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith15", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith15[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,D15)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,E15)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]],implicitarb15:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E15,D15,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith14", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]], arb14: Arbitrary[IllegalValue[E14, D14, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith14", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith14", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13, D14) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13, E14) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]], arb14: Arbitrary[LegalValue[E14, D14, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith14", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith14[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,D14)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,E14)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]],implicitarb14:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E14,D14,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith13", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]], arb13: Arbitrary[IllegalValue[E13, D13, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith13", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith13", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12, D13) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12, E13) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]], arb13: Arbitrary[LegalValue[E13, D13, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith13", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith13[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,D13)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,E13)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]],implicitarb13:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E13,D13,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith12", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]], arb12: Arbitrary[IllegalValue[E12, D12, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith12", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith12", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11, D12) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11, E12) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]], arb12: Arbitrary[LegalValue[E12, D12, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith12", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith12[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,D12)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,E12)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]],implicitarb12:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E12,D12,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith11", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]], arb11: Arbitrary[IllegalValue[E11, D11, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith11", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith11", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10, D11) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10, E11) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]], arb11: Arbitrary[LegalValue[E11, D11, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith11", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith11[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,D11)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,E11)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]],implicitarb11:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E11,D11,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith10", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]], arb10: Arbitrary[IllegalValue[E10, D10, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith10", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith10", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9, D10) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9, E10) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]], arb10: Arbitrary[LegalValue[E10, D10, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith10", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith10[E1,E2,E3,E4,E5,E6,E7,E8,E9,E10,D1,D2,D3,D4,D5,D6,D7,D8,D9,D10,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9,D10)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9,E10)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]],implicitarb10:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E10,D10,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith9", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]], arb9: Arbitrary[IllegalValue[E9, D9, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith9", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith9", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8, D9) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8, E9) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]], arb9: Arbitrary[LegalValue[E9, D9, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith9", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith9[E1,E2,E3,E4,E5,E6,E7,E8,E9,D1,D2,D3,D4,D5,D6,D7,D8,D9,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8,D9)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8,E9)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]],implicitarb9:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E9,D9,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith8", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]], arb8: Arbitrary[IllegalValue[E8, D8, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith8", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith8", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7, D8) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7, E8) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]], arb8: Arbitrary[LegalValue[E8, D8, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith8", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith8[E1,E2,E3,E4,E5,E6,E7,E8,D1,D2,D3,D4,D5,D6,D7,D8,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7,D8)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7,E8)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]],implicitarb8:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E8,D8,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith7", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6, E7) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]], arb7: Arbitrary[IllegalValue[E7, D7, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith7", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith7", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6, D7) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6, E7) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]], arb7: Arbitrary[LegalValue[E7, D7, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith7", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith7[E1,E2,E3,E4,E5,E6,E7,D1,D2,D3,D4,D5,D6,D7,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6,D7)=>DD)(encoded:(E1,E2,E3,E4,E5,E6,E7)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]],implicitarb7:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E7,D7,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith6", "tail" : "(encoded: (E1, E2, E3, E4, E5, E6) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]], arb6: Arbitrary[IllegalValue[E6, D6, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith6", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith6", "tail" : "(decoded: (D1, D2, D3, D4, D5, D6) ⇒ DD)(encoded: (E1, E2, E3, E4, E5, E6) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]], arb6: Arbitrary[LegalValue[E6, D6, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith6", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith6[E1,E2,E3,E4,E5,E6,D1,D2,D3,D4,D5,D6,EE,DD,T](decoded:(D1,D2,D3,D4,D5,D6)=>DD)(encoded:(E1,E2,E3,E4,E5,E6)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]],implicitarb6:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E6,D6,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith5", "tail" : "(encoded: (E1, E2, E3, E4, E5) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]], arb5: Arbitrary[IllegalValue[E5, D5, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith5", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith5", "tail" : "(decoded: (D1, D2, D3, D4, D5) ⇒ DD)(encoded: (E1, E2, E3, E4, E5) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]], arb5: Arbitrary[LegalValue[E5, D5, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith5", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith5[E1,E2,E3,E4,E5,D1,D2,D3,D4,D5,EE,DD,T](decoded:(D1,D2,D3,D4,D5)=>DD)(encoded:(E1,E2,E3,E4,E5)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]],implicitarb5:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E5,D5,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith4", "tail" : "(encoded: (E1, E2, E3, E4) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]], arb4: Arbitrary[IllegalValue[E4, D4, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith4", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith4", "tail" : "(decoded: (D1, D2, D3, D4) ⇒ DD)(encoded: (E1, E2, E3, E4) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]], arb4: Arbitrary[LegalValue[E4, D4, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith4", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith4[E1,E2,E3,E4,D1,D2,D3,D4,EE,DD,T](decoded:(D1,D2,D3,D4)=>DD)(encoded:(E1,E2,E3,E4)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]],implicitarb4:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E4,D4,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith3", "tail" : "(encoded: (E1, E2, E3) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]], arb3: Arbitrary[IllegalValue[E3, D3, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith3", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith3", "tail" : "(decoded: (D1, D2, D3) ⇒ DD)(encoded: (E1, E2, E3) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]], arb3: Arbitrary[LegalValue[E3, D3, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith3", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith3[E1,E2,E3,D1,D2,D3,EE,DD,T](decoded:(D1,D2,D3)=>DD)(encoded:(E1,E2,E3)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]],implicitarb3:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E3,D3,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith2", "tail" : "(encoded: (E1, E2) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]], arb2: Arbitrary[IllegalValue[E2, D2, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith2", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith2[E1,E2,D1,D2,EE,DD,T](encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith2", "tail" : "(decoded: (D1, D2) ⇒ DD)(encoded: (E1, E2) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]], arb2: Arbitrary[LegalValue[E2, D2, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith2", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith2[E1,E2,D1,D2,EE,DD,T](decoded:(D1,D2)=>DD)(encoded:(E1,E2)=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]],implicitarb2:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E2,D2,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genIllegalWith1", "tail" : "(encoded: (E1) ⇒ EE)(arb1: Arbitrary[IllegalValue[E1, D1, T]]): Gen[IllegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genIllegalWith1", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genIllegalWith1[E1,D1,EE,DD,T](encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.IllegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.IllegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "genLegalWith1", "tail" : "(decoded: (D1) ⇒ DD)(encoded: (E1) ⇒ EE)(arb1: Arbitrary[LegalValue[E1, D1, T]]): Gen[LegalValue[EE, DD, T]]", "member" : "kantan.codecs.laws.discipline.ArbitraryArities.genLegalWith1", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#genLegalWith1[E1,D1,EE,DD,T](decoded:D1=>DD)(encoded:E1=>EE)(implicitarb1:org.scalacheck.Arbitrary[kantan.codecs.laws.CodecValue.LegalValue[E1,D1,T]]):org.scalacheck.Gen[kantan.codecs.laws.CodecValue.LegalValue[EE,DD,T]]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/laws\/discipline\/ArbitraryInstances.html", "kind" : "trait"}, {"name" : "kantan.mongodb.laws.discipline.BsonDocumentCodecTests", "shortDescription" : "", "object" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: BsonDocumentCodecLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalBsonDocument[A]]): BsonDocumentCodecTests[A]", "member" : "kantan.mongodb.laws.discipline.BsonDocumentCodecTests.apply", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#apply[A](implicitevidence$1:kantan.mongodb.laws.BsonDocumentCodecLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.mongodb.laws.LegalBsonDocument[A]]):kantan.mongodb.laws.discipline.BsonDocumentCodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentCodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.laws.discipline.BsonDocumentDecoderTests", "shortDescription" : "", "object" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: BsonDocumentCodecLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalBsonDocument[A]]): BsonDocumentCodecTests[A]", "member" : "kantan.mongodb.laws.discipline.BsonDocumentDecoderTests.apply", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#apply[A](implicitevidence$1:kantan.mongodb.laws.BsonDocumentCodecLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.mongodb.laws.LegalBsonDocument[A]]):kantan.mongodb.laws.discipline.BsonDocumentCodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.laws.discipline.BsonDocumentEncoderTests", "shortDescription" : "", "object" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: BsonDocumentEncoderLaws[A], arg1: Arbitrary[A], al: Arbitrary[LegalBsonDocument[A]]): BsonDocumentEncoderTests[A]", "member" : "kantan.mongodb.laws.discipline.BsonDocumentEncoderTests.apply", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#apply[A](implicitevidence$1:kantan.mongodb.laws.BsonDocumentEncoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicital:org.scalacheck.Arbitrary[kantan.mongodb.laws.LegalBsonDocument[A]]):kantan.mongodb.laws.discipline.BsonDocumentEncoderTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonDocumentEncoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.laws.discipline.BsonValueCodecTests", "shortDescription" : "", "object" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: BsonValueCodecLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalBsonValue[A]]): BsonValueCodecTests[A]", "member" : "kantan.mongodb.laws.discipline.BsonValueCodecTests.apply", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#apply[A](implicitevidence$1:kantan.mongodb.laws.BsonValueCodecLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.mongodb.laws.LegalBsonValue[A]]):kantan.mongodb.laws.discipline.BsonValueCodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueCodecTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.laws.discipline.BsonValueDecoderTests", "shortDescription" : "", "object" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: BsonValueCodecLaws[A], arg1: Arbitrary[A], arg2: Cogen[A], al: Arbitrary[LegalBsonValue[A]]): BsonValueCodecTests[A]", "member" : "kantan.mongodb.laws.discipline.BsonValueDecoderTests.apply", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#apply[A](implicitevidence$1:kantan.mongodb.laws.BsonValueCodecLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicitevidence$3:org.scalacheck.Cogen[A],implicital:org.scalacheck.Arbitrary[kantan.mongodb.laws.LegalBsonValue[A]]):kantan.mongodb.laws.discipline.BsonValueCodecTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueDecoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.laws.discipline.BsonValueEncoderTests", "shortDescription" : "", "object" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html", "members_object" : [{"label" : "apply", "tail" : "(arg0: BsonValueEncoderLaws[A], arg1: Arbitrary[A], al: Arbitrary[LegalBsonValue[A]]): BsonValueEncoderTests[A]", "member" : "kantan.mongodb.laws.discipline.BsonValueEncoderTests.apply", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#apply[A](implicitevidence$1:kantan.mongodb.laws.BsonValueEncoderLaws[A],implicitevidence$2:org.scalacheck.Arbitrary[A],implicital:org.scalacheck.Arbitrary[kantan.mongodb.laws.LegalBsonValue[A]]):kantan.mongodb.laws.discipline.BsonValueEncoderTests[A]", "kind" : "def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/laws\/discipline\/BsonValueEncoderTests$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}], "kantan" : [], "kantan.mongodb.ops" : [{"name" : "kantan.mongodb.ops.bsonValueDecoder", "shortDescription" : "", "object" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html", "members_object" : [{"label" : "toBsonValueDecoderOps", "tail" : "(value: BsonValue): BsonValueDecoderOps", "member" : "kantan.mongodb.ops.ToBsonValueDecoderOps.toBsonValueDecoderOps", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#toBsonValueDecoderOps(value:kantan.mongodb.BsonValue):kantan.mongodb.ops.BsonValueDecoderOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ops\/bsonValueDecoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.ops.BsonValueDecoderOps", "shortDescription" : "", "members_class" : [{"label" : "unsafeDecodeBson", "tail" : "(arg0: BsonValueDecoder[A]): A", "member" : "kantan.mongodb.ops.BsonValueDecoderOps.unsafeDecodeBson", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#unsafeDecodeBson[A](implicitevidence$2:kantan.mongodb.BsonValueDecoder[A]):A", "kind" : "def"}, {"label" : "decodeBson", "tail" : "(arg0: BsonValueDecoder[A]): DecodeResult[A]", "member" : "kantan.mongodb.ops.BsonValueDecoderOps.decodeBson", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#decodeBson[A](implicitevidence$1:kantan.mongodb.BsonValueDecoder[A]):kantan.mongodb.DecodeResult[A]", "kind" : "def"}, {"member" : "kantan.mongodb.ops.BsonValueDecoderOps#<init>", "error" : "unsupported entity"}, {"label" : "value", "tail" : ": BsonValue", "member" : "kantan.mongodb.ops.BsonValueDecoderOps.value", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#value:kantan.mongodb.BsonValue", "kind" : "val"}, {"label" : "getClass", "tail" : "(): Class[_ <: AnyVal]", "member" : "scala.AnyVal.getClass", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#getClass():Class[_<:AnyVal]", "kind" : "def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.Any.##", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html###():Int", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.Any.toString", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#toString():String", "kind" : "def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.!=", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.Any.==", "link" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/ops\/BsonValueDecoderOps.html", "kind" : "class"}, {"name" : "kantan.mongodb.ops.bsonValueEncoder", "shortDescription" : "", "object" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html", "members_object" : [{"label" : "toBsonValueEncoderOps", "tail" : "(a: A)(arg0: BsonValueEncoder[A]): BsonValueEncoderOps[A]", "member" : "kantan.mongodb.ops.ToBsonValueEncoderOps.toBsonValueEncoderOps", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#toBsonValueEncoderOps[A](a:A)(implicitevidence$2:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.ops.BsonValueEncoderOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ops\/bsonValueEncoder$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "kind" : "object"}, {"name" : "kantan.mongodb.ops.BsonValueEncoderOps", "shortDescription" : "", "members_class" : [{"label" : "encodeBson", "tail" : "(): BsonValue", "member" : "kantan.mongodb.ops.BsonValueEncoderOps.encodeBson", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#encodeBson:kantan.mongodb.BsonValue", "kind" : "def"}, {"member" : "kantan.mongodb.ops.BsonValueEncoderOps#<init>", "error" : "unsupported entity"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "class" : "kantan\/mongodb\/ops\/BsonValueEncoderOps.html", "kind" : "class"}, {"name" : "kantan.mongodb.ops.ToBsonValueDecoderOps", "members_trait" : [{"label" : "toBsonValueDecoderOps", "tail" : "(value: BsonValue): BsonValueDecoderOps", "member" : "kantan.mongodb.ops.ToBsonValueDecoderOps.toBsonValueDecoderOps", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#toBsonValueDecoderOps(value:kantan.mongodb.BsonValue):kantan.mongodb.ops.BsonValueDecoderOps", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/ops\/ToBsonValueDecoderOps.html", "kind" : "trait"}, {"name" : "kantan.mongodb.ops.ToBsonValueEncoderOps", "members_trait" : [{"label" : "toBsonValueEncoderOps", "tail" : "(a: A)(arg0: BsonValueEncoder[A]): BsonValueEncoderOps[A]", "member" : "kantan.mongodb.ops.ToBsonValueEncoderOps.toBsonValueEncoderOps", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#toBsonValueEncoderOps[A](a:A)(implicitevidence$2:kantan.mongodb.BsonValueEncoder[A]):kantan.mongodb.ops.BsonValueEncoderOps[A]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/ops\/ToBsonValueEncoderOps.html", "kind" : "trait"}], "kantan.mongodb.joda" : [], "kantan.mongodb.options" : [{"name" : "kantan.mongodb.options.BulkWriteOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/BulkWriteOpts$.html", "members_object" : [{"label" : "default", "tail" : ": BulkWriteOpts", "member" : "kantan.mongodb.options.BulkWriteOpts.default", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#default:kantan.mongodb.options.BulkWriteOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/BulkWriteOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "bypassDocumentValidation", "tail" : "(b: Boolean): BulkWriteOpts", "member" : "kantan.mongodb.options.BulkWriteOpts.bypassDocumentValidation", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#bypassDocumentValidation(b:Boolean):kantan.mongodb.options.BulkWriteOpts", "kind" : "def"}, {"label" : "ordered", "tail" : "(o: Boolean): BulkWriteOpts", "member" : "kantan.mongodb.options.BulkWriteOpts.ordered", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#ordered(o:Boolean):kantan.mongodb.options.BulkWriteOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.BulkWriteOpts#<init>", "error" : "unsupported entity"}, {"label" : "ordered", "tail" : ": Boolean", "member" : "kantan.mongodb.options.BulkWriteOpts.ordered", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#ordered:Boolean", "kind" : "val"}, {"label" : "bypassDocumentValidation", "tail" : ": Boolean", "member" : "kantan.mongodb.options.BulkWriteOpts.bypassDocumentValidation", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#bypassDocumentValidation:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/BulkWriteOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/BulkWriteOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.Collation", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/Collation$.html", "members_object" : [{"label" : "MaxVariable", "tail" : "", "member" : "kantan.mongodb.options.Collation.MaxVariable", "link" : "kantan\/mongodb\/options\/Collation$.html#MaxVariable", "kind" : "object"}, {"label" : "MaxVariable", "tail" : "", "member" : "kantan.mongodb.options.Collation.MaxVariable", "link" : "kantan\/mongodb\/options\/Collation$.html#MaxVariableextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "Strength", "tail" : "", "member" : "kantan.mongodb.options.Collation.Strength", "link" : "kantan\/mongodb\/options\/Collation$.html#Strength", "kind" : "object"}, {"label" : "Strength", "tail" : "", "member" : "kantan.mongodb.options.Collation.Strength", "link" : "kantan\/mongodb\/options\/Collation$.html#StrengthextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "CaseFirst", "tail" : "", "member" : "kantan.mongodb.options.Collation.CaseFirst", "link" : "kantan\/mongodb\/options\/Collation$.html#CaseFirst", "kind" : "object"}, {"label" : "CaseFirst", "tail" : "", "member" : "kantan.mongodb.options.Collation.CaseFirst", "link" : "kantan\/mongodb\/options\/Collation$.html#CaseFirstextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "Alternate", "tail" : "", "member" : "kantan.mongodb.options.Collation.Alternate", "link" : "kantan\/mongodb\/options\/Collation$.html#Alternate", "kind" : "object"}, {"label" : "Alternate", "tail" : "", "member" : "kantan.mongodb.options.Collation.Alternate", "link" : "kantan\/mongodb\/options\/Collation$.html#AlternateextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "default", "tail" : ": Collation", "member" : "kantan.mongodb.options.Collation.default", "link" : "kantan\/mongodb\/options\/Collation$.html#default:kantan.mongodb.options.Collation", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/Collation$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/Collation$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/Collation$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/Collation$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/Collation$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/Collation$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/Collation$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/Collation$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/Collation$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/Collation$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/Collation$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/Collation$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/Collation$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/Collation$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/Collation$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/Collation$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/Collation$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/Collation$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/Collation$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "maxVariable", "tail" : "(m: MaxVariable): Collation", "member" : "kantan.mongodb.options.Collation.maxVariable", "link" : "kantan\/mongodb\/options\/Collation.html#maxVariable(m:kantan.mongodb.options.Collation.MaxVariable):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "strength", "tail" : "(s: Strength): Collation", "member" : "kantan.mongodb.options.Collation.strength", "link" : "kantan\/mongodb\/options\/Collation.html#strength(s:kantan.mongodb.options.Collation.Strength):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "caseFirst", "tail" : "(c: CaseFirst): Collation", "member" : "kantan.mongodb.options.Collation.caseFirst", "link" : "kantan\/mongodb\/options\/Collation.html#caseFirst(c:kantan.mongodb.options.Collation.CaseFirst):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "alternate", "tail" : "(a: Alternate): Collation", "member" : "kantan.mongodb.options.Collation.alternate", "link" : "kantan\/mongodb\/options\/Collation.html#alternate(a:kantan.mongodb.options.Collation.Alternate):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "backwards", "tail" : "(b: Boolean): Collation", "member" : "kantan.mongodb.options.Collation.backwards", "link" : "kantan\/mongodb\/options\/Collation.html#backwards(b:Boolean):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "locale", "tail" : "(l: String): Collation", "member" : "kantan.mongodb.options.Collation.locale", "link" : "kantan\/mongodb\/options\/Collation.html#locale(l:String):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "numericOrdering", "tail" : "(n: Boolean): Collation", "member" : "kantan.mongodb.options.Collation.numericOrdering", "link" : "kantan\/mongodb\/options\/Collation.html#numericOrdering(n:Boolean):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "caseLevel", "tail" : "(c: Boolean): Collation", "member" : "kantan.mongodb.options.Collation.caseLevel", "link" : "kantan\/mongodb\/options\/Collation.html#caseLevel(c:Boolean):kantan.mongodb.options.Collation", "kind" : "def"}, {"label" : "normalisation", "tail" : "(n: Boolean): Collation", "member" : "kantan.mongodb.options.Collation.normalisation", "link" : "kantan\/mongodb\/options\/Collation.html#normalisation(n:Boolean):kantan.mongodb.options.Collation", "kind" : "def"}, {"member" : "kantan.mongodb.options.Collation#<init>", "error" : "unsupported entity"}, {"label" : "maxVariable", "tail" : ": MaxVariable", "member" : "kantan.mongodb.options.Collation.maxVariable", "link" : "kantan\/mongodb\/options\/Collation.html#maxVariable:kantan.mongodb.options.Collation.MaxVariable", "kind" : "val"}, {"label" : "strength", "tail" : ": Strength", "member" : "kantan.mongodb.options.Collation.strength", "link" : "kantan\/mongodb\/options\/Collation.html#strength:kantan.mongodb.options.Collation.Strength", "kind" : "val"}, {"label" : "caseFirst", "tail" : ": CaseFirst", "member" : "kantan.mongodb.options.Collation.caseFirst", "link" : "kantan\/mongodb\/options\/Collation.html#caseFirst:kantan.mongodb.options.Collation.CaseFirst", "kind" : "val"}, {"label" : "alternate", "tail" : ": Alternate", "member" : "kantan.mongodb.options.Collation.alternate", "link" : "kantan\/mongodb\/options\/Collation.html#alternate:kantan.mongodb.options.Collation.Alternate", "kind" : "val"}, {"label" : "backwards", "tail" : ": Boolean", "member" : "kantan.mongodb.options.Collation.backwards", "link" : "kantan\/mongodb\/options\/Collation.html#backwards:Boolean", "kind" : "val"}, {"label" : "locale", "tail" : ": String", "member" : "kantan.mongodb.options.Collation.locale", "link" : "kantan\/mongodb\/options\/Collation.html#locale:String", "kind" : "val"}, {"label" : "numericOrdering", "tail" : ": Boolean", "member" : "kantan.mongodb.options.Collation.numericOrdering", "link" : "kantan\/mongodb\/options\/Collation.html#numericOrdering:Boolean", "kind" : "val"}, {"label" : "caseLevel", "tail" : ": Boolean", "member" : "kantan.mongodb.options.Collation.caseLevel", "link" : "kantan\/mongodb\/options\/Collation.html#caseLevel:Boolean", "kind" : "val"}, {"label" : "normalisation", "tail" : ": Boolean", "member" : "kantan.mongodb.options.Collation.normalisation", "link" : "kantan\/mongodb\/options\/Collation.html#normalisation:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/Collation.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/Collation.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/Collation.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/Collation.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/Collation.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/Collation.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/Collation.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/Collation.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/Collation.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/Collation.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/Collation.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/Collation.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/Collation.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/Collation.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/Collation.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/Collation.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/Collation.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.CountOpts", "shortDescription" : "Options for a count operation.", "object" : "kantan\/mongodb\/options\/CountOpts$.html", "members_object" : [{"label" : "default", "tail" : ": CountOpts", "member" : "kantan.mongodb.options.CountOpts.default", "link" : "kantan\/mongodb\/options\/CountOpts$.html#default:kantan.mongodb.options.CountOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/CountOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/CountOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/CountOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/CountOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/CountOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/CountOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/CountOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CountOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CountOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CountOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/CountOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/CountOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/CountOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/CountOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/CountOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/CountOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/CountOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/CountOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/CountOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "skip", "tail" : "(i: Int): CountOpts", "member" : "kantan.mongodb.options.CountOpts.skip", "link" : "kantan\/mongodb\/options\/CountOpts.html#skip(i:Int):kantan.mongodb.options.CountOpts", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): CountOpts", "member" : "kantan.mongodb.options.CountOpts.maxTime", "link" : "kantan\/mongodb\/options\/CountOpts.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.options.CountOpts", "kind" : "def"}, {"label" : "limit", "tail" : "(i: Int): CountOpts", "member" : "kantan.mongodb.options.CountOpts.limit", "link" : "kantan\/mongodb\/options\/CountOpts.html#limit(i:Int):kantan.mongodb.options.CountOpts", "kind" : "def"}, {"label" : "hint", "tail" : "(string: String): CountOpts", "member" : "kantan.mongodb.options.CountOpts.hint", "link" : "kantan\/mongodb\/options\/CountOpts.html#hint(string:String):kantan.mongodb.options.CountOpts", "kind" : "def"}, {"label" : "hint", "tail" : "(h: H)(arg0: BsonDocumentEncoder[H]): CountOpts", "member" : "kantan.mongodb.options.CountOpts.hint", "link" : "kantan\/mongodb\/options\/CountOpts.html#hint[H](h:H)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[H]):kantan.mongodb.options.CountOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.CountOpts#<init>", "error" : "unsupported entity"}, {"label" : "skip", "tail" : ": Option[Int]", "member" : "kantan.mongodb.options.CountOpts.skip", "link" : "kantan\/mongodb\/options\/CountOpts.html#skip:Option[Int]", "kind" : "val"}, {"label" : "maxTime", "tail" : ": Option[Duration]", "member" : "kantan.mongodb.options.CountOpts.maxTime", "link" : "kantan\/mongodb\/options\/CountOpts.html#maxTime:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "limit", "tail" : ": Option[Int]", "member" : "kantan.mongodb.options.CountOpts.limit", "link" : "kantan\/mongodb\/options\/CountOpts.html#limit:Option[Int]", "kind" : "val"}, {"label" : "hint", "tail" : ": Option[Either[BsonDocument, String]]", "member" : "kantan.mongodb.options.CountOpts.hint", "link" : "kantan\/mongodb\/options\/CountOpts.html#hint:Option[Either[kantan.mongodb.BsonDocument,String]]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/CountOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/CountOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/CountOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/CountOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/CountOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/CountOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/CountOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CountOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CountOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CountOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/CountOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/CountOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/CountOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/CountOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/CountOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/CountOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/CountOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.CreateCollectionOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html", "members_object" : [{"label" : "default", "tail" : ": CreateCollectionOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.default", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#default:kantan.mongodb.options.CreateCollectionOpts", "kind" : "val"}, {"label" : "Cap", "tail" : "", "member" : "kantan.mongodb.options.CreateCollectionOpts.Cap", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#CapextendsProductwithSerializable", "kind" : "final case class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "validation", "tail" : "(v: ValidationOpts): CreateCollectionOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.validation", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#validation(v:kantan.mongodb.options.ValidationOpts):kantan.mongodb.options.CreateCollectionOpts", "kind" : "def"}, {"label" : "storageEngine", "tail" : "(e: E)(arg0: BsonDocumentEncoder[E]): CreateCollectionOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.storageEngine", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#storageEngine[E](e:E)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[E]):kantan.mongodb.options.CreateCollectionOpts", "kind" : "def"}, {"label" : "cap", "tail" : "(c: Cap): CreateCollectionOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.cap", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#cap(c:kantan.mongodb.options.CreateCollectionOpts.Cap):kantan.mongodb.options.CreateCollectionOpts", "kind" : "def"}, {"label" : "indexOptions", "tail" : "(i: I)(arg0: BsonDocumentEncoder[I]): CreateCollectionOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.indexOptions", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#indexOptions[I](i:I)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[I]):kantan.mongodb.options.CreateCollectionOpts", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): CreateCollectionOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.collation", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.CreateCollectionOpts", "kind" : "def"}, {"label" : "autoIndex", "tail" : "(b: Boolean): CreateCollectionOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.autoIndex", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#autoIndex(b:Boolean):kantan.mongodb.options.CreateCollectionOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.CreateCollectionOpts#<init>", "error" : "unsupported entity"}, {"label" : "validation", "tail" : ": ValidationOpts", "member" : "kantan.mongodb.options.CreateCollectionOpts.validation", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#validation:kantan.mongodb.options.ValidationOpts", "kind" : "val"}, {"label" : "storageEngine", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.CreateCollectionOpts.storageEngine", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#storageEngine:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "cap", "tail" : ": Option[Cap]", "member" : "kantan.mongodb.options.CreateCollectionOpts.cap", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#cap:Option[kantan.mongodb.options.CreateCollectionOpts.Cap]", "kind" : "val"}, {"label" : "indexOptions", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.CreateCollectionOpts.indexOptions", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#indexOptions:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "collation", "tail" : ": Collation", "member" : "kantan.mongodb.options.CreateCollectionOpts.collation", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#collation:kantan.mongodb.options.Collation", "kind" : "val"}, {"label" : "autoIndex", "tail" : ": Boolean", "member" : "kantan.mongodb.options.CreateCollectionOpts.autoIndex", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#autoIndex:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/CreateCollectionOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/CreateCollectionOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.CreateViewOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/CreateViewOpts$.html", "members_object" : [{"label" : "default", "tail" : ": CreateViewOpts", "member" : "kantan.mongodb.options.CreateViewOpts.default", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#default:kantan.mongodb.options.CreateViewOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/CreateViewOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "collation", "tail" : "(c: Collation): CreateViewOpts", "member" : "kantan.mongodb.options.CreateViewOpts.collation", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.CreateViewOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.CreateViewOpts#<init>", "error" : "unsupported entity"}, {"label" : "collation", "tail" : ": Collation", "member" : "kantan.mongodb.options.CreateViewOpts.collation", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#collation:kantan.mongodb.options.Collation", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/CreateViewOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/CreateViewOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.DeleteOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/DeleteOpts$.html", "members_object" : [{"label" : "default", "tail" : ": DeleteOpts", "member" : "kantan.mongodb.options.DeleteOpts.default", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#default:kantan.mongodb.options.DeleteOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/DeleteOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "collation", "tail" : "(c: Collation): DeleteOpts", "member" : "kantan.mongodb.options.DeleteOpts.collation", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.DeleteOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.DeleteOpts#<init>", "error" : "unsupported entity"}, {"label" : "collation", "tail" : ": Option[Collation]", "member" : "kantan.mongodb.options.DeleteOpts.collation", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#collation:Option[kantan.mongodb.options.Collation]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/DeleteOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/DeleteOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/DeleteOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.FindOneAndDeleteOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html", "members_object" : [{"label" : "default", "tail" : ": FindOneAndDeleteOpts", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.default", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#default:kantan.mongodb.options.FindOneAndDeleteOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "sort", "tail" : "(s: S)(arg0: BsonDocumentEncoder[S]): FindOneAndDeleteOpts", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.sort", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#sort[S](s:S)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[S]):kantan.mongodb.options.FindOneAndDeleteOpts", "kind" : "def"}, {"label" : "projection", "tail" : "(p: P)(arg0: BsonDocumentEncoder[P]): FindOneAndDeleteOpts", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.projection", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#projection[P](p:P)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[P]):kantan.mongodb.options.FindOneAndDeleteOpts", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): FindOneAndDeleteOpts", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.maxTime", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.options.FindOneAndDeleteOpts", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): FindOneAndDeleteOpts", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.collation", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.FindOneAndDeleteOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.FindOneAndDeleteOpts#<init>", "error" : "unsupported entity"}, {"label" : "sort", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.sort", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#sort:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "projection", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.projection", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#projection:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "maxTime", "tail" : ": Option[Duration]", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.maxTime", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#maxTime:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "collation", "tail" : ": Option[Collation]", "member" : "kantan.mongodb.options.FindOneAndDeleteOpts.collation", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#collation:Option[kantan.mongodb.options.Collation]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/FindOneAndDeleteOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.FindOneAndReplaceOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html", "members_object" : [{"label" : "default", "tail" : ": FindOneAndReplaceOpts", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.default", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#default:kantan.mongodb.options.FindOneAndReplaceOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "upsert", "tail" : "(b: Boolean): FindOneAndReplaceOpts", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.upsert", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#upsert(b:Boolean):kantan.mongodb.options.FindOneAndReplaceOpts", "kind" : "def"}, {"label" : "sort", "tail" : "(s: S)(arg0: BsonDocumentEncoder[S]): FindOneAndReplaceOpts", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.sort", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#sort[S](s:S)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[S]):kantan.mongodb.options.FindOneAndReplaceOpts", "kind" : "def"}, {"label" : "updated", "tail" : "(b: Boolean): FindOneAndReplaceOpts", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.updated", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#updated(b:Boolean):kantan.mongodb.options.FindOneAndReplaceOpts", "kind" : "def"}, {"label" : "projection", "tail" : "(p: P)(arg0: BsonDocumentEncoder[P]): FindOneAndReplaceOpts", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.projection", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#projection[P](p:P)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[P]):kantan.mongodb.options.FindOneAndReplaceOpts", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): FindOneAndReplaceOpts", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.maxTime", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.options.FindOneAndReplaceOpts", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): FindOneAndReplaceOpts", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.collation", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.FindOneAndReplaceOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.FindOneAndReplaceOpts#<init>", "error" : "unsupported entity"}, {"label" : "upsert", "tail" : ": Option[Boolean]", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.upsert", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#upsert:Option[Boolean]", "kind" : "val"}, {"label" : "sort", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.sort", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#sort:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "updated", "tail" : ": Boolean", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.updated", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#updated:Boolean", "kind" : "val"}, {"label" : "projection", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.projection", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#projection:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "maxTime", "tail" : ": Option[Duration]", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.maxTime", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#maxTime:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "collation", "tail" : ": Option[Collation]", "member" : "kantan.mongodb.options.FindOneAndReplaceOpts.collation", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#collation:Option[kantan.mongodb.options.Collation]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/FindOneAndReplaceOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.FindOneAndUpdateOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html", "members_object" : [{"label" : "default", "tail" : ": FindOneAndUpdateOpts", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.default", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#default:kantan.mongodb.options.FindOneAndUpdateOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "upsert", "tail" : "(b: Boolean): FindOneAndUpdateOpts", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.upsert", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#upsert(b:Boolean):kantan.mongodb.options.FindOneAndUpdateOpts", "kind" : "def"}, {"label" : "updated", "tail" : "(b: Boolean): FindOneAndUpdateOpts", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.updated", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#updated(b:Boolean):kantan.mongodb.options.FindOneAndUpdateOpts", "kind" : "def"}, {"label" : "sort", "tail" : "(s: S)(arg0: BsonDocumentEncoder[S]): FindOneAndUpdateOpts", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.sort", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#sort[S](s:S)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[S]):kantan.mongodb.options.FindOneAndUpdateOpts", "kind" : "def"}, {"label" : "projection", "tail" : "(p: P)(arg0: BsonDocumentEncoder[P]): FindOneAndUpdateOpts", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.projection", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#projection[P](p:P)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[P]):kantan.mongodb.options.FindOneAndUpdateOpts", "kind" : "def"}, {"label" : "maxTime", "tail" : "(duration: Duration): FindOneAndUpdateOpts", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.maxTime", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#maxTime(duration:scala.concurrent.duration.Duration):kantan.mongodb.options.FindOneAndUpdateOpts", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): FindOneAndUpdateOpts", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.collation", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.FindOneAndUpdateOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.FindOneAndUpdateOpts#<init>", "error" : "unsupported entity"}, {"label" : "upsert", "tail" : ": Option[Boolean]", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.upsert", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#upsert:Option[Boolean]", "kind" : "val"}, {"label" : "updated", "tail" : ": Boolean", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.updated", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#updated:Boolean", "kind" : "val"}, {"label" : "sort", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.sort", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#sort:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "projection", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.projection", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#projection:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "maxTime", "tail" : ": Option[Duration]", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.maxTime", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#maxTime:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "collation", "tail" : ": Option[Collation]", "member" : "kantan.mongodb.options.FindOneAndUpdateOpts.collation", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#collation:Option[kantan.mongodb.options.Collation]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/FindOneAndUpdateOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.IndexOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/IndexOpts$.html", "members_object" : [{"label" : "TwoDimensionsSphere", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.TwoDimensionsSphere", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#TwoDimensionsSphere", "kind" : "object"}, {"label" : "TwoDimensionsSphere", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.TwoDimensionsSphere", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#TwoDimensionsSphereextendsIndexOpts.SpecialisedOptswithProductwithSerializable", "kind" : "final case class"}, {"label" : "TwoDimensions", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.TwoDimensions", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#TwoDimensions", "kind" : "object"}, {"label" : "TwoDimensions", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.TwoDimensions", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#TwoDimensionsextendsIndexOpts.SpecialisedOptswithProductwithSerializable", "kind" : "final case class"}, {"label" : "GeoHaystack", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.GeoHaystack", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#GeoHaystackextendsIndexOpts.SpecialisedOptswithProductwithSerializable", "kind" : "final case class"}, {"label" : "Text", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.Text", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#Text", "kind" : "object"}, {"label" : "Text", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.Text", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#TextextendsIndexOpts.SpecialisedOptswithProductwithSerializable", "kind" : "final case class"}, {"label" : "SpecialisedOpts", "tail" : "", "member" : "kantan.mongodb.options.IndexOpts.SpecialisedOpts", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#SpecialisedOptsextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "default", "tail" : ": IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.default", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#default:kantan.mongodb.options.IndexOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/IndexOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/IndexOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "specialised", "tail" : "(s: SpecialisedOpts): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.specialised", "link" : "kantan\/mongodb\/options\/IndexOpts.html#specialised(s:kantan.mongodb.options.IndexOpts.SpecialisedOpts):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "unique", "tail" : "(u: Boolean): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.unique", "link" : "kantan\/mongodb\/options\/IndexOpts.html#unique(u:Boolean):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "sparse", "tail" : "(s: Boolean): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.sparse", "link" : "kantan\/mongodb\/options\/IndexOpts.html#sparse(s:Boolean):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "version", "tail" : "(v: Int): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.version", "link" : "kantan\/mongodb\/options\/IndexOpts.html#version(v:Int):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "storageEngine", "tail" : "(s: S)(arg0: BsonDocumentEncoder[S]): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.storageEngine", "link" : "kantan\/mongodb\/options\/IndexOpts.html#storageEngine[S](s:S)(implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[S]):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "partialFilterExpression", "tail" : "(p: P)(arg0: BsonDocumentEncoder[P]): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.partialFilterExpression", "link" : "kantan\/mongodb\/options\/IndexOpts.html#partialFilterExpression[P](p:P)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[P]):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "name", "tail" : "(n: String): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.name", "link" : "kantan\/mongodb\/options\/IndexOpts.html#name(n:String):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "expiresAfter", "tail" : "(duration: Duration): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.expiresAfter", "link" : "kantan\/mongodb\/options\/IndexOpts.html#expiresAfter(duration:scala.concurrent.duration.Duration):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"label" : "collation", "tail" : "(c: Collation): IndexOpts", "member" : "kantan.mongodb.options.IndexOpts.collation", "link" : "kantan\/mongodb\/options\/IndexOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.IndexOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.IndexOpts#<init>", "error" : "unsupported entity"}, {"label" : "specialised", "tail" : ": Option[SpecialisedOpts]", "member" : "kantan.mongodb.options.IndexOpts.specialised", "link" : "kantan\/mongodb\/options\/IndexOpts.html#specialised:Option[kantan.mongodb.options.IndexOpts.SpecialisedOpts]", "kind" : "val"}, {"label" : "unique", "tail" : ": Boolean", "member" : "kantan.mongodb.options.IndexOpts.unique", "link" : "kantan\/mongodb\/options\/IndexOpts.html#unique:Boolean", "kind" : "val"}, {"label" : "sparse", "tail" : ": Boolean", "member" : "kantan.mongodb.options.IndexOpts.sparse", "link" : "kantan\/mongodb\/options\/IndexOpts.html#sparse:Boolean", "kind" : "val"}, {"label" : "version", "tail" : ": Int", "member" : "kantan.mongodb.options.IndexOpts.version", "link" : "kantan\/mongodb\/options\/IndexOpts.html#version:Int", "kind" : "val"}, {"label" : "storageEngine", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.IndexOpts.storageEngine", "link" : "kantan\/mongodb\/options\/IndexOpts.html#storageEngine:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "partialFilterExpression", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.IndexOpts.partialFilterExpression", "link" : "kantan\/mongodb\/options\/IndexOpts.html#partialFilterExpression:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "name", "tail" : ": Option[String]", "member" : "kantan.mongodb.options.IndexOpts.name", "link" : "kantan\/mongodb\/options\/IndexOpts.html#name:Option[String]", "kind" : "val"}, {"label" : "expiresAfter", "tail" : ": Option[Duration]", "member" : "kantan.mongodb.options.IndexOpts.expiresAfter", "link" : "kantan\/mongodb\/options\/IndexOpts.html#expiresAfter:Option[scala.concurrent.duration.Duration]", "kind" : "val"}, {"label" : "collation", "tail" : ": Option[Collation]", "member" : "kantan.mongodb.options.IndexOpts.collation", "link" : "kantan\/mongodb\/options\/IndexOpts.html#collation:Option[kantan.mongodb.options.Collation]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/IndexOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/IndexOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/IndexOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/IndexOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/IndexOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/IndexOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/IndexOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/IndexOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/IndexOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/IndexOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/IndexOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/IndexOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/IndexOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/IndexOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/IndexOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/IndexOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/IndexOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.InsertManyOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/InsertManyOpts$.html", "members_object" : [{"label" : "default", "tail" : ": InsertManyOpts", "member" : "kantan.mongodb.options.InsertManyOpts.default", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#default:kantan.mongodb.options.InsertManyOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/InsertManyOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "ordered", "tail" : "(o: Boolean): InsertManyOpts", "member" : "kantan.mongodb.options.InsertManyOpts.ordered", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#ordered(o:Boolean):kantan.mongodb.options.InsertManyOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.InsertManyOpts#<init>", "error" : "unsupported entity"}, {"label" : "ordered", "tail" : ": Boolean", "member" : "kantan.mongodb.options.InsertManyOpts.ordered", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#ordered:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/InsertManyOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/InsertManyOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.RenameCollectionOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html", "members_object" : [{"label" : "default", "tail" : ": RenameCollectionOpts", "member" : "kantan.mongodb.options.RenameCollectionOpts.default", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#default:kantan.mongodb.options.RenameCollectionOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "dropTarget", "tail" : "(b: Boolean): RenameCollectionOpts", "member" : "kantan.mongodb.options.RenameCollectionOpts.dropTarget", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#dropTarget(b:Boolean):kantan.mongodb.options.RenameCollectionOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.RenameCollectionOpts#<init>", "error" : "unsupported entity"}, {"label" : "dropTarget", "tail" : ": Boolean", "member" : "kantan.mongodb.options.RenameCollectionOpts.dropTarget", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#dropTarget:Boolean", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/RenameCollectionOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/RenameCollectionOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.UpdateOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/UpdateOpts$.html", "members_object" : [{"label" : "default", "tail" : ": UpdateOpts", "member" : "kantan.mongodb.options.UpdateOpts.default", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#default:kantan.mongodb.options.UpdateOpts", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/UpdateOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "collation", "tail" : "(c: Collation): UpdateOpts", "member" : "kantan.mongodb.options.UpdateOpts.collation", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#collation(c:kantan.mongodb.options.Collation):kantan.mongodb.options.UpdateOpts", "kind" : "def"}, {"label" : "upsert", "tail" : "(u: Boolean): UpdateOpts", "member" : "kantan.mongodb.options.UpdateOpts.upsert", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#upsert(u:Boolean):kantan.mongodb.options.UpdateOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.UpdateOpts#<init>", "error" : "unsupported entity"}, {"label" : "upsert", "tail" : ": Option[Boolean]", "member" : "kantan.mongodb.options.UpdateOpts.upsert", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#upsert:Option[Boolean]", "kind" : "val"}, {"label" : "collation", "tail" : ": Option[Collation]", "member" : "kantan.mongodb.options.UpdateOpts.collation", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#collation:Option[kantan.mongodb.options.Collation]", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/UpdateOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/UpdateOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/UpdateOpts.html", "kind" : "case class"}, {"name" : "kantan.mongodb.options.ValidationOpts", "shortDescription" : "", "object" : "kantan\/mongodb\/options\/ValidationOpts$.html", "members_object" : [{"label" : "default", "tail" : ": ValidationOpts", "member" : "kantan.mongodb.options.ValidationOpts.default", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#default:kantan.mongodb.options.ValidationOpts", "kind" : "val"}, {"label" : "Level", "tail" : "", "member" : "kantan.mongodb.options.ValidationOpts.Level", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#Level", "kind" : "object"}, {"label" : "Level", "tail" : "", "member" : "kantan.mongodb.options.ValidationOpts.Level", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#LevelextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "Action", "tail" : "", "member" : "kantan.mongodb.options.ValidationOpts.Action", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#Action", "kind" : "object"}, {"label" : "Action", "tail" : "", "member" : "kantan.mongodb.options.ValidationOpts.Action", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#ActionextendsProductwithSerializable", "kind" : "sealed abstract class"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/ValidationOpts$.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "members_case class" : [{"label" : "validator", "tail" : "(v: V)(arg0: BsonDocumentEncoder[V]): ValidationOpts", "member" : "kantan.mongodb.options.ValidationOpts.validator", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#validator[V](v:V)(implicitevidence$1:kantan.mongodb.BsonDocumentEncoder[V]):kantan.mongodb.options.ValidationOpts", "kind" : "def"}, {"label" : "level", "tail" : "(l: Level): ValidationOpts", "member" : "kantan.mongodb.options.ValidationOpts.level", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#level(l:kantan.mongodb.options.ValidationOpts.Level):kantan.mongodb.options.ValidationOpts", "kind" : "def"}, {"label" : "action", "tail" : "(a: Action): ValidationOpts", "member" : "kantan.mongodb.options.ValidationOpts.action", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#action(a:kantan.mongodb.options.ValidationOpts.Action):kantan.mongodb.options.ValidationOpts", "kind" : "def"}, {"member" : "kantan.mongodb.options.ValidationOpts#<init>", "error" : "unsupported entity"}, {"label" : "validator", "tail" : ": Option[BsonDocument]", "member" : "kantan.mongodb.options.ValidationOpts.validator", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#validator:Option[kantan.mongodb.BsonDocument]", "kind" : "val"}, {"label" : "level", "tail" : ": Level", "member" : "kantan.mongodb.options.ValidationOpts.level", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#level:kantan.mongodb.options.ValidationOpts.Level", "kind" : "val"}, {"label" : "action", "tail" : ": Action", "member" : "kantan.mongodb.options.ValidationOpts.action", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#action:kantan.mongodb.options.ValidationOpts.Action", "kind" : "val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/options\/ValidationOpts.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#notify():Unit", "kind" : "final def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#clone():Object", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/options\/ValidationOpts.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "case class" : "kantan\/mongodb\/options\/ValidationOpts.html", "kind" : "case class"}], "kantan.mongodb.laws" : [], "kantan.mongodb.generic" : [{"name" : "kantan.mongodb.generic.GenericInstances", "members_trait" : [{"label" : "bsonValueCnilDecoder", "tail" : ": BsonValueDecoder[CNil]", "member" : "kantan.mongodb.generic.GenericInstances.bsonValueCnilDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#bsonValueCnilDecoder:kantan.mongodb.BsonValueDecoder[shapeless.CNil]", "kind" : "implicit val"}, {"label" : "bsonDocumentCnilDecoder", "tail" : ": BsonDocumentDecoder[CNil]", "member" : "kantan.mongodb.generic.GenericInstances.bsonDocumentCnilDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#bsonDocumentCnilDecoder:kantan.mongodb.BsonDocumentDecoder[shapeless.CNil]", "kind" : "implicit val"}, {"label" : "hlistBsonValueDecoder", "tail" : "(arg0: BsonValueDecoder[H]): BsonValueDecoder[::[H, HNil]]", "member" : "kantan.mongodb.generic.GenericInstances.hlistBsonValueDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#hlistBsonValueDecoder[H](implicitevidence$6:kantan.mongodb.BsonValueDecoder[H]):kantan.mongodb.BsonValueDecoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "bsonHlistDecoder", "tail" : "(arg0: BsonValueDecoder[H], arg1: BsonDocumentDecoder[T], witness: Aux[K]): BsonDocumentDecoder[::[FieldType[K, H], T]]", "member" : "kantan.mongodb.generic.GenericInstances.bsonHlistDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#bsonHlistDecoder[K<:Symbol,H,T<:shapeless.HList](implicitevidence$4:kantan.mongodb.BsonValueDecoder[H],implicitevidence$5:kantan.mongodb.BsonDocumentDecoder[T],implicitwitness:shapeless.Witness.Aux[K]):kantan.mongodb.BsonDocumentDecoder[shapeless.labelled.FieldType[K,H]::T]", "kind" : "implicit def"}, {"label" : "bsonHnilDecoder", "tail" : ": BsonDocumentDecoder[HNil]", "member" : "kantan.mongodb.generic.GenericInstances.bsonHnilDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#bsonHnilDecoder:kantan.mongodb.BsonDocumentDecoder[shapeless.HNil]", "kind" : "implicit val"}, {"label" : "hlistBsonValueEncoder", "tail" : "(arg0: BsonValueEncoder[H]): BsonValueEncoder[::[H, HNil]]", "member" : "kantan.mongodb.generic.GenericInstances.hlistBsonValueEncoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#hlistBsonValueEncoder[H](implicitevidence$3:kantan.mongodb.BsonValueEncoder[H]):kantan.mongodb.BsonValueEncoder[H::shapeless.HNil]", "kind" : "implicit def"}, {"label" : "hlistBsonDocumentEncoder", "tail" : "(arg0: BsonValueEncoder[H], arg1: BsonDocumentEncoder[T], witness: Aux[K]): BsonDocumentEncoder[::[FieldType[K, H], T]]", "member" : "kantan.mongodb.generic.GenericInstances.hlistBsonDocumentEncoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#hlistBsonDocumentEncoder[K<:Symbol,H,T<:shapeless.HList](implicitevidence$1:kantan.mongodb.BsonValueEncoder[H],implicitevidence$2:kantan.mongodb.BsonDocumentEncoder[T],implicitwitness:shapeless.Witness.Aux[K]):kantan.mongodb.BsonDocumentEncoder[shapeless.labelled.FieldType[K,H]::T]", "kind" : "implicit def"}, {"label" : "bsonHnilEncoder", "tail" : ": BsonDocumentEncoder[HNil]", "member" : "kantan.mongodb.generic.GenericInstances.bsonHnilEncoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#bsonHnilEncoder:kantan.mongodb.BsonDocumentEncoder[shapeless.HNil]", "kind" : "implicit val"}, {"label" : "coproductEncoder", "tail" : "(eh: Encoder[E, H, T], ed: Encoder[E, D, T]): Encoder[E, :+:[H, D], T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductEncoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#coproductEncoder[E,H,D<:shapeless.Coproduct,T](impliciteh:kantan.codecs.Encoder[E,H,T],implicited:kantan.codecs.Encoder[E,D,T]):kantan.codecs.Encoder[E,H:+:D,T]", "kind" : "implicit def"}, {"label" : "cnilEncoder", "tail" : "(): Encoder[E, CNil, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilEncoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#cnilEncoder[E,D,T]:kantan.codecs.Encoder[E,shapeless.CNil,T]", "kind" : "implicit def"}, {"label" : "coproductDecoder", "tail" : "(dh: Decoder[E, H, F, T], dt: Decoder[E, D, F, T]): Decoder[E, :+:[H, D], F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.coproductDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#coproductDecoder[E,H,D<:shapeless.Coproduct,F,T](implicitdh:kantan.codecs.Decoder[E,H,F,T],implicitdt:kantan.codecs.Decoder[E,D,F,T]):kantan.codecs.Decoder[E,H:+:D,F,T]", "kind" : "implicit def"}, {"label" : "cnilDecoder", "tail" : "(f: (E) ⇒ F): Decoder[E, CNil, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.cnilDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#cnilDecoder[E,F,T](f:E=>F):kantan.codecs.Decoder[E,shapeless.CNil,F,T]", "kind" : "def"}, {"label" : "sumTypeDecoder", "tail" : "(gen: Aux[D, C], dr: Lazy[Decoder[E, C, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#sumTypeDecoder[E,D,F,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,C,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "sumTypeEncoder", "tail" : "(gen: Aux[D, C], er: Lazy[Encoder[E, C, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.sumTypeEncoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#sumTypeEncoder[E,D,T,C<:shapeless.Coproduct](implicitgen:shapeless.Generic.Aux[D,C],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,C,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoderFromLabelled", "tail" : "(generic: Aux[D, H], hDecoder: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoderFromLabelled", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#caseClassDecoderFromLabelled[E,D,F,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithDecoder:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassDecoder", "tail" : "(gen: Aux[D, H], dr: Lazy[Decoder[E, H, F, T]]): DerivedDecoder[E, D, F, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassDecoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#caseClassDecoder[E,D,F,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],implicitdr:shapeless.Lazy[kantan.codecs.Decoder[E,H,F,T]]):kantan.codecs.export.DerivedDecoder[E,D,F,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoderFromLabelled", "tail" : "(generic: Aux[D, H], hEncoder: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoderFromLabelled", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#caseClassEncoderFromLabelled[E,D,T,H<:shapeless.HList](implicitgeneric:shapeless.LabelledGeneric.Aux[D,H],implicithEncoder:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "caseClassEncoder", "tail" : "(gen: Aux[D, H], er: Lazy[Encoder[E, H, T]]): DerivedEncoder[E, D, T]", "member" : "kantan.codecs.shapeless.ShapelessInstances.caseClassEncoder", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#caseClassEncoder[E,D,T,H<:shapeless.HList](implicitgen:shapeless.Generic.Aux[D,H],impliciter:shapeless.Lazy[kantan.codecs.Encoder[E,H,T]]):kantan.codecs.export.DerivedEncoder[E,D,T]", "kind" : "implicit def"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/generic\/GenericInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/generic\/GenericInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/generic\/GenericInstances.html", "kind" : "trait"}], "kantan.mongodb.joda.time" : [{"name" : "kantan.mongodb.joda.time.JodaTimeInstances", "members_trait" : [{"label" : "jodaDateTimeEncoder", "tail" : ": BsonValueEncoder[DateTime]", "member" : "kantan.mongodb.joda.time.JodaTimeInstances.jodaDateTimeEncoder", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#jodaDateTimeEncoder:kantan.mongodb.BsonValueEncoder[org.joda.time.DateTime]", "kind" : "implicit val"}, {"label" : "jodaDateTimeDecoder", "tail" : ": BsonValueDecoder[DateTime]", "member" : "kantan.mongodb.joda.time.JodaTimeInstances.jodaDateTimeDecoder", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#jodaDateTimeDecoder:kantan.mongodb.BsonValueDecoder[org.joda.time.DateTime]", "kind" : "implicit val"}, {"label" : "synchronized", "tail" : "(arg0: ⇒ T0): T0", "member" : "scala.AnyRef.synchronized", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#synchronized[T0](x$1:=>T0):T0", "kind" : "final def"}, {"label" : "##", "tail" : "(): Int", "member" : "scala.AnyRef.##", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html###():Int", "kind" : "final def"}, {"label" : "!=", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.!=", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#!=(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "==", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.==", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#==(x$1:Any):Boolean", "kind" : "final def"}, {"label" : "ne", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.ne", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#ne(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "eq", "tail" : "(arg0: AnyRef): Boolean", "member" : "scala.AnyRef.eq", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#eq(x$1:AnyRef):Boolean", "kind" : "final def"}, {"label" : "finalize", "tail" : "(): Unit", "member" : "scala.AnyRef.finalize", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#finalize():Unit", "kind" : "def"}, {"label" : "wait", "tail" : "(): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#wait():Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long, arg1: Int): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#wait(x$1:Long,x$2:Int):Unit", "kind" : "final def"}, {"label" : "wait", "tail" : "(arg0: Long): Unit", "member" : "scala.AnyRef.wait", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#wait(x$1:Long):Unit", "kind" : "final def"}, {"label" : "notifyAll", "tail" : "(): Unit", "member" : "scala.AnyRef.notifyAll", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#notifyAll():Unit", "kind" : "final def"}, {"label" : "notify", "tail" : "(): Unit", "member" : "scala.AnyRef.notify", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#notify():Unit", "kind" : "final def"}, {"label" : "toString", "tail" : "(): String", "member" : "scala.AnyRef.toString", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#toString():String", "kind" : "def"}, {"label" : "clone", "tail" : "(): AnyRef", "member" : "scala.AnyRef.clone", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#clone():Object", "kind" : "def"}, {"label" : "equals", "tail" : "(arg0: Any): Boolean", "member" : "scala.AnyRef.equals", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#equals(x$1:Any):Boolean", "kind" : "def"}, {"label" : "hashCode", "tail" : "(): Int", "member" : "scala.AnyRef.hashCode", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#hashCode():Int", "kind" : "def"}, {"label" : "getClass", "tail" : "(): Class[_]", "member" : "scala.AnyRef.getClass", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#getClass():Class[_]", "kind" : "final def"}, {"label" : "asInstanceOf", "tail" : "(): T0", "member" : "scala.Any.asInstanceOf", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#asInstanceOf[T0]:T0", "kind" : "final def"}, {"label" : "isInstanceOf", "tail" : "(): Boolean", "member" : "scala.Any.isInstanceOf", "link" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html#isInstanceOf[T0]:Boolean", "kind" : "final def"}], "shortDescription" : "", "trait" : "kantan\/mongodb\/joda\/time\/JodaTimeInstances.html", "kind" : "trait"}]};